{"./":{"url":"./","title":"IDO Standardized Flutter Interface Documentation","keywords":"","body":"{IDO标准化Flutter接口说明} Flutter API： 1.下发基础事件 1.1 功能概括: APP可以通过这个接口下发指定事件到设备，事件包括设置指令、获取指令、通知指令、控制指令等，实现APP与设备交互基础功能。 1.2 API ID: Stream send({required CmdEvtType evt, String? json = '{}'}); 1.3 API参数说明: @Param:evt 基础事件号 @Param:json 基础事件项内容，JSON字符串格式 事件号说明和对应事件项内容说明跳转到 => IDO基础事件字段说明 2.蓝牙响应数据总入口 2.1 功能概括: 蓝牙库将接收到的字节数据通过这个接口解析，完成后以Json字符串的格式将结果通过注册的函数回调给APP。 2.2 API ID: void receiveDataFromBle(Uint8List data, String? macAddress, int type); 2.3 API参数说明: @Param:data 字节数据 @Param:macAddress 设备MAC地址 @Param:type 通道类型，0:BLE 1:SPP 3.初始化C库 3.1 功能概括: 初始化C库，完成C库的定时器创建，解析函数的注册，发送队列的创建的功能，创建示例的时候调用。 3.2 API ID: Future initClib(); 3.3 API参数说明: 无 4.设置C库日志模式 4.1 功能概括: 设置C库日志等级，DEBUG为调试模式；RELEASE线上版本，对日志的输出做了优化。 4.2 API ID: void setClibRunMode({required bool isDebug}); 4.3 API参数说明: @Param:isDebug 日志模式，true:调试模式 false:发布版本 5.注册蓝牙数据发送函数 5.1 功能概括: APP调用下发基础事件接口send(evt,json)后，C库通过注册的蓝牙发送函数将转换好的字节数据上报。 5.2 API ID: void registerWriteDataToBle(void Function(CmdRequest data) func); 5.3 API参数说明: @Param:func 蓝牙发送函数 6.蓝牙数据发送完成 6.1 功能概括: C库通过蓝牙数据发送函数上报的数据，通过蓝牙发送完成时调用。 6.2 API ID: void writeDataComplete(); 6.3 API参数说明: 无 7.标记设备已连接(蓝牙连接时调用) 7.1 功能概括: 连接时标记设备已连接。 7.2 API ID: Future markConnectedDeviceSafe({required String uniqueId,required IDOOtaType otaType,required bool isBinded,String? deviceName = ''}); 7.3 API参数说明: @Param:uniqueId (安卓:当前连接设备的mac地址)，iOS(当前连接设备的mac地址或uuid) @Param:otaMode 设置ota模式 @Param:isBinded 绑定状态 @Param:deviceName 设备名称 8.标记设备已断开(蓝牙断开时调用) 8.1 功能概括: 连接时标记设备已断连。 8.2 API ID: Future markDisconnectedDevice({String? macAddress, String? uuid}); 8.3 API参数说明: @Param:macAddress 当前断开连接设备的mac地址 @Param:uuid 9.清除所有待执行任务 9.1 功能概括: 清除所有执行的任务。 9.2 API ID: void dispose(); 9.3 API参数说明: 无 10.停止快速配置(SDK内部使用) 10.1 功能概括: 无 10.2 API ID: void stopSyncConfig(); 10.3 API参数说明: 无 11.文件传输工具入口 11.1 功能概括: 提供传输文件的能力。 11.2 API ID: IDOFileTransfer get transFile; 11.3 API参数说明: 跳转到文件传输工具接口说明 => IDO文件传输接口说明 12.查询是否处于已连接状态 12.1 功能概括: SDK内部使用。 12.2 API ID: bool get isConnected; 12.3 API参数说明: @Param:isConnected 已连接标志，false:未连接，true:已连接////TODO 13.查询是否处于连接中状态 13.1 功能概括: 切换设备会受限制，在连接中状态不能切换设备。 13.2 API ID: bool get isConnecting; 13.3 API参数说明: @Param:isConnecting 连接中标志，false:未在连接中状态，true:连接中。 14.查询是否处于绑定中状态 14.1 功能概括: 切换设备会受限制，在绑定中状态不能切换设备。 14.2 API ID: bool get isBinding; 14.3 API参数说明: @Param:isBinding 绑定中标志，false:未在绑定中状态，true:绑定中。 15.查询是否处于执行快速配置中状态 15.1 功能概括: 执行快速配置期间，外部指令将直接返回失败。 15.2 API ID: bool get isFastSynchronizing; 15.3 API参数说明: @Param:isFastSynchronizing 快速配置中标志，false:未在快速配置状态中，true:快速配置中。 16.查询OTA类型 16.1 功能概括: 无 16.2 API ID: IDOOtaType get otaType; 16.3 API参数说明: @Param:otaType Ota状态，包括： enum IDOOtaType { none = 0, /// 无升级 telink = 1, /// 泰凌微设备OTA nordic = 2, /// nordic设备OTA } 17.查询当前连接的设备MAC地址 17.1 功能概括: 无 17.2 API ID: String get macAddress; 17.3 API参数说明: @Param:macAddress 当前设备的MAC地址，字符串，未标记为已连接时，将固定返回\"UNKNOWN\" 18.功能表入口 18.1 功能概括: 提供查询、刷新、清除功能表的能力。 18.2 API ID: IDOFunctionTable get funTable; 18.3 API参数说明: 跳转到功能表接口说明 => IDO功能表接口说明 19.数据同步入口 19.1 功能概括: 提供查询数据同步状态、开启数据同步及结束数据同步的能力。 19.2 API ID: IDOSyncData get syncData; 19.3 API参数说明: 跳转到数据同步接口说明 => IDO数据同步接口说明 20.设备信息入口 20.1 功能概括: 提供....的能力。 20.2 API ID: IDODeviceInfo get deviceInfo; 20.3 API参数说明: 跳转到设备信息接口说明 => IDO设备信息接口说明////TODO 21.绑定设备入口 21.1 功能概括: 提供查询绑定状态、发起绑定和解绑、监听绑定模式的能力。 21.2 API ID: IDODeviceBind get deviceBind; 21.3 API参数说明: 跳转到设备绑定接口说明 => IDO设备绑定接口说明////TODO 22.消息图标入口 22.1 功能概括: 提供设置国家编码、缓存服务器地址、APP Key、语言成员接口，提供查询更新图标状态、APP包名、获取&删除本地沙盒缓存、下发应用图标接口的能力。 22.2 API ID: IDOMessageIcon get messageIcon; 22.3 API参数说明: 跳转到消息图标接口说明 => IDO消息图标接口说明 23.数据交换入口 23.1 功能概括: 提供的能力。 23.2 API ID: IDOExchangeData get exchangeData; 23.3 API参数说明: 跳转到数据交换接口说明 => IDO数据交换接口说明////TODO 24.设备日志入口 24.1 功能概括: 提供查询是否支持获取固件日志接口，查询日志目录地址，开始启动获取日志和取消获取日志的能力。 24.2 API ID: IDODeviceLog get deviceLog; 24.3 API参数说明: 跳转到设备日志接口说明 => IDO设备日志接口说明 25.其他工具接口 25.1 功能概括: 提供查询是否支持获取固件日志接口，查询日志目录地址，开始启动获取日志和取消获取日志的能力。////TODO 25.2 API ID: IDOTool get tools; 25.3 API参数说明: 跳转到工具接口说明 => IDO工具接口说明 26.来电提醒&消息入口 26.1 功能概括: 提供通知设备来电提醒和消息提醒(v2)的能力。 26.2 API ID: IDOCallNotice get callNotice; 26.3 API参数说明: 跳转到来电提醒和消息提醒的接口说明 => IDO来电提醒和消息提醒接口说明 27.协议库缓存入口 27.1 功能概括: 提供查询log、alexa、设备缓存根目录，导出日志，加载设备功能表和连接过的设备列表信息的能力。 27.2 API ID: IDOCache get cache; 27.3 API参数说明: 跳转到协议库缓存的接口说明 => IDO协议库缓存接口说明 28.log初始化 28.1 功能概括: 提供设置log日志打印，写文件权限和日志等级的能力。 28.2 API ID: static Future initLog( {bool writeToFile = true, bool outputToConsole = true, LoggerLevel logLevel = LoggerLevel.verbose}) async { return _IDOProtocolLibManager.initLog( writeToFile: writeToFile, outputToConsole: outputToConsole, logLevel: logLevel); } 28.3 API参数说明: @param:writeToFile bool类型，是否写到日志文件，true:写入，false:不写入。 @param:outputToConsole bool类型，是否打印到控制台，true:打印，false:不打印。 @param:logLevel 日志级别，只有在debug模式有效，包括： /* verbose：最详细的日志等级，通常用于记录所有细节信息，包括调试信息、状态信息、事件信息等。这个等级的日志可能会非常冗长，但可以帮助开发人员了解系统的运行情况和调试问题。 debug：用于记录调试信息，通常包括变量值、函数调用、代码路径等。这个等级的日志通常用于调试应用程序，以解决代码问题。 info：用于记录一般信息，通常包括重要事件、状态变化、用户操作等。这个等级的日志可以帮助管理员了解系统的运行情况和用户行为。 warning：用于记录警告信息，通常表示一些潜在的问题或异常情况。这个等级的日志可以帮助管理员识别可能的问题并采取相应措施。 error：用于记录错误信息，通常表示系统发生了错误，无法继续执行。这个等级的日志可以帮助管理员快速识别问题并采取恢复措施。 wtf：用于记录非常严重的错误信息，通常表示系统发生了无法预料的异常情况，可能会导致严重后果。这个等级的日志通常用于记录系统崩溃、安全漏洞等问题。 nothing：表示不记录任何日志信息，通常用于关闭日志记录功能，或在某些情况下不需要记录日志信息。*/ /// 日志等级 enum LoggerLevel { verbose, debug, info, warning, error, wtf, nothing, } 29.监听协议库状态通知 29.1 功能概括: 提供监听状态通知的能力，监听协议库状态通知。 29.2 API ID: StreamSubscription listenStatusNotification( void Function(IDOStatusNotification status) func); 29.3 API参数说明: @return:回调状态，包括： enum IDOStatusNotification { protocolConnectCompleted = 0, /// 协议库完成蓝牙库桥接，此时缓存数据已经初始化 functionTableUpdateCompleted = 1, /// 功能表获取完成 deviceInfoUpdateCompleted = 2, /// 设备信息获取完成 deviceInfoFwVersionCompleted = 3, /// 三级版本获取完成 unbindOnAuthCodeError = 4, /// 绑定授权码异常，设备强制解绑 unbindOnBindStateError = 5, /// 绑定状态异常，需要解绑 (本地绑定状态和设备信息不一致时触发) fastSyncCompleted = 6, /// 快速配置完成 fastSyncFailed = 7, /// 快速配置失败，需业务层重新触发快速配置 deviceInfoBtAddressUpdateCompleted = 8, /// BT MacAddress获取完成 macAddressError = 9, /// 快速配置获取到的macAddress和markConnectedDevice传入的不一致时上报此错误 syncHealthDataIng = 10,/// 同步健康数据中 syncHealthDataCompleted = 11 /// 同步健康数据完成 } 30.监听设备通知/控制事件 30.1 功能概括: 提供监听手表/手环设备的通知事件、控制事件、快捷短信和固件错误码的能力。 30.2 API ID: StreamSubscription listenDeviceNotification( void Function(IDODeviceNotificationModel model) func); 30.3 API参数说明: 跳转到设备通知/控制事件说明 => IDO设备通知/控制事件说明 31.查询Alexa是否登陆 31.1 功能概括: 无。 31.2 API ID: bool get isLogin; 31.3 API参数说明: @return:是否已登录标志，bool类型，fasle:未登录，true:已登录。 32.查询Alexa当前语言 32.1 功能概括: 无。 32.2 API ID: AlexaLanguageType get currentLanguage; 32.3 API参数说明: @return:返回alexa当前国家及语言，包括： enum AlexaLanguageType { german('de-DE') = 0, /// 德语 australia('en-AU') = 1, /// 英语 澳大利亚 canadaEn('en-CA') = 2, /// 英语 加拿大 unitedKingdom('en-GB') = 3, /// 英语 英国 india('en-IN') = 4, /// 英语 印度 usa('en-US') = 5, /// 英语 美国 spainEs('es-ES') = 6, /// 西班牙语 西班牙 mexico('es-MX') = 7, /// 西班牙语 墨西哥 spainUs('es-US') = 8, /// 西班牙语 美国 frenchCanada('fr-CA') = 9, /// 法语 加拿大 frenchFrench('fr-FR') = 10, /// 法语 法国 hindiIndia('hi-IN') = 11, /// 印地语 印度 italianItaly('it-IT') = 12, /// 意大利语 japan('ja-JP') = 13, /// 日语 portugal('pt-BR') = 14; /// 葡萄牙语 } 33.指定Alexa代理 ////TODO 33.1 功能概括: 提供指定Alexa代理的能力。////TODO 功能作用待补充 33.2 API ID: set delegate(IDOAlexaDelegate delegate) 33.3 API参数说明: ////TODO 34.注册Alexa 34.1 功能概括: 提供注册Alexa，初始化Alexa日志权限的能力。 34.2 API ID: static Future registerAlexa( {required String clientId, bool writeToFile = true, bool outputToConsole = true, LoggerLevel logLevel = LoggerLevel.verbose}) async { await _IDOProtocolAlexa.initLog( writeToFile: writeToFile, outputToConsole: outputToConsole, logLevel: logLevel); await _IDOProtocolAlexa.registerAlexa(clientId: clientId); } 34.3 API参数说明: @param:clientId Alexa后台生成的ID。 @param:writeToFile bool类型，是否写到Alexa日志文件，true:写入，false:不写入。 @param:outputToConsole bool类型，是否打印Alexa log到控制台，true:打印，false:不打印。 @param:logLevel 日志级别，只有在debug模式有效，包括： /* verbose：最详细的日志等级，通常用于记录所有细节信息，包括调试信息、状态信息、事件信息等。这个等级的日志可能会非常冗长，但可以帮助开发人员了解系统的运行情况和调试问题。 debug：用于记录调试信息，通常包括变量值、函数调用、代码路径等。这个等级的日志通常用于调试应用程序，以解决代码问题。 info：用于记录一般信息，通常包括重要事件、状态变化、用户操作等。这个等级的日志可以帮助管理员了解系统的运行情况和用户行为。 warning：用于记录警告信息，通常表示一些潜在的问题或异常情况。这个等级的日志可以帮助管理员识别可能的问题并采取相应措施。 error：用于记录错误信息，通常表示系统发生了错误，无法继续执行。这个等级的日志可以帮助管理员快速识别问题并采取恢复措施。 wtf：用于记录非常严重的错误信息，通常表示系统发生了无法预料的异常情况，可能会导致严重后果。这个等级的日志通常用于记录系统崩溃、安全漏洞等问题。 nothing：表示不记录任何日志信息，通常用于关闭日志记录功能，或在某些情况下不需要记录日志信息。*/ /// 日志等级 enum LoggerLevel { verbose, debug, info, warning, error, wtf, nothing, } 35.Alexa切换语言 35.1 功能概括: 提供通知Alexa服务器切换当前语言的能力。 35.2 API ID: static Future changeLanguage(AlexaLanguageType type) 35.3 API参数说明: @param:type 设置的语言类型，包括: enum AlexaLanguageType { german('de-DE') = 0, /// 德语 australia('en-AU') = 1, /// 英语 澳大利亚 canadaEn('en-CA') = 2, /// 英语 加拿大 unitedKingdom('en-GB') = 3, /// 英语 英国 india('en-IN') = 4, /// 英语 印度 usa('en-US') = 5, /// 英语 美国 spainEs('es-ES') = 6, /// 西班牙语 西班牙 mexico('es-MX') = 7, /// 西班牙语 墨西哥 spainUs('es-US') = 8, /// 西班牙语 美国 frenchCanada('fr-CA') = 9, /// 法语 加拿大 frenchFrench('fr-FR') = 10, /// 法语 法国 hindiIndia('hi-IN') = 11, /// 印地语 印度 italianItaly('it-IT') = 12, /// 意大利语 japan('ja-JP') = 13, /// 日语 portugal('pt-BR') = 14; /// 葡萄牙语 } 36.Alexa CBL授权 36.1 功能概括: 无。 36.2 API ID: Future authorizeRequest( {required String productId, required CallbackPairCode func}); 36.3 API参数说明: @param:productId alexa后台注册的产品ID。 @param:func 回调函数，回调Alexa认证需要打开的url和userCode。 @return:LoginResponse 登录相应结果，包括： enum LoginResponse { successful = 0, /// 成功 failed = 1, /// 失败 timeout = 2, /// 超时 } 37.Alexa停止登录 37.1 功能概括: 提供结束当前执行中的相关登录操作的能力。 37.2 API ID: void stopLogin(); 37.3 API参数说明: 无。 38.Alexa退出登录 38.1 功能概括: 无。 38.2 API ID: void logout(); 38.3 API参数说明: 无。 39.注册监听Alexa登录状态 39.1 功能概括: 提供注册监听Alexa的登录状态的能力。 39.2 API ID: StreamSubscription listenLoginStateChanged( void Function(LoginState state) func); 39.3 API参数说明: @return:回调登录状态，包括： enum LoginState { logging = 0, /// 登录中 logined = 1, /// 已登录 logout = 2, /// 未登录 } 40.注册监听Alexa语音状态 40.1 功能概括: 提供注册监听手环/手表的传输语音状态的能力。 40.2 API ID: StreamSubscription listenVoiceStateChanged( void Function(VoiceState state) func); 40.3 API参数说明: @return:回调语音状态，包括： enum VoiceState { none = 0, /// 无状态 ready = 1, /// 准备 starting = 2, /// 开始 finished = 3, /// 结束 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/IDOProtocolIntroduction.html":{"url":"doc/IDOProtocolIntroduction.html","title":"IDO Basic Event Field Description","keywords":"","body":"{IDO Basic Event Field Description} 1. Function Overview Basic Event Process: The APP sends basic events to the device through the Flutter interface libManager.send(evt, json). The event number and corresponding event items are packaged into byte data by the C library. Then, the byte data is sent to the device by the Bluetooth library. After receiving the response byte data from the device, the Bluetooth library parses the byte data through the Flutter interface receiveDataFromBle(data, macaddress, type). Finally, the APP receives the response content in the form of JSON, realizing the interaction between the APP and the device. In order to assist APP development, this document introduces the event numbers and event item contents of the basic events. 2. Basic Events V2 Set Instruction Events V2 Get Instruction Events V3 Long Packet Instruction Events OTA Instruction Events APP Notification/Control Events Device Notification/Control Events Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/IDOTranFileIntroduction.html":{"url":"doc/IDOTranFileIntroduction.html","title":"IDO File Transfer Interface Description","keywords":"","body":"{IDO File Transfer Interface Specification} 1. Function Overview Provides the ability to transfer single/multiple files, including firmware packages, image gallery packages, font packages, language packages, BT upgrade packages, dials, address books, AGPS, GPS, message icons, sports icons, EPO upgrade packages, notification sound files, blood pressure calibration files. Provides the ability to retrieve file transfer progress, transfer status, and current file transfer type. 2. Interface Abilities 1. Query Transfer Status: 1.1 Function Summary: None 1.2 API ID: bool get isTransmitting; 1.3 API Parameter Description: @Param:isTransmitting Transferred flag, false: idle, true: transferring 2. Query Current Transferring File Type: 2.1 Function Summary: None 2.2 API ID: FileTransType? get transFileType; 2.3 API Parameter Description: @Param:transFileType File type ////TODO 3. Listen to the Currently Uploading File Type: 3.1 Function Summary: Callback for file start transferring, completion, and failure. 3.2 API ID: StreamSubscription listenTransFileTypeChanged(void Function(FileTransType? fileType) func); 3.3 API Parameter Description: @Param:fileType The file type currently being uploaded, null means no file being uploaded. ////TODO 4. Transfer Single File: 4.1 Function Summary: Provides the ability to transfer files, retrieve file transfer status, progress, error codes, and cancel the transfer of a single file. 4.2 API ID: Stream transferSingle( {required BaseFileModel fileItem, required CallbackFileTransStatusSingle funcStatus, required CallbackFileTransProgressSingle funcProgress, CallbackFileTransErrorCode? funError, bool cancelPrevTranTask}); 4.3 API Parameter Description: 4.3.1 @Param:fileItem File configuration information, including: class BaseFileModel{ final FileTransType fileType; /// File type final String filePath; /// File absolute path final String fileName; /// File name int? fileSize; /// File size int? originalFileSize; /// Original file size (before compression), only used for dials temporarily } 4.3.2 @Param:funcStatus Transfer status, including: typedef CallbackFileTransStatusSingle = void Function(FileTransStatus status); enum FileTransStatus { none = 0, invalid = 1, /// Invalid type notExists = 2, /// File does not exist busy = 3, /// Transfer task in progress config = 4, /// Configuration beforeOpt = 5, /// Pre-transfer operation trans = 6, /// Transferring finished = 7, /// Transfer completed onFastSynchronizing = 8, /// Fast configuration in progress, file transfer not supported error = 9, /// Transfer failed } 4.3.3 @Param:funcProgress Transfer progress. 4.3.4 @Param:funError Transfer error codes, including: typedef CallbackFileTransErrorCode = void Function( int index, int errorCode, int errorCodeFromDevice, int finishingTime); @Param:index Current index of the file being transferred. @Param:errorCode Error code returned by the C library. @Param:errorCodeFromDevice Error code returned by the firmware. When errorCode is 24 or 25, errorCodeFromDevice equals errorCode. @Param:finishingTime Estimated time for firmware to finish organizing, only returned when errorCode is 24 or 25, otherwise 0. 4.3.5 @Param:cancelPrevTranTask Cancel existing upload task. Default is false. 5. Transfer Multiple Files: 5.1 Function Summary: Provides the ability to transfer multiple files, retrieve file transfer status, progress, error codes, and cancel the transfer of a single file. 5.2 API ID: Stream> transferMultiple( {required List fileItems, required CallbackFileTransStatusMultiple funcStatus, required CallbackFileTransProgressMultiple funcProgress, CallbackFileTransErrorCode? funError, bool cancelPrevTranTask}); 5.3 API Parameter Description: 5.3.1 @Param:fileItem File configuration information, including: class BaseFileModel{ final FileTransType fileType; /// File type final String filePath; /// File absolute path final String fileName; /// File name int? fileSize; /// File size int? originalFileSize; /// Original file size (before compression), only used for dials temporarily } 5.3.2 @Param:funcStatus Transfer status, including: typedef CallbackFileTransStatusMultiple = void Function(int index, FileTransStatus status); enum FileTransStatus { none = 0, invalid = 1, /// Invalid type notExists = 2, /// File does not exist busy = 3, /// Transfer task in progress config = 4, /// Configuration beforeOpt = 5, /// Pre-transfer operation trans = 6, /// Transferring finished = 7, /// Transfer completed onFastSynchronizing = 8, /// Fast configuration in progress, file transfer not supported error = 9, /// Transfer failed } 5.3.3 @Param:funcProgress Transfer progress, including: typedef CallbackFileTransProgressMultiple = void Function(int currentIndex, int totalCount, double currentProgress, double totalProgress); @Param:currentIndex Current index of the file being transferred (0 ~ totalCount-1). @Param:totalCount Total number of files to be transferred (>= 1). @Param:currentProgress Current progress of the current file being transferred (0.0 ~ 1.0). @Param:totalProgress Overall progress (0.0 ~ 1.0). 5.3.4 @Param:funError Transfer error codes, including: typedef CallbackFileTransErrorCode = void Function( int index, int errorCode, int errorCodeFromDevice, int finishingTime); @Param:index Current index of the file being transferred. @Param:errorCode Error code returned by the C library. @Param:errorCodeFromDevice Error code returned by the firmware. When errorCode is 24 or 25, errorCodeFromDevice equals errorCode. @Param:finishingTime Estimated time for firmware to finish organizing, only returned when errorCode is 24 or 25, otherwise 0. 5.3.5 @Param:cancelPrevTranTask Cancel existing upload task. Default is false. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/IDOFunctionTableIntroduction.html":{"url":"doc/IDOFunctionTableIntroduction.html","title":"IDO Function Table Interface Description","keywords":"","body":"{IDO Function Table Interface Specification} 1. Overview Provides the ability to query the status of the function table, refresh the function table, and clear the function table. 2. Interface Abilities 1. Refresh Function Table: 1.1 Summary: Get the device function table and refresh the local function table. 1.2 API ID: Future refreshFuncTable(); 1.3 API Parameters: @return Function table, null if failed to fetch. 2. Clear Function Table: 2.1 Summary: None. 2.2 API ID: void cleanDataOnMemory() { _ft = null; } 2.3 API Parameters: None 3. Export Function Table: 3.1 Summary: Export the function table information to a text file in the storage root directory , with the name func_table.json 3.2 API ID: Future exportFuncTableFile(); 3.3 API Parameters: @return Absolute path of the func_table.json file, null if export fails. 4. Query Status of a Function Table: 4.1 Summary: Query the status of a specific function table, false for off, true for on. 4.2 API ID: class BaseFunctionTable { ... } 4.3 API Parameters: @return Function table status, bool type, false for off, true for on. Translate Chinese in the text to English, do not change the structure of other parts. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/IDOSyncHealthDataIntroduction.html":{"url":"doc/IDOSyncHealthDataIntroduction.html","title":"IDO Data Synchronization Interface Description","keywords":"","body":"{IDO Data Synchronization Interface Description} 1. Overview Provides the ability to query data synchronization status, start data synchronization, and end data synchronization. 2. Interface Capabilities 1. Query Data Synchronization Status: 1.1 Summary: None. 1.2 API ID: SyncStatus get syncStatus; 1.3 API Parameter Description: @param syncStatus Data synchronization status, including enum SyncStatus { init = 0, /// Initialization syncing = 1, /// Synchronizing finished = 2, /// Synchronization completed canceled = 3, /// Synchronization canceled stopped = 4, /// Synchronization stopped timeout = 5, /// Synchronization timed out error = 6 /// Synchronization error } 2. Start Data Synchronization: 2.1 Summary: None. 2.2 API ID: Stream startSync({ required CallbackSyncProgress funcProgress, required CallbackSyncData funcData, required CallbackSyncCompleted funcCompleted }); 2.3 API Parameter Description: 2.3.1 @param funcProgress Data synchronization progress, percentage 0~100. 2.3.2 @param funcData Synchronized data content callback, including: typedef CallbackSyncData = void Function(SyncDataType type,String jsonStr,int errorCode); @param:type The data type of the callback, including: {1: steps, 2: heart rate, 3: sleep, 4: blood pressure, 5: blood oxygen, 6: stress, 7: noise, 8: skin temperature, 9: respiratory rate, 10: body charge, 11: HRV, 12: multiple exercises, 13: GPS, 14: swimming, 15: V2 steps, 16: V2 sleep, 17: V2 heart rate, 18: V2 blood pressure, 19: V2 GPS, 20: V2 multiple exercises} @param:jsonStr Synchronized data content of the callback. @param:errorCode Error code of the callback, 0 indicates normal parsing of data. Note: The synchronized data content corresponding to the data types can be found in => IDO Health Data Synchronization Content Description//// TODO 2.3.3 @param funcCompleted Callback for completion of data synchronization with error code, 3. End Data Synchronization: 3.1 Summary: None. 3.2 API ID: void stopSync(); 3.3 API Parameter Description: None. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/IDODeviceInfoIntroduction.html":{"url":"doc/IDODeviceInfoIntroduction.html","title":"IDO Device Information Interface Description","keywords":"","body":"{IDO Device Information API Documentation} 1. Overview Provides the ability to query device-related information such as device mode, battery status, battery level, reboot flag, binding status, binding type, and platform. 2. API Capabilities 1. Query Device Mode: 1.1 Summary: None 1.2 API ID: int get deviceMode => _device?.mode ?? 0; 1.3 API Parameter Description: @return: deviceMode - Device mode (0: sport mode, 1: sleep mode) 2. Query Battery Status: 2.1 Summary: None 2.2 API ID: int get battStatus => _device?.battStatus ?? 0; 2.3 API Parameter Description: @return: battStatus - Battery status (0: normal, 1: charging, 2: full, 3: low battery) 3. Query Battery Level: 3.1 Summary: None 3.2 API ID: int get battLevel => _device?.energe ?? 0; 3.3 API Parameter Description: @return: battLevel - Battery level (0 to 100) 4. Query Reboot Flag: 4.1 Summary: None 4.2 API ID: int get rebootFlag => _device?.reboot ?? 0; 4.3 API Parameter Description: @return: rebootFlag - Reboot flag (0: not rebooted, 1: rebooted) 5. Query Binding Status: 5.1 Summary: None 5.2 API ID: int get bindState => _device?.pairFlag ?? 0; 5.3 API Parameter Description: @return: bindState - Binding status (0: not bound, 1: bound) 6. Query Binding Type: 6.1 Summary: None 6.2 API ID: int get bindType => _device?.bindConfirmMethod ?? 0; 6.3 API Parameter Description: @return: bindType - Binding type, including: Binding type 0: Default 1: Click 2: Long press 3: Screen click - horizontal confirmation and cancel, confirmation on the left 4: Screen click - horizontal confirmation and cancel, confirmation on the right 5: Screen click - vertical confirmation and cancel, confirmation on the top 6: Screen click - vertical confirmation and cancel, confirmation on the bottom 7: Click (one button on the right) 7. Query Binding Timeout: 7.1 Summary: None 7.2 API ID: int get bindTimeout => _device?.bindConfirmTimeout ?? 0; 7.3 API Parameter Description: @return: bindTimeout - Binding timeout (maximum 15 seconds, 0 means no timeout) 8. Query Device Platform: 8.1 Summary: None 8.2 API ID: int get platform => _device?.platform ?? 0; 8.3 API Parameter Description: @return: platform - Device platform, including: 0: Nordic 10: Realtek 8762x 20: Cypress PSoC6 30: Apollo3 40: Goodix 50: Nordic + Dialog 60: Dialog + 5340 + no NAND flash 70: Goodix + Foryoukang 80: 5340 90: Juxin 99: Siche ////TODO 平台英文是否规范 9. Query Device Shape: 9.1 Summary: None 9.2 API ID: int get deviceShapeType => _device?.shape ?? 0; 9.3 API Parameter Description: @return: deviceShapeType - Device shape type (0: invalid, 1: circular, 2: square, 3: elliptical) 10. Query Device Type: 10.1 Summary: None 10.2 API ID: int get deviceType => _device?.devType ?? 0; 10.3 API Parameter Description: @return: deviceType - Device type (0: invalid, 1: wristband, 2: watch) 11. Query Device Custom Dial Main Version: 11.1 Summary: None 11.2 API ID: int get dialMainVersion => _device?.userDefinedDialMainVersion ?? 0; 11.3 API Parameter Description: @return: dialMainVersion - Custom dial main version (starts from 1, 0 means the corresponding custom dial function is not supported) 12. Query Whether to Display '✓' UI During Device Binding: 12.1 Summary: None 12.2 API ID: int get showBindChoiceUi => _device?.showBindChoiceUi ?? 0; 12.3 API Parameter Description: @return: showBindChoiceUi - Whether to display the checkmark UI during firmware binding (0: not required, 1: required) 13. Query Device ID: 13.1 Summary: None 13.2 API ID: int get deviceId => _device?.deivceId ?? 0; 13.3 API Parameter Description: @return: deviceId - Device ID 14. Query Device Firmware Version (Major Version): 14.1 Summary: None 14.2 API ID: int get firmwareVersion => _device?.firmwareVersion ?? 0; 14.3 API Parameter Description: @return: firmwareVersion - Device firmware major version 15. Query Device SN (Serial Number): 15.1 Summary: None 15.2 API ID: String? get sn => _device?.snString(); 15.3 API Parameter Description: @return: sn - Device firmware SN (serial number) 16. Query Device BT Name: 16.1 Summary: None 16.2 API ID: String? get btName => _device?.btNameString(); 16.3 API Parameter Description: @return: btName - Device BT name 17. Query Device Firmware Version (Third Level): 17.1 Summary: None 17.2 API ID: int get fwVersion1 => _fw?.firmwareVersion1 ?? 0; int get fwVersion2 => _fw?.firmwareVersion2 ?? 0; int get fwVersion3 => _fw?.firmwareVersion3 ?? 0; 17.3 API Parameter Description: @return: fwVersion1, fwVersion2, fwVersion3 - Third-level version number of the device firmware (in the format of fwVersion1.fwVersion2.fwVersion3) 18. Query Whether the Device BT Version has an Effect: 18.1 Summary: None 18.2 API ID: int get fwBtFlag => _fw?.btFlag ?? 0; 18.3 API Parameter Description: @return: fwBtFlag - BT version effectiveness flag (0: ineffective, 1: indicates that the firmware has a corresponding BT firmware) 19. Query Device BT Firmware Version (Third Level): 19.1 Summary: None 19.2 API ID: int get fwBtVersion1 => _fw?.btVersion1 ?? 0; int get fwBtVersion2 => _fw?.btVersion2 ?? 0; int get fwBtVersion3 => _fw?.btVersion3 ?? 0; 19.3 API Parameter Description: @return: fwBtVersion1, fwBtVersion2, fwBtVersion3 - Third-level version number of the device BT firmware (in the format of fwBtVersion1.fwBtVersion2.fwBtVersion3) 20. Query Matched Version Number for Device BT: 20.1 Summary: None 20.2 API ID: int get fwBtMatchVersion1 => _fw?.btMatchVersion1 ?? 0; int get fwBtMatchVersion2 => _fw?.btMatchVersion2 ?? 0; int get fwBtMatchVersion3 => _fw?.btMatchVersion3 ?? 0; 20.3 API Parameter Description: @return: fwBtMatchVersion1, fwBtMatchVersion2, fwBtMatchVersion3 - Matched version number for device BT (in the format of fwBtMatchVersion1.fwBtMatchVersion2.fwBtMatchVersion3) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 16:53:59 "},"doc/IDODeviceBindIntroduction.html":{"url":"doc/IDODeviceBindIntroduction.html","title":"IDO Device Binding Interface Description","keywords":"","body":"{IDO Device Binding Interface Description} 1. Function Overview Provides the ability to check binding status, initiate binding and unbinding, and listen for binding mode. 2. Interface Capability 1. Check Binding Status: 1.1 Function Summary: None 1.2 API ID: Future get isBinded; 1.3 API Parameter Description: @return: isBinded - Binding status flag, bool type, false: not bound, true: bound. 2. Check if Currently in Binding Mode: 2.1 Function Summary: In binding mode, switching devices will be restricted. 2.2 API ID: bool get isBinding; 2.3 API Parameter Description: @return: isBinding - Flag indicating whether in binding mode, bool type, false: not in binding mode, true: in binding mode. 3. Initiate Binding: 3.1 Function Summary: Initiates the binding process. After successful binding, the device information and function table information of the device are returned via a callback. ////TODO 3.2 API ID: /// Initiate binding /// osVersion: System version (take the major version number) Stream startBind( {required int osVersion, required BindValueCallback deviceInfo, required BindValueCallback functionTable}); 3.3 API Parameter Description: @param: osVersion - System version, take the major version number. @param: deviceInfo - Callback for device information after binding is initiated. @param: functionTable - Callback for function table information of the device after binding is initiated. ////TODO 4. Initiate Unbinding: 4.1 Function Summary: Initiates the unbinding process for the specified MAC address. The device can be forcefully unbound. 4.2 API ID: Future unbind({required String macAddress, bool isForceRemove = false}); 4.3 API Parameter Description: @param: macAddress - MAC address. @param: isForceRemove - Whether to forcefully unbind the device, even if the device does not respond. Set to true to forcefully unbind and remove the device. Default is false. 5. Initiate Authorization Code Binding: 5.1 Function Summary: None 5.2 API ID: Stream setAuthCode(String code, int osVersion); 5.3 API Parameter Description: @param: code - Pairing code. @param: osVersion - System version (take the major version number). 6. Register Update Mode Monitoring Callback: 6.1 Function Summary: Registers a callback method for monitoring the current update mode. ////TODO 6.2 API ID: StreamSubscription listenUpdateSetModeNotification( void Function(int mode) func); 6.3 API Parameter Description: @param: func - Callback method. The mode includes: 0 None Binding, 1 Already Binding, 2 Firmware Upgrade Mode, 3 Reconnection, 4 Realtek Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/IDOMessageIconIntroduction.html":{"url":"doc/IDOMessageIconIntroduction.html","title":"IDO Message Icon Interface Description","keywords":"","body":"IDO Icon API Documentation 1. Function Overview Provides the ability to set the country code, cache server address, app key, language unit, query icon update status, app package names, and retrieve/delete local sandbox cache, and deliver app icons. 2. API Capabilities 1. Country Code (IOS) 1.1 Function Overview: Provides the country code member, only used for IOS. 1.2 API ID: String? ios_countryCode; 1.3 API Parameter Description: @param: ios_countryCode - Country code, e.g., 'US' for the United States, 'CN' for China. 2. Cache Server Address (IOS) 2.1 Function Overview: Provides the cache server address member, only used for IOS. 2.2 API ID: String? ios_baseUrlPath; 2.3 API Parameter Description: @param: ios_baseUrlPath - Cache server address, e.g., 'https://cn-user.idoocloud.com/api/ios/lookup/get'. If not assigned, the Apple interface will be used (slower response). 3. App Key (IOS) 3.1 Function Overview: Provides the app key member, only valid when using the cache server, only used for IOS. 3.2 API ID: String? ios_appKey; 3.3 API Parameter Description: @param: ios_appKey - The app key assigned by the backend. Each app has its own unique app key. Please consult the backend developer for details, e.g., '800a6444f9c0433c8e88741b6ddf1443'. 4. Language Unit (IOS) 4.1 Function Overview: Provides the language unit member, only used for IOS. 4.2 API ID: int? ios_languageUnit; 4.3 API Parameter Description: @param: ios_languageUnit - The language unit. If not specified, the default language unit is English. Jump to language unit content description => IDO Language Unit Content Description 5. Query Icon Update Status (IOS) 5.1 Function Overview: Provides the ability to query the current update status. 5.2 API ID: bool get ios_updating; 5.3 API Parameter Description: @return: ios_updating - Update flag, boolean type. false: idle, true: updating icons and names. 6. Query Default Notification App Package Names (IOS) 6.1 Function Overview: Provides the ability to query the package names of default notification apps supported by the device, only used for IOS. 6.2 API ID: List? ios_defaultPackNames(); 6.3 API Parameter Description: @return: List of strings, the package name collection. 7. Query Cached App Information (IOS) 7.1 Function Overview: Provides the ability to query the cached version number, icon information (size, color format, quantity, compression block size), and package name details, only used for IOS. 7.2 API ID: Future ios_getInfoModel(); 7.3 API Parameter Description: @return: Cached app information, including: class IDOAppIconInfoModel { int? version; /// Version number int? iconWidth; /// Icon width int? iconHeight; /// Icon height int? colorFormat; /// Color format int? blockSize; /// Compression block size int? totalNum; /// Total number List? items; /// Package name details collection }; class IDOAppIconItemModel extends IDOAppInfo { int? itemId; /// Unique item ID assigned to each package name, starting from 0 int? msgCount; /// Number of received messages String? iconCloudPath; /// Icon cloud address int? state; /// Icon update status: 0 - no update needed, 1 - icon update needed, 2 - app name update needed, 3 - both icon and app name update needed String? iconLocalPathBig;/// Icon local address of the large size icon in the sandbox (displayed in the app list) String? countryCode; /// Country code bool? isDownloadAppInfo; /// Whether the app information has been downloaded bool? isUpdateAppName; /// Whether the app name has been updated bool? isUpdateAppIcon; /// Whether the app icon has been updated bool? isDefault; /// Whether it is a default app } 8. Query Icon Image Directory Path (IOS) 8.1 Function Overview: Provides the ability to query the directory path where the icon images are stored, only used for IOS. 8.2 API ID: Future ios_getIconDirPath(); 8.3 API Parameter Description: @return: Icon image directory path, string type. 9. Reset App Icon Information (IOS) 9.1 Function Overview: Provides the ability to delete locally cached images in the sandbox, only used for IOS. 9.2 API ID: Future ios_resetIconInfoData(); 9.3 API Parameter Description: @return: Deletion result, false: failed, true: successful. 10. Proactively Retrieve App Information to Cache (IOS) 10.1 Function Overview: Proactively retrieves app information to cache, and retrieves app information through cache query, only used for IOS. 10.2 API ID: Stream ios_getDefaultAppInfo(); 10.3 API Parameter Description: @return: Retrieval result, false: failed, true: successful. 11. Register Listener for Update Messages Icon (IOS) 11.1 Function Overview: Provides the ability to register a listener for update messages icon, only used for IOS. Register once globally. 11.2 API ID: void ios_registerListenUpdate(); 11.3 API Parameter Description: No parameters. 12. Deliver App Icon (Android) 12.1 Function Overview: Provides the ability to deliver app icons, only used for Android. 12.2 API ID: Stream android_transferAppIcon(List items); 12.3 API Parameter Description: @return: Delivery result, false: failed, true: successful. @param: App icon content, including: class AppInfo { AppInfo({ this.evtType, this.packName, this.appName, this.iconLocalPath, }); /// Event type int? evtType; /// Application package name String? packName; /// Application name String? appName; /// Sandbox path of the small app icon (used by the device) String? iconLocalPath; Object encode() { return [ evtType, packName, appName, iconLocalPath, ]; } static AppInfo decode(Object result) { result as List; return AppInfo( evtType: result[0] as int?, packName: result[1] as String?, appName: result[2] as String?, iconLocalPath: result[3] as String?, ); } } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/IDOExchangeDataIconIntroduction.html":{"url":"doc/IDOExchangeDataIconIntroduction.html","title":"IDO Data Exchange Interface Description","keywords":"","body":"{IDO Data Exchange Interface Specification} 1. Overview Provides the ability to set country code, cache server address, APP Key, and language member interface. Provides the ability to query and update icon status, app package name, get & delete local sandbox cache, and send application icon interface. 2. Interface Abilities 1. Query support for V3 Activity Exchange: 1.1 Summary: None. 1.2 API ID: bool get supportV3ActivityExchange; 1.3 API Parameters: @return: bool Support function table, false: not supported, true: supported. 2. Query Data Exchange Status: 2.1 Summary: None. 2.2 API ID: ExchangeStatus? get status; 2.3 API Parameters: @param: ExchangeStatus Data exchange status, including: enum ExchangeStatus { init = 0, /// Initialization appStart = 1, /// App initiates start appStartReply = 2, /// App initiates start BLE reply appEnd = 3, /// App initiates end appEndReply = 4, /// App initiates end BLE reply appPause = 5, /// App initiates pause appPauseReply = 6, /// App initiates pause BLE reply appRestore = 7, /// App initiates restore appRestoreReply = 8, /// App initiates restore BLE reply appIng = 9, /// App initiates exchange appIngReply = 10, /// App initiates exchange BLE reply getActivity = 11, /// Get last activity data getActivityReply = 12, /// Get last activity data BLE reply getHr = 13, /// Get one minute heart rate getHrReply = 14, /// Get one minute heart rate BLE reply appStartPlan = 15, /// App starts activity plan appStartPlanReply = 16, /// App starts activity plan BLE reply appPausePlan = 17, /// App pauses activity plan appPausePlanReply = 18, /// App pauses activity plan BLE reply appRestorePlan = 19, /// App restores activity plan appRestorePlanReply = 20, /// App restores activity plan BLE reply appEndPlan = 21, /// App ends activity plan appEndPlanReply = 22, /// App ends activity plan BLE reply appSwitchAction = 23, /// App switches action appSwitchActionReply= 24, /// App switches action BLE reply appBlePause = 25, /// App-initiated activity, BLE initiates pause appBlePauseReply = 26, /// App-initiated activity, BLE initiates pause, app replies appBleRestore = 27, /// App-initiated activity, BLE initiates restore appBleRestoreReply = 28, /// App-initiated activity, BLE initiates restore, app replies appBleEnd = 29, /// App-initiated activity, BLE initiates end appBleEndReply = 30, /// App-initiated activity, BLE initiates end, app replies bleStart = 31, /// BLE-initiated activity, BLE initiates start bleStartReply = 32, /// BLE-initiated activity, BLE initiates start, app replies bleEnd = 33, /// BLE-initiated activity, BLE initiates end bleEndReply = 34, /// BLE-initiated activity, BLE initiates end, app replies blePause = 35, /// BLE-initiated activity, BLE initiates pause blePauseReply = 36, /// BLE-initiated activity, BLE initiates pause, app replies bleRestore = 37, /// BLE-initiated activity, BLE initiates restore bleRestoreReply = 38, /// BLE-initiated activity, BLE initiates restore, app replies bleIng = 39, /// BLE-initiated activity, BLE initiates exchange bleIngReply = 40, /// BLE-initiated activity, BLE initiates exchange, app replies bleStartPlan = 41, /// BLE starts activity plan blePausePlan = 42, /// BLE pauses activity plan bleRestorePlan = 43, /// BLE restores activity plan bleEndPlan = 44, /// BLE ends activity plan bleSwitchAction = 45, /// BLE switches action bleOperatePlanReply = 46, /// BLE operates activity plan, app replies } 3. Query support for V3 Activity Exchange: 3.1 Summary: None. 3.2 API ID: bool get supportV3ActivityExchange; 3.3 API Parameters: @return: bool Support function table, false: not supported, true: supported. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/IDODeviceLogIconIntroduction.html":{"url":"doc/IDODeviceLogIconIntroduction.html","title":"IDO Device Log Interface Description","keywords":"","body":"{IDO Device Log Interface Description} 1. Function Overview Provides the ability to query whether obtaining firmware logs is supported, query log directory addresses, start and cancel log retrieval. 2. Interface Abilities 1. Query if Obtaining Firmware Logs is Supported: 1.1 Function Summary: None. 1.2 API ID: bool get getLogIng; 1.3 API Parameter Explanation: @return: bool Supported feature flag, false: Not supported, true: Supported. ////TODO? 2. Query All Log Directory Addresses: 2.1 Function Summary: None. 2.2 API ID: Future get logDirPath; 2.3 API Parameter Explanation: @return: String Directory addresses of all logs. Each log directory contains files named with timestamps. The names of all log directories are: Flash Log Directory -> Flash Battery Log Directory -> Battery Heat Log Directory -> Heat Old Reboot Log Directory -> Reboot 3. Start Log Retrieval: 3.1 Function Summary: None. 3.2 API ID: Stream startGet(List types); 3.3 API Parameter Explanation: @return: bool Supported feature flag, false: Not supported, true: Supported. @param: types List of logs to retrieve. Log types include: enum IDOLogType { init = 0, reboot = 1, // Old reboot logs general = 2, // General logs reset = 3, // Reset logs hardware = 4, // Hardware logs algorithm = 5, // Algorithm logs restart = 6, // New reboot logs battery = 7, // Battery logs heat = 8 // Heat logs } 4. Cancel Log Retrieval: 4.1 Function Summary: None. 4.2 API ID: void cancel(); 4.3 API Parameter Explanation: None. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/IDOCLibToolFunctionIconIntroduction.html":{"url":"doc/IDOCLibToolFunctionIconIntroduction.html","title":"IDO Tools Interface Description","keywords":"","body":"7. Smooth GPS Data Set: 7.1 Function Overview: This API takes in multiple sets of GPS coordinates and provides the ability to smooth the GPS data set. 7.2 API ID: String gpsSmoothData({required String json}) 7.3 API Parameter Description: @param: json GPS coordinate data in JSON format. The JSON should contain the following keys: lat: an array of latitude values with length 'len' and data type 'double' lon: an array of longitude values with length 'len' and data type 'double' len: the number of latitude and longitude pairs in the arrays @return: Returns a JSON formatted string with the smoothed GPS coordinate data. The JSON contains the following keys: lat: an array of latitude values with length 'len' and data type 'double' lon: an array of longitude values with length 'len' and data type 'double' len: the number of latitude and longitude pairs in the arrays 8. Get Log Root Path: 8.1 Function Overview: No functionality description provided. 8.2 API ID: Future logPath() async { final pathSDK = await LocalStorage.pathSDKStatic(); return Future.value('$pathSDK/logs'); } 8.3 API Parameter Description: @return: Returns the root path of the log directory as a string. 9. Get Alexa Root Path: 9.1 Function Overview: No functionality description provided. 9.2 API ID: Future alexaPath() async { final pathSDK = await LocalStorage.pathSDKStatic(); return Future.value('$pathSDK/alexa'); } 9.3 API Parameter Description: @return: Returns the root path of the Alexa directory as a string. 10. Get Alexa Test Path: 10.1 Function Overview: No functionality description provided. 10.2 API ID: Future alexaTestPath() async { final dirDocument = await getApplicationDocumentsDirectory(); return Future.value('${dirDocument.path}/alexa_test_pkg'); } 10.3 API Parameter Description: @return: Returns the path of the Alexa test directory as a string. 11. Get Current Device Cache Path: 11.1 Function Overview: No functionality description provided. 11.2 API ID: Future currentDevicePath() async { return storage?.pathRoot(); } 11.3 API Parameter Description: @return: Returns the root path of the current device's cache directory as a string. 12. Export Logs: 12.1 Function Overview: No functionality description provided. 12.2 API ID: Future exportLog() async { final pathSDK = await LocalStorage.pathSDKStatic(); return await compute(_doZip, pathSDK); } 12.3 API Parameter Description: @return: Returns the absolute path of the compressed log zip file as a string. 13. Load Specific Device Function Table: 13.1 Function Overview: No functionality description provided. 13.2 API ID: Future loadFuncTable( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); return storage?.loadFunctionTableWith(macAddress: macAddr); } 13.3 API Parameter Description: @param: macAddress - The MAC address of the device as a string. @return: Returns a JSON formatted string if successful, or null if unsuccessful. 14. Load Specific Device Function Table: ////TODO 14.1 Function Overview: No functionality description provided. 14.2 API ID: Future loadFuncTable( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); return storage?.loadFunctionTableWith(macAddress: macAddr); } 14.3 API Parameter Description: @param: macAddress - The MAC address of the device as a string. @return: Returns a JSON formatted string if successful, or null if unsuccessful. ////TODO 15. Load Specific Device Function Table: ////TODO 15.1 Function Overview: No functionality description provided. 15.2 API ID: Future loadFuncTableByDisk( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final ft = await storage?.loadFunctionTableWith(macAddress: macAddr); logger?.d('loadFuncTableByDisk rs:$ft'); if (ft == null) return null; return BaseFunctionTable()..initFunTableModel(ft); } 15.3 API Parameter Description: @param: macAddress - The MAC address of the device as a string. @return: . Translate the Chinese characters in the text to English, do not modify the other structures. 16. Load specified device binding status: ////TODO 16.1 Function Overview: None. 16.2 API ID: Future loadBindStatus({required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final rs = await storage?.loadBindStatus(macAddress: macAddr); return Future(() => rs ?? false); } 16.3 API Parameter Description: @param: macAddress - Device MAC address, string. @return: Binding status corresponding to the input MAC address, bool type, true: bound, false: unbound. 17. Query information of the last connected device: ////TODO 17.1 Function Overview: Provides the ability to query information of the last connected device, including OTA mode, device name, UUID (IOS), BT/MAC address, and last update time. 17.2 API ID: Future lastConnectDevice() async { final list = await storage?.loadDeviceExtListByDisk(); return Future(() => list?.first); } 17.3 API Parameter Description: @return: Information of the last connected device, including: ////TODO final String macAddress; // MAC address String? macAddressFull; // ? bool otaMode = false; // OTA mode? String uuid; // UUID (IOS) String deviceName; // Device name int updateTime; // Last update time in milliseconds String? macAddressBt; // BT address String formatTime(int millisecondsSince) { return DateTime.fromMicrosecondsSinceEpoch(millisecondsSince).toString(); } 18. Query the list of connected devices: ////TODO 18.1 Function Overview: Provides the ability to query the list of connected devices, including OTA mode, device name, UUID (IOS), BT/MAC address, and last update time. 18.2 API ID: Future?> loadDeviceExtListByDisk( {bool sortDesc = true}) async { return storage?.loadDeviceExtListByDisk(sortDesc: sortDesc); } 18.3 API Parameter Description: @return: Device information list of the connected devices. Each device information in the list includes: ////TODO final String macAddress; // MAC address String? macAddressFull; // ? bool otaMode = false; // OTA mode? String uuid; // UUID (IOS) String deviceName; // Device name int updateTime; // Last update time in milliseconds String? macAddressBt; // BT address String formatTime(int millisecondsSince) { return DateTime.fromMicrosecondsSinceEpoch(millisecondsSince).toString(); } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/IDOV2NoticeIntroduction.html":{"url":"doc/IDOV2NoticeIntroduction.html","title":"IDO Call Notice and Message Notice Interface Description","keywords":"","body":"{IDO Call Reminder and Message Reminder Interface Specifications} 1. Function Overview Provides the capability to notify devices of incoming calls and message reminders (v2). 2. Interface Capabilities 1. V2 Call Reminder: 1.1 Function Summary: Provides the ability to send incoming call reminders to the firmware, including contact name and phone number. Implemented on some devices. 1.2 API ID: int setV2CallEvt({ required String contactText, required String phoneNumber, }) 1.3 API Parameter Description: @param: contactText: Contact name, string, maximum of 128 bytes. @param: phoneNumber: Phone number, string, maximum of 128 bytes. @return: 0 for success. 2. V2 Message Reminder: 2.1 Function Summary: Provides the ability to send message reminders to the firmware, including message content, contact name, and phone number. Implemented on some devices. 2.2 API ID: int setV2NoticeEvt({ required int type, required String contactText, required String phoneNumber, required String dataText, }) 2.3 API Parameter Description: @param: type: Message type, navigate to IDO message application types////TODO @param: contactText: Contact name, string, maximum of 128 bytes. @param: phoneNumber: Phone number, string, maximum of 128 bytes. @param: dataText: Message content, string, maximum of 512 bytes. @return: 0 for success. 3. V2 Call Answered: 3.1 Function Summary: Provides the ability to send a call reminder status as \"call answered\" to the firmware, notifying the device to stop reminding the user. Implemented on some devices. 3.2 API ID: int stopV2CallEvt() 3.3 API Parameter Description: @return: 0 for success. 4. V2 Call Rejected: 4.1 Function Summary: Provides the ability to send a call reminder status as \"call rejected\" to the firmware, notifying the device to stop reminding the user. Implemented on some devices. 4.2 API ID: int missedV2MissedCallEvt() 4.3 API Parameter Description: @return: 0 for success. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/IDOCacheIconIntroduction.html":{"url":"doc/IDOCacheIconIntroduction.html","title":"IDO Protocol Library Cache Interface Description","keywords":"","body":"IDO Protocol Library Cache Interface Description 1. Functionality Overview Provides the capability to query logs, Alexa, device cache root directory, export logs, load device function tables, and retrieve information about connected devices. 2. Interface Capabilities 1. Get Log Root Path: 1.1 Functionality: None. 1.2 API ID: Future logPath() async { final pathSDK = await LocalStorage.pathSDKStatic(); return Future.value('$pathSDK/logs'); } 1.3 API Parameter Description: @return: Log root path as a string. 2. Get Alexa Root Path: 2.1 Functionality: None. 2.2 API ID: Future alexaPath() async { final pathSDK = await LocalStorage.pathSDKStatic(); return Future.value('$pathSDK/alexa'); } 2.3 API Parameter Description: @return: Alexa root path as a string. 3. Get Alexa Test Path: 3.1 Functionality: None. 3.2 API ID: Future alexaTestPath() async { final dirDocument = await getApplicationDocumentsDirectory(); return Future.value('${dirDocument.path}/alexa_test_pkg'); } 3.3 API Parameter Description: @return: Alexa test path as a string. 4. Get Current Device Cache Root Path: 4.1 Functionality: None. 4.2 API ID: Future currentDevicePath() async { return storage?.pathRoot(); } 4.3 API Parameter Description: @return: Current device cache root path as a string. 5. Export Logs: 5.1 Functionality: None. 5.2 API ID: Future exportLog() async { final pathSDK = await LocalStorage.pathSDKStatic(); return await compute(_doZip, pathSDK); } 5.3 API Parameter Description: @return: Absolute path to the compressed log zip file, as a string. 6. Load specified device function table: 6.1 Functionality: None. 6.2 API ID: Future loadFuncTable( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); return storage?.loadFunctionTableWith(macAddress: macAddr); } 6.3 API Parameter Description: @param: macAddress (String) - MAC address of the device. @return: Returns a JSON-formatted string if successful, otherwise returns null. 7. Load specified device function table: ////TODO 7.1 Functionality: None. 7.2 API ID: Future loadFuncTable( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); return storage?.loadFunctionTableWith(macAddress: macAddr); } 7.3 API Parameter Description: @param: macAddress (String) - MAC address of the device. @return: Returns a JSON-formatted string if successful, otherwise returns null. ////TODO 8. Load specified device function table: ////TODO 8.1 Functionality: None. 8.2 API ID: Future loadFuncTableByDisk( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final ft = await storage?.loadFunctionTableWith(macAddress: macAddr); logger?.d('loadFuncTableByDisk rs:$ft'); if (ft == null) return null; return BaseFunctionTable()..initFunTableModel(ft); } 8.3 API Parameter Description: @param: macAddress (String) - MAC address of the device. @return: . 9. Load specified device function table: ////TODO 9.1 Functionality: None. 9.2 API ID: Future loadFuncTableJsonByDisk( {required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final ft = await storage?.loadFunctionTableWith(macAddress: macAddr); logger?.d('loadFuncTableByDisk rs:$ft'); if (ft == null) return null; return jsonEncode(ft.toJson()); } 9.3 API Parameter Description: @param: macAddress (String) - MAC address of the device. @return: . 10. Load specified device binding status: ////TODO 10.1 Functionality: None. 10.2 API ID: Future loadBindStatus({required String macAddress}) async { final macAddr = macAddress.replaceAll(':', '').toUpperCase(); final rs = await storage?.loadBindStatus(macAddress: macAddr); return Future(() => rs ?? false); } 10.3 API Parameter Description: @param: macAddress (String) - MAC address of the device. @return: The binding status of the specified MAC address. It returns a boolean value, true - bound, false - not bound. 11. Query information of the last connected device: ////TODO 11.1 Functionality: Provides the capability to query information about the last connected device, including OTA mode, device name, UUID (iOS), BT/MAC address, and last update time. 11.2 API ID: Future lastConnectDevice() async { final list = await storage?.loadDeviceExtListByDisk(); return Future(() => list?.first); } 11.3 API Parameter Description: @return: Information of the last connected device, including: ////TODO final String macAddress; // MAC address String? macAddressFull; // ? bool otaMode = false; // OTA mode? String uuid; // UUID (iOS) String deviceName; // Device name int updateTime; // Last update time in milliseconds String? macAddressBt; // BT address String formatTime(int millisecondsSince) { return DateTime.fromMicrosecondsSinceEpoch(millisecondsSince).toString(); } 12. Get list of connected devices: ////TODO 12.1 Functionality: Provides the capability to retrieve a list of connected devices, including OTA mode, device name, UUID (iOS), BT/MAC address, and last update time. 12.2 API ID: Future?> loadDeviceExtListByDisk( {bool sortDesc = true}) async { return storage?.loadDeviceExtListByDisk(sortDesc: sortDesc); } 12.3 API Parameter Description: @return: List of connected devices. Each device information in the list includes: ////TODO final String macAddress; // MAC address String? macAddressFull; // ? bool otaMode = false; // OTA mode? String uuid; // UUID (iOS) String deviceName; // Device name int updateTime; // Last update time in milliseconds String? macAddressBt; // BT address String formatTime(int millisecondsSince) { return DateTime.fromMicrosecondsSinceEpoch(millisecondsSince).toString(); } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/IDOSetEvtIntroduction.html":{"url":"doc/IDOSetEvtIntroduction.html","title":"V2 Setting Instruction Event","keywords":"","body":"{V2 Setting Instruction Event} Function Set sedentary reminder Set display mode Set do not disturb mode Set find phone Set motion goal (set daily steps) Set left or right hand Set time Set user information Set one key SOS Set music switch Set anti-lost Add alarm Set sports mode Set watch dial Set shortcut Set blood pressure calibration Set stress calibration Set heart rate interval Set heart rate mode Set unit Set sleep period Set lift wrist to view Set blood pressure measurement Set screen brightness Set GPS information Set control GPS Set control connection parameters Set hot start parameters Set menstruation Set menstruation reminder Set calorie and distance goals Set blood oxygen switch Set pressure switch Set sports mode sorting Set walk reminder Set breath training Set activity switch Set drink water reminder Simple file operations Set menu list Set control camera Set notification center switch Set delete file Set phone volume sent to firmware Set hand washing reminder Set taking medicine reminder Set smart heart rate mode Set environment volume switch and threshold Set scientific sleep switch Set night temperature switch Set fitness guidance switch Set unread app reminder switch Set notification app status Set respiration rate switch Set body battery switch Set weather switch Set weather data Set weather city name Set sunrise sunset time Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetLongSitReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetLongSitReminder.html","title":"设置久坐提醒","keywords":"","body":"设置久坐提醒 功能表: setSedentariness Flutter示例： /// 设置久坐事件号 setLongSit( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_long_sit), /// 设置久坐 libManager.send(evt: CmdEvtType.setLongSit, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 interval int 间隔 取值应大于15分钟 单位分钟 repetitions int 重复及开关 bit0 ：0表示关 1表示开 bit1-7 : 0表示不重复，1表示重复 示例： { \"start_hour\":15, \"start_minute\":40, \"end_hour\":23, \"end_minute\":26, \"interval\":15, \"repetitions\":254 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetDisplayMode.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetDisplayMode.html","title":"设置显示模式","keywords":"","body":"设置显示模式 功能表: displayMode(SDK待补充) Flutter示例： /// 设置显示模式事件号 setDisplayMode( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_display_mode), /// 设置显示模式 libManager.send(evt: CmdEvtType.setDisplayMode, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 模式0：默认，1：横屏， 2:竖屏， 3：（翻转180度） 示例： { \"mode\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetDoNotDisturb.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetDoNotDisturb.html","title":"设置勿扰模式","keywords":"","body":"设置勿扰模式 功能表: setDoNotDisturb 【disturbHaveRangRepeat(SDk待补充)，setOnlyNoDisturbAllDayOnOff，setOnlyNoDisturbSmartOnOff】 Flutter示例： /// 设置勿扰模式事件号 setNotDisturb( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_do_not_disturb), /// 设置勿扰模式 libManager.send(evt: CmdEvtType.setNotDisturb, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 switch_flag int 模式0：默认，1：横屏， 2:竖屏， 3：（翻转180度） start_hour int 开始时间时 start_minute int 开始时间分 end_hour int 结束时间时 end_minute int 结束时间分 have_time_range int 是否有时间范围 0 无效,1 表示无时间范围,2 表示有时间范围 week_repeat int 星期重复和久坐,闹钟一样bit0无效,(bit1 - bit7) 对于星期1到星期天 noontime_rest_on_off int 白天勿扰开关 170 开启,85 关闭 noontime_rest_start_hour int 开始时间时 noontime_rest_start_minute int 开始时间分 noontime_rest_end_hour int 结束时间时 noontime_rest_end_minute int 结束时间分 all_day_on_off int 全天勿扰 170 开启,85 关闭 intelligent_on_off int 智能勿扰开关 170 开启,85 关闭 示例： { \"switch_flag\":0, \"start_hour\":15, \"start_minute\":23, \"end_hour\":23, \"end_minute\":30, \"have_time_range\":2, \"week_repeat\":127, \"noontime_rest_on_off\":170, \"noontime_rest_start_hour\":9, \"noontime_rest_start_minute\":0, \"noontime_rest_end_hour\":12, \"noontime_rest_end_minute\":0, \"all_day_on_off\":85, \"intelligent_on_off\":85 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetFindPhone.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetFindPhone.html","title":"设置寻找手机","keywords":"","body":"设置寻找手机 功能表: getFindPhone Flutter示例： /// 设置寻找手机 setFindPhone( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_find_phone), /// 设置勿扰模式 libManager.send(evt: CmdEvtType.setNotDisturb, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 on_off int 170：打开， 85:关闭 示例： { \"on_off\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetSportGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetSportGoal.html","title":"设置运动目标(设置全天步数目标)","keywords":"","body":"设置运动目标 功能表: 【supportWalkGoalSteps(SDK待补充)，v2SupportSetStepDataType(SDK待补充)】 Flutter示例： /// 设置运动目标事件号 setSportGoal( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sport_goal), /// 设置运动目标 libManager.send(evt: CmdEvtType.setSportGoal, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 sport_step int 步数 walk_goal_steps int 每小时步数目标设置 target_type int 周目标设置，0：无效 1：日目标 2：周目标 需要功能表支持 示例： { \"sport_step\":2000, \"walk_goal_steps\":15, \"target_type\":23 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetHand.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetHand.html","title":"设置左右手","keywords":"","body":"设置左右手 功能表: ////TODO (未找到对应功能表) Flutter示例： /// 设置左右手事件号 setHand( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_hand), /// 设置左右手 libManager.send(evt: CmdEvtType.setHand, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 hand int 0：左手 1：右手 示例： { \"hand\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetTime.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetTime.html","title":"设置时间","keywords":"","body":"设置时间 Flutter示例： /// 设置时间 setTime( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_time), /// 设置时间 libManager.send(evt: CmdEvtType.setTime, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 year int 年 monuth int 月 day int 日 hour int 时 minute int 分 second int 秒 week int 星期0~6， 表示星期一到星期天 time_zone int 用24时区的，手机端的获取时区是整数0-12东，13-24西,需要功能表支持 示例： { \"year\":2022, \"monuth\":12, \"day\":16, \"hour\":17, \"minute\":49, \"second\":46, \"week\":5, \"time_zone\":8 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetUserInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetUserInfo.html","title":"设置用户信息","keywords":"","body":"设置用户信息 Flutter示例： /// 设置用户信息事件号 setUserInfo( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_user_info), /// 设置用户信息 libManager.send(evt: CmdEvtType.setUserInfo, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 year int 出生日期 年 month int 出生日期 月 day int 出生日期 日 hour int 出生日期 时 height int 身高 单位厘米 weight int 体重 单位千克 值需要x100 gender int 性别1：女 0：男 示例： { \"year\":2022, \"monuth\":12, \"day\":16, \"hour\":18, \"heigh\":173, \"weigh\":74, \"gender\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOOneKeySOS.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOOneKeySOS.html","title":"设置一键呼叫","keywords":"","body":"设置一键呼叫 功能表: onetouchCalling(SDK待补充) Flutter示例： /// 设置一键呼叫事件号 setOnekeySOS( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_onekey_sos), /// 设置一键呼叫 libManager.send(evt: CmdEvtType.setOnekeySOS, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关170 开 85 关 phone_type int 0：无效 1：doro手机 2：非doro手机 示例： { \"on_off\":85, \"phone_type\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetMusicONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetMusicONOFF.html","title":"设置音乐开关","keywords":"","body":"设置音乐开关 功能表: setBleControlMusic 【supportV2SetShowMusicInfoSwitch(SDK待补充)】 Flutter示例： /// 设置音乐开关事件号 setMusicOnOff( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_muisc_onoff), /// 设置音乐开关 libManager.send(evt: CmdEvtType.setMusicOnOff, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关170 开 85 关 show_info_status int 展示歌曲信息开关170:开 85:关需要固件开启功能表支持 key：support_v2_set_show_music_info_switch 示例： { \"on_off\":85, \"phone_type\":85 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetLostFind.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetLostFind.html","title":"设置防丢模式","keywords":"","body":"设置防丢模式 功能表: antilost(SDK待补充) Flutter示例： /// 设置防丢事件号 setLostFind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_lost_find), /// 设置防丢 libManager.send(evt: CmdEvtType.setLostFind, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 方式0：不防丢，1：近距离防丢，2:中距离防丢，3：远距离防丢 示例： { \"mode\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetAlarm.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetAlarm.html","title":"添加闹钟","keywords":"","body":"添加闹钟 功能表: Flutter示例： /// 设置闹钟事件号 setAddAlarm( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_add_alarm), /// 设置闹钟 libManager.send(evt: CmdEvtType.setAddAlarm, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 alarm_num int 闹钟个数 alarm_items 集合 闹钟详情 alarm_id & alarm_type & alarm_hour & alarm_minute & alarm_status & tsnooze_duration & repeat的集合 字段名 字段类型 字段说明 alarm_id int 闹钟id号，固定（1~最多支持闹钟个数） alarm_type int 类型： 0：起床， 1：睡觉， 2：锻炼， 3：吃药， 4：约会， 5：聚会， 6：会议， 7：其他， 8：吃饭， 9：刷牙 10：休息， 11：课程 12：洗澡，13：学习 14：玩耍时间 alarm_hour int 闹钟时（24小时制） alarm_minute int 闹钟分（24小时制） alarm_status int 状态85：显示，170:不显示 tsnooze_duration int 贪睡时长0表示不贪睡，0~60，单位：分钟 repeat int 重复及开关bit0 总开关：0表示关，1表示开 bit1-7 每个bit对应星期1~7 1:重复提醒 0:不重复提醒 示例： { \"alarm_num\":10, \"alarm_items\":[ { \"alarm_id\":1, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":85, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":2, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":85, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":3, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":85, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":4, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":85, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":5, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":85, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":6, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":85, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":7, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":85, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":8, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":85, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":9, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":85, \"tsnooze_duration\":5, \"repeat\":285 }, { \"alarm_id\":10, \"alarm_type\":0, \"alarm_hour\":9, \"alarm_minute\":0, \"alarm_status\":85, \"tsnooze_duration\":5, \"repeat\":285 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetSportMode.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetSportMode.html","title":"设置运动模式","keywords":"","body":"设置运动模式 Flutter示例： /// 设置运动模式选择事件号 setSportModeSelect( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sport_mode_select), /// 设置运动模式选择 libManager.send(evt: CmdEvtType.setSportModeSelect, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 flag int 0：无效1：快捷运动类型设置，下发sport_type1 & sport_type2 & sport_type3 & sport_type42：快捷运动类型具体运动设置 sport_type1 int 快捷运动类型1 flag:1有效 sport_type2 int 快捷运动类型2 flag:1有效 sport_type3 int 快捷运动类型3 flag:1有效 sport_type4 int 快捷运动类型4 flag:1有效 sport_type0_walk bool 类型：走路，0不支持，1支持 flag:2有效 sport_type0_run bool 类型：跑步，0不支持，1支持 flag:2有效 sport_type0_by_bike bool 类型：骑行，0不支持，1支持 flag:2有效 sport_type0_on_foot bool 类型：徒步，0不支持，1支持 flag:2有效 sport_type0_swim bool 类型：游泳，0不支持，1支持 flag:2有效 sport_type0_mountain_climbing bool 类型：爬山，0不支持，1支持 flag:2有效 sport_type0_badminton bool 类型：羽毛球，0不支持，1支持 flag:2有效 sport_type0_other bool 类型：其他，0不支持，1支持 flag:2有效 sport_type1_fitness bool 类型：健身，0不支持，1支持 flag:2有效 sport_type1_spinning bool 类型：动感单车，0不支持，1支持 flag:2有效 sport_type1_ellipsoid bool 类型：椭圆球，0不支持，1支持 flag:2有效 sport_type1_treadmill bool 类型：跑步机，0不支持，1支持 flag:2有效 sport_type1_sit_up bool 类型：仰卧起坐，0不支持，1支持 flag:2有效 sport_type1_push_up bool 类型：俯卧撑，0不支持，1支持 flag:2有效 sport_type1_dumbbell bool 类型：哑铃，0不支持，1支持 flag:2有效 sport_type1_weightlifting bool 类型：举重，0不支持，1支持 flag:2有效 sport_type2_bodybuilding_exercise bool 类型：健身操，0不支持，1支持 flag:2有效 sport_type2_yoga bool 类型：瑜伽，0不支持，1支持 flag:2有效 sport_type2_rope_skipping bool 类型：跳绳，0不支持，1支持 flag:2有效 sport_type2_table_tennis bool 类型：乒乓球，0不支持，1支持 flag:2有效 sport_type2_basketball bool 类型：篮球，0不支持，1支持 flag:2有效 sport_type2_footballl bool 类型：足球，0不支持，1支持 flag:2有效 sport_type2_volleyball bool 类型：排球，0不支持，1支持 flag:2有效 sport_type2_tennis bool 类型：网球，0不支持，1支持 flag:2有效 sport_type3_golf bool 类型：高尔夫，0不支持，1支持 flag:2有效 sport_type3_baseball bool 类型：棒球，0不支持，1支持 flag:2有效 sport_type3_skiing bool 类型：滑雪，0不支持，1支持 flag:2有效 sport_type3_roller_skating bool 类型：轮滑，0不支持，1支持 flag:2有效 sport_type3_dance bool 类型：跳舞，0不支持，1支持 flag:2有效 sport_type3_strength_training bool 类型：力量训练，0不支持，1支持 flag:2有效 sport_type3_core_training bool 类型：核心训练，0不支持，1支持 flag:2有效 sport_type3_tidy_up_relax bool 类型：整理放松，0不支持，1支持 flag:2有效 示例： { \"flag\":2, \"sport_type1\":0, \"sport_type2\":0, \"sport_type3\":0, \"sport_type4\":0, \"sport_type0_walk\":1, \"sport_type0_run\":1, \"sport_type0_by_bike\":1, \"sport_type0_on_foot\":1, \"sport_type0_swim\":1, \"sport_type0_mountain_climbing\":1, \"sport_type0_badminton\":1, \"sport_type0_other\":1, \"sport_type1_fitness\":1, \"sport_type1_spinning\":1, \"sport_type1_ellipsoid\":1, \"sport_type1_treadmill\":1, \"sport_type1_sit_up\":1, \"sport_type1_push_up\":1, \"sport_type1_dumbbell\":1, \"sport_type1_weightlifting\":1, \"sport_type2_bodybuilding_exercise\":1, \"sport_type2_yoga\":1, \"sport_type2_rope_skipping\":1, \"sport_type2_table_tennis\":1, \"sport_type2_basketball\":1, \"sport_type2_footballl\":1, \"sport_type2_volleyball\":1, \"sport_type2_tennis\":1, \"sport_type3_golf\":1, \"sport_type3_baseball\":1, \"sport_type3_skiing\":1, \"sport_type3_roller_skating\":1, \"sport_type3_dance\":1, \"sport_type3_strength_training\":1, \"sport_type3_core_training\":1, \"sport_type3_tidy_up_relax\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetWatchDial.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetWatchDial.html","title":"设置表盘","keywords":"","body":"设置表盘 1.事件号: 124 VBUS_EVT_APP_SET_WATCH_DIAL 功能表：WatchDial(SDk待补充) Flutter示例： /// 设置表盘事件号 setWatchDial( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_watch_dial), /// 设置表盘 libManager.send(evt: CmdEvtType.setWatchDial, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 dial_id int 设置的手环本地表盘表盘id（0无效, 目前支持1~4） 示例： { \"dial_id\":1 } App收到的json字段： 字段名 字段类型 字段说明 ret_code int 0 成功，非0失败 示例： { \"ret_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetShortcut.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetShortcut.html","title":"设置快捷方式","keywords":"","body":"设置快捷方式 Flutter示例： /// 设置快捷方式 setShortcut( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_shortcut), /// 设置快捷方式 libManager.send(evt: CmdEvtType.setShortcut, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 快捷键1的功能0：无效1：快速进入拍照控制2：快速进入运动模式3：快速进入勿扰开关 示例： { \"mode\":2 } App收到的json字段： 字段名 字段类型 字段说明 ret_code int 0 成功，非0失败 示例： { \"ret_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetBpCal.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetBpCal.html","title":"设置血压校准","keywords":"","body":"v2血压校准 功能表：getSupportBpSetOrMeasurementV2 Flutter示例： /// 血压校准事件号 setBpCalibration( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_bp_cal), /// 血压校准 libManager.send(evt: CmdEvtType.setBpCalibration, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 flag int 1:血压校准设置 2:血压校准查询结果 diastolic int 收缩压 systolic int 舒张压 示例： { \"flag\":2, \"diastolic\":0, \"systolic\":0 } App收到的json字段： 字段名 字段类型 字段说明 ret_code int 0：成功 1：成功进入校准模式，正在校准 2：在运动模式3：设备忙碌4：无效的状态 示例： { \"ret_code\":4 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetStressCal.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetStressCal.html","title":"设置压力校准","keywords":"","body":"设置压力校准 功能表：setSetStressCalibration Flutter示例： /// 设置压力校准事件号 setStressCalibration( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_stress_cal), /// 设置压力校准 libManager.send(evt: CmdEvtType.setStressCalibration, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 stress_score int 压力分数，1～10 status int 0：开始校准设置 1：取消校准设置 示例： { \"stress_score\":6, \"status\":0 } App收到的json字段： 字段名 字段类型 字段说明 ret_code int 0：成功1：失败-正在校准2：失败-正在充电3：失败-未佩戴4：失败-运动场景中 示例： { \"ret_code\":3, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetHRInterval.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetHRInterval.html","title":"设置心率区间","keywords":"","body":"设置心率区间 Flutter示例： /// 设置心率区间事件号 setHeartRateInterval( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_heart_rate_interval), /// 设置心率区间 libManager.send(evt: CmdEvtType.setHeartRateInterval, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 burn_fat_threshold int 脂肪训练 50%-69% aerobic_threshold int 心肺训练 70%-84% limit_threshold int 峰值训练 85%-100% user_max_hr int 心率上限的意思，最大心率提醒 range1 int 热身运动 98（220 - 年龄） * 50 range2 int 脂肪燃烧 118 （220 - 年龄） * 60 range3 int 有氧运动 138 （220 - 年龄） * 70 range4 int 无氧运动 157 （220 - 年龄） * 80 range5 int 极限锻炼 177 （220 - 年龄） * 90 min_hr int 心率最小值 max_hr_remind int 最大心率提醒0 关闭,1 开启 min_hr_remind int 最小心率提醒0 关闭,1 开启 remind_start_hour int 提醒开始 时 remind_start_minute int 提醒开始 分 remind_stop_hour int 提醒结束 时 remind_stop_minute int 提醒结束 分 示例： { \"burn_fat_threshold\":50, \"aerobic_threshold\":70, \"limit_threshold\":80, \"user_max_hr\":120, \"range1\":0, \"range2\":0, \"range3\":0, \"range4\":0, \"range5\":0, \"min_hr\":76, \"max_hr_remind\":1, \"min_hr_remind\":1, \"remind_start_hour\":9, \"remind_start_minute\":0, \"remind_stop_hour\":23, \"remind_stop_minute\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetHRMode.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetHRMode.html","title":"设置心率模式","keywords":"","body":"设置心率模式 功能表：syncHeartRateMonitor 【exTableMain7HeartRateInterval(SDk待补充)】 Flutter示例： /// 设置心率模式事件号 setHeartRateMode( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_heart_rate_mode), /// 设置心率模式 libManager.send(evt: CmdEvtType.setHeartRateMode, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 170：手动模式85：关闭136：自动153：持续监测 has_time_range int 时间区间0：无1：有 start_hour int 开始时间时（24小时制0~23） start_minute int 开始时间分（0~59） end_hour int 结束时间时 end_minute int 结束时间分 measurement_interval int 测量间隔单位分钟 示例： { \"mode\":170, \"has_time_range\":1, \"start_hour\":10, \"start_minute\":30, \"end_hour\":20, \"end_minute\":30, \"measurement_interval\":15 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetUint.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetUint.html","title":"设置单位","keywords":"","body":"设置单位 功能表：【setSupportFahrenheit，setSupportCalorieUnit，setSupportSwimPoolUnit，setSupportCyclingUnit，setSupportWalkRunUnit】 Flutter示例： /// 设置单位事件号 setUnit( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_unit), /// 设置单位 libManager.send(evt: CmdEvtType.setUnit, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 dist_unit int 距离单位0：无效1：km(公制)2：mi（英制） weight_unit int 体重单位0：无效1：kg2：lb temp int 温度单位0：无效1：℃2：℉ stride int 走路步长0：无效0：cm language int 语言 is_12hour_format int 时间制式0：无效1：24小时制2：12小时制 stride_run int 跑步的步长0：无效1：cm根据男性换算,默认值:90cm stride_gps_cal int 通过手机GPS校准步长开关0：无效1：开2：关 week_start_date int 周起始日 0：星期11：星期天3：星期6 calorie_unit int 卡路里单位设置0：无效1：默认千卡2：大卡3：千焦 swim_pool_unit int 泳池单位设置0：无效1：默认米2：码 cycling_unit int 骑行单位0：无效1：km 公里2：英里 walking_running_unit int 步行或者跑步的单位（公里/英里）设置 0：无效 1：km 公里2：英里需要功能表支持V3_support_walking_running_unit 示例： { \"dist_unit\":1, \"weight_unit\":1, \"temp\":1, \"stride\":1, \"language\":1, \"is_12hour_format\":1, \"stride_run\":1, \"stride_gps_cal\":1, \"week_start_date\":1, \"calorie_unit\":1, \"swim_pool_unit\":1, \"cycling_unit\":1, \"walking_running_unit\":1 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetSleepPeriod.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetSleepPeriod.html","title":"设置睡眠时间段","keywords":"","body":"设置睡眠时间段 功能表：exSleepPeriod Flutter示例： /// 设置睡眠时间段事件号 setSleepPeriod( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sleep_period), /// 设置睡眠时间段 libManager.send(evt: CmdEvtType.setSleepPeriod, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关170 开 85是关 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 示例： { \"on_off\":170, \"start_hour\":23, \"start_minute\":0, \"end_hour\":8, \"end_minute\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetUpHandGesture.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetUpHandGesture.html","title":"设置抬腕亮屏","keywords":"","body":"设置抬腕亮屏 功能表：getUpHandGesture Flutter示例： /// 抬手亮屏事件号 setUpHandGesture( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_up_hand_gesture), /// 抬手亮屏 libManager.send(evt: CmdEvtType.setUpHandGesture, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关170 开 85是关 show_second int 亮屏时间 单位秒 has_time_range int 是否有时间范围1：有0：没有 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 示例： { \"on_off\":170, \"show_second\":10, \"has_time_range\":1, \"start_hour\":8, \"start_minute\":0, \"end_hour\":18, \"end_minute\":0 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetBpMeasure.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetBpMeasure.html","title":"设置血压测量","keywords":"","body":"设置血压测量 功能表：getSupportBpSetOrMeasurementV2 Flutter示例： /// 血压测量事件号 setBpMeasurement( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_bp_measure), /// 血压测量 libManager.send(evt: CmdEvtType.setBpMeasurement, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 flag int 1：开始测量2：结束测量3：获得血压数据 示例： { \"flag\":1 } App收到的json字段： 字段名 字段类型 字段说明 status int 0：不支持1：正在测量2：测量成功3：测量失败4：设备正在运动模式 systolic_bp int 高压/收缩压 diastolic_bp int 低压/舒张压 示例： { \"status\":170, \"systolic_bp\":120, \"diastolic_bp\":68 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetScreenBrightness.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetScreenBrightness.html","title":"设置屏幕亮度","keywords":"","body":"设置屏幕亮度 功能表：setScreenBrightness 【v2SupportSetBrightScreenTime(SDK待补充)，v2SupportAdjustNightTurnOnAfterSunset(SDK待补充)，v2SupportAddNightLevel(SDK待补充)】 Flutter示例： /// 设置屏幕亮度事件号 setScreenBrightness( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_screen_brightness), /// 设置屏幕亮度 libManager.send(evt: CmdEvtType.setScreenBrightness, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 level int 亮度等级0-100 opera int 0 自动同步配置1 用户手动调节 mode int 0：指定等级1：使用环境光传感器2：level不起作用 auto_adjust_night int 夜间自动亮度调整 0：无效,由固件定义1：关闭2：夜间自动调整亮度3：夜间降亮度使用设置的时间 start_hour int 开始时间时 start_minute int 开始时间分 end_hour int 结束时间时 end_minute int 结束时间分 night_level int 夜间亮度 show_interval int 显示间隔 示例： { \"level\":20, \"opera\":0, \"mode\":0, \"auto_adjust_night\":3, \"start_hour\":18, \"start_minute\":0, \"end_hour\":23, \"end_minute\":0, \"night_level\":20, \"show_interval\":10 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetConfigGPS.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetConfigGPS.html","title":"设置GPS信息","keywords":"","body":"设置gps信息 Flutter示例： /// 设置夜间体温开关事件号 setTemperatureSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_temperature_switch), /// 设置夜间体温开关 libManager.send(evt: CmdEvtType.setTemperatureSwitch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 utc_year int 时间 年 utc_month int 时间 月 utc_day int 时间 日 utc_hour int 时间 时 utc_minute int 时间 分 utc_second int 时间 秒 start_mode int 启动模式1 冷启动2 热启动 默认2 gsop_operation_mode int 操作模式1：正常2：低功耗4：为Balance5为1PPS 默认1 gsop_cycle_ms int 定位周期默认1000 1s gns_value int 定位星mode1：GPS2：GLONASS3：1为GPS + GLONASS默认1 示例： { \"utc_year\":2022, \"utc_month\":12, \"utc_day\":19, \"utc_hour\":16, \"utc_minute\":18, \"utc_second\":30, \"start_mode\":2, \"gsop_operation_mode\":1, \"gsop_cycle_ms\":1000, \"gns_value\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetControlGPS.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetControlGPS.html","title":"设置控制GPS","keywords":"","body":"设置控制gps Flutter示例： /// 设置控制GPS事件号 setGpsControl( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_control_gps), /// 设置控制GPS libManager.send(evt: CmdEvtType.setGpsControl, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 operate int 1：控制 2：查询 type int 1：开启log2：关闭log3：agps写入4：agps 擦除5：gps_fw 写入 示例： { \"operate\":2, \"type\":0 } App收到的json字段： 字段名 字段类型 字段说明 type int 1：开启log2：关闭log3：agps写入4：agps 擦除5：gps_fw 写入 status int 0：为无效1：命令正在执行2：完成 error_code int 成功：0 非0失败 示例： { \"type\":2, \"status\":0, \"error_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetConnectParam.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetConnectParam.html","title":"设置控制连接参数","keywords":"","body":"设置控制连接参数 Flutter示例： /// 控制连接参数事件号 setConnParam( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_conn_param), /// 控制连接参数 libManager.send(evt: CmdEvtType.setConnParam, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 1：控制 2：查询 modify_conn_param int 1：开启log2：关闭log3：agps写入4：agps 擦除5：gps_fw 写入 max_interval int 最大间隔 min_interval int 最小间隔 slave_latency int 延迟 conn_timeout int 连接超时 示例： { \"mode\":2, \"modify_conn_param\":0, \"max_interval\":0, \"min_interval\":0, \"slave_latency\":0, \"conn_timeout\":0 } App收到的json字段： 字段名 字段类型 字段说明 cur_mode int 当前模式1 设置快速模式2 慢速模式 err_code int 成功0 非0失败 示例： { \"cur_mode\":2, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetHotStartParam.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetHotStartParam.html","title":"设置热启动参数","keywords":"","body":"设置热启动参数 Flutter示例： /// 设置热启动参数事件号 setHotStartParam( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_hot_start_param), /// 设置热启动参数 libManager.send(evt: CmdEvtType.setHotStartParam, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 longitude int 晶振偏移 latitude int 经度 x10^6 altitude int 纬度 x10^6 tcxo_offset int 高度 x10 示例： { \"longitude\":2, \"latitude\":0, \"altitude\":0, \"tcxo_offset\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetMenstruation.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetMenstruation.html","title":"设置经期","keywords":"","body":"设置经期 功能表：setMenstruation 【getMenstrualAddNotifyFlagV3，support_set_menstrual_on_off(SDK待补充)】 Flutter示例： /// 设置经期事件号 setMenstruation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_menstruation), /// 设置经期 libManager.send(evt: CmdEvtType.setMenstruation, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 经期提醒开关 170开,85关闭 menstrual_length int 经期长度 menstrual_cycle int 经期周期 last_menstrual_year int 最近一次经期开始时间 年 last_menstrual_month int 最近一次经期开始时间 月 last_menstrual_day int 最近一次经期开始时间 日 ovulation_interval_day int 从下一个经期开始前到排卵日的间隔,一般为14天 ovulation_before_day int 排卵日之前易孕期的天数,一般为5 ovulation_after_day int 排卵日之后易孕期的天数,一般为5 notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知需要固件开启功能表支持 V3_menstrual_add_notify_flag menstrual_on_off int 经期开关170开,85关闭需要固件开启功能表支持 support_set_menstrual_on_off 示例： { \"on_off\":170, \"menstrual_length\":7, \"menstrual_cycle\":21, \"last_menstrual_year\":2022, \"last_menstrual_month\":12, \"last_menstrual_day\":19, \"ovulation_interval_day\":15, \"ovulation_before_day\":5, \"ovulation_after_day\":5, \"notify_flag\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetMenstruationRemind.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetMenstruationRemind.html","title":"设置经期提醒","keywords":"","body":"设置经期提醒 功能表：setMenstruation 【setMenstrualAddPregnancy，not_support_set_ovulation(SDK待补充)】 Flutter示例： /// 设置经期提醒事件号 setMenstruationRemind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_menstruation_remind), /// 设置经期提醒 libManager.send(evt: CmdEvtType.setMenstruationRemind, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 start_day int 开始日提醒 提前天数 ovulation_day int 排卵日提醒 提前天数 hour int 提醒时间 时 minute int 提醒时间 分 pregnancy_day_before_remind int 易孕期 开始的时候 提前多少天提醒 pregnancy_day_end_remind int 易孕期 结束的时候 提前多少天提醒 menstrual_day_end_remind int 经期结束 提前多少天提醒 示例： { \"start_day\":5, \"ovulation_day\":5, \"hour\":21, \"minute\":0, \"pregnancy_day_before_remind\":5, \"pregnancy_day_end_remind\":5, \"menstrual_day_end_remind\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetCalorieDistanceGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetCalorieDistanceGoal.html","title":"设置卡路里和距离目标(日常三环目标)","keywords":"","body":"设置卡路里和距离目标(设置日常三环) 功能表：【setCalorieGoal，exMain3DistanceGoal(SDK待补充)，set_mid_high_time_goal_03_43(c库jsonid SDK待补充)，getSupportGetMainSportGoalV3，getSupportSetGetTimeGoalTypeV2】 Flutter示例： /// 设置日常三环目标事件号 setCalorieDistanceGoal( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_calorie_distance_goal), /// 设置日常三环目标 libManager.send(evt: CmdEvtType.setCalorieDistanceGoal, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 calorie int 活动卡路里目标 单位千卡 distance int 距离 单位米 calorie_min int 活动卡路里最小值 单位千卡 calorie_max int 活动卡路里最大值 单位千卡 mid_high_time_goal int 中高运动时长的目标 单位秒 walk_goal_time int 目标时间 time_goal_type int 目标类型0：无效 1：日目标 2：周目标 示例： { \"calorie\":500, \"distance\":200, \"calorie_min\":100, \"calorie_max\":666, \"mid_high_time_goal\":600, \"walk_goal_time\":600, \"time_goal_type\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetSp02Data.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetSp02Data.html","title":"设置血氧开关","keywords":"","body":"设置血氧开关 功能表：setSpo2Data【setSpo2AllDayOnOff，v3SupportSetSpo2LowValueRemind(SDK待补充)，getSpo2NotifyFlag】 Flutter示例： /// 设置血氧开关事件号 setSpo2Switch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_spo2), /// 设置血氧开关 libManager.send(evt: CmdEvtType.setSpo2Switch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 全天血氧开关 170开 85关闭 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 low_spo2_on_off int 血氧过低开关 170开 85关闭需要功能表支持V3_support_set_spo2_low_value_remind low_spo2_value int 血氧过低阈值需要功能表支持V3_support_set_spo2_low_value_remind notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 需要功能表支持 V3_spo2_add_notify_flag 示例： { \"on_off\":170, \"start_hour\":14, \"start_minute\":0, \"end_hour\":20, \"end_minute\":0, \"low_spo2_on_off\":170, \"low_spo2_value\":20, \"notify_flag\":1 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0是成功，非0是错误码 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetPressure.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetPressure.html","title":"设置压力开关","keywords":"","body":"设置压力开关 功能表：setPressureData 【getPressureNotifyFlagMode，v2SendCalibrationThreshold(SDK待补充)】 Flutter示例： /// 设置压力开关事件号 setStressSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_pressure), /// 设置压力开关 libManager.send(evt: CmdEvtType.setStressSwitch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 总开关 170开 85关闭 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 remind_on_off int 压力提醒开关 170开 85关on_off为关则提醒不起作用 repeat int bit0 无效,bit1-bit7 分别是星期1到星期7,同闹钟 interval int 提醒间隔,单位分钟 默认60分钟 high_threshold int 压力过高阈值 stress_threshold int 压力校准阈值，默认是80 需要固件开启功能表支持 v2_send_calibration_threshold notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 需要固件开启功能表支持 V3_pressure_add_notify_flag_and_mode 示例： { \"on_off\":170, \"start_hour\":14, \"start_minute\":0, \"end_hour\":20, \"end_minute\":0, \"remind_on_off\":170, \"repeat\":127, \"interval\":60, \"high_threshold\":170, \"stress_threshold\":80, \"notify_flag\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetSportModeSort.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetSportModeSort.html","title":"设置运动模式排序","keywords":"","body":"设置运动模式排序 功能表：setSportModeSort Flutter示例： /// 设置运动模式排序事件号 setSportModeSort( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sport_mode_sort), /// 设置运动模式排序 libManager.send(evt: CmdEvtType.setSportModeSort, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 items 集合 运动模式排序详情 index & type的集合 字段名 字段类型 字段说明 index int 排序从1开始 0无效 type int 运动模式类型1 走路2 跑步 .. 示例： { \"item\": [ { \"index\": 1, \"type\": 0 }, { \"index\": 2, \"type\": 2 }, { \"index\": 3, \"type\": 4 }, { \"index\": 4, \"type\": 8 }, { \"index\": 5, \"type\": 85 }, { \"index\": 6, \"type\": 78 }, { \"index\": 7, \"type\": 45 }, { \"index\": 8, \"type\": 65 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetWalkReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetWalkReminder.html","title":"设置走动提醒","keywords":"","body":"设置走动提醒 功能表：setWalkReminder 【setWalkReminderAddNotify，v2SupportSetGetNoReminderOnWalkReminder(待补充)】 Flutter示例： /// 设置走动提醒事件号 setWalkRemind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_walk_reminder), /// 设置走动提醒 libManager.send(evt: CmdEvtType.setWalkRemind, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关0 关,1 开 goal_step int 目标步数预留 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 repeat int 重复 goal_time int 目标时间 预留 notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 需要固件开启功能表支持 V3_walk_reminder_add_notify_flag do_not_disturb_on_off int 走动勿扰(免提醒)开关0关 1开需要固件开启功能表支持 v2_support_set_get_no_reminder_on_walk_reminder no_disturb_start_hour int 开始时间 时 no_disturb_start_minute int 开始时间 分 no_disturb_end_hour int 结束时间 时 no_disturb_end_minute int 结束时间 分 示例： { \"on_off\":170, \"goal_step\":2000, \"start_hour\":14, \"start_minute\":0, \"end_hour\":20, \"end_minute\":0, \"repeat\":127, \"goal_time\":60, \"notify_flag\":1, \"do_not_disturb_on_off\":0, \"no_disturb_start_hour\":0, \"no_disturb_start_minute\":0, \"no_disturb_end_hour\":0, \"no_disturb_end_minute\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetBreatheTrain.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetBreatheTrain.html","title":"设置呼吸训练","keywords":"","body":"设置呼吸训练 功能表：setSupportBreathRate Flutter示例： /// 呼吸训练事件号 setBreatheTrain( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_breathe_train), /// 呼吸训练 libManager.send(evt: CmdEvtType.setBreatheTrain, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 frequency int 每分钟呼吸次数 示例： { \"frequency\":30 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetActivitySwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetActivitySwitch.html","title":"设置运动模式识别开关","keywords":"","body":"设置运动模式识别开关 功能表：setActivitySwitch【v3AutoActivitySwitch(待补充)，auto_activity_switch_add_smart_rope_02_EA_03_49(C库jsonid SDK待补充)】 Flutter示例： /// 运动开关设置事件号 setActivitySwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_activity_switch), /// 运动开关设置 libManager.send(evt: CmdEvtType.setActivitySwitch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 auto_identify_sport_walk int 自动识别走路开关 0 关闭,1 开 auto_identify_sport_run int 自动识别跑步开关 0 关闭,1 开 auto_identify_sport_bicycle int 自动识别自行车开关 0 关闭,1 开 auto_pause_on_off int 运动自动暂停 0 关闭,1 开 auto_end_remind_on_off_on_off int 结束提醒 0 关闭,1 开 auto_identify_sport_elliptical int 自动识别椭圆机开关 0 关闭,1 开 auto_identify_sport_rowing int 自动识别划船机开关 0 关闭,1 开 auto_identify_sport_swim int 自动识别游泳开关 0 关闭,1 开 示例： { \"auto_identify_sport_walk\":0, \"auto_identify_sport_run\":0, \"auto_identify_sport_bicycle\":0, \"auto_pause_on_off\":0, \"auto_end_remind_on_off_on_off\":1, \"auto_identify_sport_elliptical\":0, \"auto_identify_sport_rowing\":0, \"auto_identify_sport_swim\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetDrinkWaterReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetDrinkWaterReminder.html","title":"设置喝水提醒","keywords":"","body":"设置喝水提醒 功能表：setDrinkWaterReminderAddNotify 【getDrinkWaterNotifyFlag，v2_support_set_no_reminder_on_drink_reminder_03_60(待补充)】 Flutter示例： /// 设置喝水提醒事件号 setDrinkWaterRemind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_drink_water_reminder), /// 设置喝水提醒 libManager.send(evt: CmdEvtType.setDrinkWaterRemind, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关0 关,1 开 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 repeat int 重复bit0 无效,bit1-bit7 分别是星期1到星期7,同闹钟 interval int 提醒间隔单位分钟 notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 需要固件开启功能表支持 V3_walk_reminder_add_notify_flag do_not_disturb_on_off int 免提醒开关 00关 01开需要固件开启功能表支持 v2_support_set_no_reminder_on_drink_reminder no_disturb_start_hour int 免提醒开始时间 时 no_disturb_start_minute int 免提醒开始时间 分 no_disturb_end_hour int 免提醒结束时间 时 no_disturb_end_minute int 免提醒结束时间 分 示例： { \"on_off\":1, \"start_hour\":18, \"start_minute\":7, \"end_hour\":23, \"end_minute\":12, \"repeat\":127, \"interval\":20, \"notify_flag\":1, \"do_not_disturb_on_off\":1, \"no_disturb_start_hour\":9, \"no_disturb_start_minute\":0, \"no_disturb_end_hour\":12, \"no_disturb_end_minute\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetSimpleFileOperations.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetSimpleFileOperations.html","title":"简单文件操作","keywords":"","body":"设置简单文件操作 Flutter示例： /// 简单文件操作事件号 funcSimpleFileOpt( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_simple_file_operations), /// 简单文件操作 libManager.send(evt: CmdEvtType.funcSimpleFileOpt, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 operate int 操作类型 0 获取1 覆盖2 删除3 复制 index int 索引号 dest_index int 目的索引,只用于复制,其他情况下无效 示例： { \"operate\":0, \"index\":1, \"dest_index\":0 } App收到的json字段： 字段名 字段类型 字段说明 error int 错误码0操作成功,其他值为错误 operate int 操作类型 0 获取1 覆盖1 删除 index int 索引号 示例： { \"error\":0, \"operate\":0, \"index\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetMenuList.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetMenuList.html","title":"设置菜单列表","keywords":"","body":"设置菜单列表 功能表：setMenuListMain7【supportCompass(待补充)，supportBarometricAltimeter(待补充)，support_call_list(待补充)，supportSetMenuListTypeMeasure(待补充)】 Flutter示例： /// 设置菜单列表事件号 setMenuList( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_menu_list), /// 设置菜单列表 libManager.send(evt: CmdEvtType.setHeartRateMode, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 items int [] 菜单列表且自带排序无排序情况,有值则显示,无值则不现实有排序情况,需要按照数组从0开始0 无效1 步数2 心率3 睡眠4 拍照5 闹钟6 音乐7 秒表8 计时器9 运动模式10 天气11 呼吸锻炼12 查找手机13 压力14 数据三环15 时间界面16 最近一次活动17 健康数据 18 血氧 19 菜单设置20 (20)alexa语音依次显示 21 X屏（gt01pro-X新增）22 卡路里 （Doro Watch新增）23 距离 （Doro Watch新增）24 一键测量 (IDW05新增) 25 renpho health(润丰健康)(IDW12新增) 26 指南针 (mp01新增)27 气压高度计(mp01新增) 示例： { \"items\": [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetTakePicture.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetTakePicture.html","title":"设置控制拍照","keywords":"","body":"设置控制拍照 功能表：bleControlTakePhoto(SDK待补充) Flutter示例： /// 控制拍照事件号 setTakePicture( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_take_picture), /// 控制拍照 libManager.send(evt: CmdEvtType.setTakePicture, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 0 关1 开 示例： { \"on_off\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetNotice.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetNotice.html","title":"设置通知中心开关","keywords":"","body":"设置通知中心开关 功能表：ancs(c库jsonid SDK待补充)【setMsgAllSwitch】 Flutter示例： /// 设置通知中心事件号 setNotificationCenter( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_notice), /// 设置通知中心 libManager.send(evt: CmdEvtType.setNotificationCenter, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 notify_switch int 通知提醒开关85：ble总开关开170：总开关关136：设置子开关187：只开bt（开关）204：ble、bt都开（开关）0：无效 call_switch int 来电子提醒开关 85：开170：关0：无效 notify_item1 int 子应用开关1 每个bit代表一个应用 notify_item2 int 子应用开关2 每个bit代表一个应用 call_delay int 来电提醒延时 单位秒 notify_item3 int 子应用开关3 每个bit代表一个应用 notify_item4 int 子应用开关4 每个bit代表一个应用 notify_item5 int 子应用开关5 每个bit代表一个应用 notify_item6 int 子应用开关6 每个bit代表一个应用 notify_item7 int 子应用开关7 每个bit代表一个应用 notify_item8 int 子应用开关8 每个bit代表一个应用 notify_item9 int 子应用开关9 每个bit代表一个应用 notify_item10 int 子应用开关10 每个bit代表一个应用 msg_all_switch int 消息应用总开关 开：85 关：170 notify_item11 int 子应用开关11 每个bit代表一个应用 notify_item12 int 子应用开关12 每个bit代表一个应用 示例： { \"call_delay\" : 0, \"call_switch\" : 85, \"msg_all_switch\" : 0, \"notify_item1\" : 0, \"notify_item10\" : 0, \"notify_item11\" : 0, \"notify_item12\" : 0, \"notify_item2\" : 0, \"notify_item3\" : 0, \"notify_item4\" : 0, \"notify_item5\" : 0, \"notify_item6\" : 0, \"notify_item7\" : 0, \"notify_item8\" : 0, \"notify_item9\" : 0, \"notify_item10\" : 0, \"notify_switch\" : 85, \"notify_item11\" : 0, \"notify_item12\" : 0 } App收到的json字段： 字段名 字段类型 字段说明 notify_switch int 通知提醒开关 status_code int 状态0：未知超时 1：成功2：失败（取消）3：固件配对超时 err_code int 0成功 非0失败 示例： { \"notify_switch\" : 0, \"status_code\" : 85, \"err_code\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetClearOperations.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetClearOperations.html","title":"设置删除文件","keywords":"","body":"设置删除文件 Flutter示例： /// 删除日志事件号 setClearOperation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_clear_operations), /// 删除日志 libManager.send(evt: CmdEvtType.setClearOperation, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 type int 1：过热日志2：电池日志 示例： { \"type\":1 } App收到的json字段： 字段名 字段类型 字段说明 state int 0成功1失败 示例： { \"state\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetBleVoice.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetBleVoice.html","title":"设置手机音量下发给固件","keywords":"","body":"设置手机音量下发给设备 功能表：exTableMain10SetPhoneVoice(SDK待补充) Flutter示例： /// 手机音量下发给设备事件号 setBleVoice( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_ble_voice), /// 手机音量下发给设备 libManager.send(evt: CmdEvtType.setBleVoice, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 total_voice int 总音量 now_voice int 当前的音量 示例： { \"total_voice\" : 100, \"now_voice\" : 85 } App收到的json字段： 字段名 字段类型 字段说明 state int 0是失败1是成功 示例： { \"state\" : 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetHandWashingReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetHandWashingReminder.html","title":"设置洗手提醒","keywords":"","body":"设置洗手提醒 功能表：setHandWashReminder Flutter示例： /// 设置洗手提醒事件号 setHandWashingReminder( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_set_hand_washing_reminder), /// 设置洗手提醒 libManager.send(evt: CmdEvtType.setHandWashingReminder, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 0：关1：开 默认是关闭 start_hour int 提醒开始时间 时 start_minute int 提醒开始时间 分 end_hour int 提醒结束时间 时 end_minute int 提醒结束时间 分 repeat int bit0 无效bit1-bit7 分别是星期1到星期7 interval int 提醒间隔 单位分钟 默认60分钟 示例： { \"on_off\":0, \"start_hour\":0, \"start_minute\":0, \"end_hour\":0, \"end_minute\":0, \"repeat\":0, \"interval\":0 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetTakingMedicineReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetTakingMedicineReminder.html","title":"设置吃药提醒","keywords":"","body":"设置吃药提醒 功能表：exTableMain11TakingMedicine(SDK待补充) Flutter示例： /// 设置吃药提醒事件号 setTakingMedicineReminder( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_taking_medicine_reminder), /// 设置吃药提醒 libManager.send(evt: CmdEvtType.setTakingMedicineReminder, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 taking_medicine_id int id 从1开始 最多5个 on_off int 0：关1：开 默认是关闭 start_hour int 提醒开始时间 时 start_minute int 提醒开始时间 分 end_hour int 提醒结束时间 时 end_minute int 提醒结束时间 分 repeat int bit0 无效bit1-bit7 分别是星期1到星期7 interval int 提醒间隔 单位分钟 默认60分钟 do_not_disturb_on_off int 免提醒时间段开关0：关1：开 默认是关闭 do_not_disturb_start_hour int 勿扰开始时间 时 do_not_disturb_start_minute int 勿扰开始时间 分 do_not_disturb_end_hour int 勿扰结束时间 时 do_not_disturb_end_minute Int 勿扰结束时间 分 示例： { \"taking_medicine_id\":1, \"on_off\":0, \"start_hour\":10, \"start_minute\":22, \"end_hour\":23, \"end_minute\":0, \"repeat\":127, \"interval\":60, \"do_not_disturb_on_off\":0, \"do_not_disturb_start_hour\":0, \"do_not_disturb_start_minute\":0, \"do_not_disturb_end_hour\":0, \"do_not_disturb_end_minute\":0 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetHRModeSmart.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetHRModeSmart.html","title":"设置智能心率模式","keywords":"","body":"设置智能心率模式 功能表：setSmartHeartRate Flutter示例： /// 智能心率模式设置事件号 setHeartRateModeSmart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_heart_rate_mode_smart), /// 智能心率模式设置 libManager.send(evt: CmdEvtType.setHeartRateModeSmart, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 0：无效1：弱2：中3：强 notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 high_heart_mode int 170：开启智能心率过高提醒开关85：关闭 low_heart_mode int 170：开启智能心率过低提醒开关85：关闭 high_heart_value int 智能心率过高提醒阈值 low_heart_value int 智能心率过低提醒阈值 start_hour int 心率监测时间段设置开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 示例： { \"mode\":1, \"notify_flag\":0, \"high_heart_mode\":85, \"low_heart_mode\":85, \"high_heart_value\":100, \"low_heart_value\":80, \"start_hour\":9, \"start_minute\":0, \"end_hour\":12, \"end_minute\":0 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0成功非0是错误码 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetNoise.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetNoise.html","title":"设置环境音量的开关和阀值","keywords":"","body":"设置环境音量的开关和阀值 功能表：syncV3Noise Flutter示例： /// 环境音量的开关和阀值事件号 setV3Noise( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_v3_noise), /// 环境音量的开关和阀值 libManager.send(evt: CmdEvtType.setV3Noise, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 全天环境音量开关 170开85关闭 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 high_noise_on_off int 阀值开关 170开85关闭 high_noise_value int 阀值 示例： { \"mode\":85, \"start_hour\":15, \"start_minute\":0, \"end_hour\":20, \"end_minute\":0, \"high_noise_on_off\":85, \"high_noise_value\":100, } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetScientificSleepSwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetScientificSleepSwitch.html","title":"设置科学睡眠开关","keywords":"","body":"设置科学睡眠开关 功能表：setScientificSleepSwitch Flutter示例： /// 设置科学睡眠开关事件号 setScientificSleepSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_scientific_sleep_switch), /// 设置科学睡眠开关 libManager.send(evt: CmdEvtType.setScientificSleepSwitch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 模式 170：科学睡眠85：普通睡眠 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 示例： { \"mode\":85, \"start_hour\":23, \"start_minute\":0, \"end_hour\":9, \"end_minute\":0 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetTemperatureSwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetTemperatureSwitch.html","title":"设置夜间体温开关","keywords":"","body":"设置夜间体温开关 功能表：setTemperatureSwitchSupport Flutter示例： /// 设置夜间体温开关事件号 setTemperatureSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_temperature_switch), /// 设置夜间体温开关 libManager.send(evt: CmdEvtType.setTemperatureSwitch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 模式 170：开85：关闭 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 unit int 体温单位设置： 1：c（摄氏度） 16：f（华摄氏度） 示例： { \"mode\":85, \"start_hour\":19, \"start_minute\":0, \"end_hour\":23, \"end_minute\":0, \"unit\":1 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetFitnessGuidance.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetFitnessGuidance.html","title":"设置健身指导开关","keywords":"","body":"设置健身指导开关 功能表：setSetFitnessGuidance Flutter示例： /// 健身指导1.C库事件 setFitnessGuidance( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_fitness_guidance), /// 健身指导 libManager.send(evt: CmdEvtType.setFitnessGuidance, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 mode int 健身指导模式开关 170开85关闭 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知 uint8_t repeat; // uint32_t target_steps;//目标步数 go_mode int 走动提醒开关 170开85关闭 repeat int 重复bit0：无效bit1-7分别对应周一到周天 target_steps int 目标步数 示例： { \"mode\":85, \"start_hour\":9, \"start_minute\":0, \"end_hour\":18, \"end_minute\":0, \"notify_flag\":1, \"go_mode\":85, \"repeat\":127, \"target_steps\":2000 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetUnreadAppReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetUnreadAppReminder.html","title":"设置未读信息红点提示开关","keywords":"","body":"设置未读信息红点提示开关 功能表：setSetUnreadAppReminder Flutter示例： /// 未读信息红点提示开关事件号 setUnreadAppReminder( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_unread_app_reminder), /// 未读信息红点提示开关 libManager.send(evt: CmdEvtType.setUnreadAppReminder, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 开关170：打开 85：关闭 示例： { \"on_off\":85 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetNotificationStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetNotificationStatus.html","title":"设置通知应用状态","keywords":"","body":"设置通知应用状态 功能表：setSetNotificationStatus Flutter示例： /// 通知应用状态设置事件号 setNotificationStatus( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_notification_status), /// 手机app通过这个命令开关，实现通知应用状态设置 libManager.send(evt: CmdEvtType.setNotificationStatus, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 notify_flag int 开关数据状态：170：允许通知 187：静默通知 85：关闭通知 示例： { \"notify_flag\":170 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetRespiRateONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetRespiRateONOFF.html","title":"设置呼吸率开关","keywords":"","body":"设置呼吸率开关 功能表：setRespirationRate Flutter示例： /// 设置呼吸率开关事件号 setRRespiRateTurn( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_respi_rate_on_off), /// 设置呼吸率开关 libManager.send(evt: CmdEvtType.setRRespiRateTurn, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 85：关闭 170：开 示例： { \"on_off\":170 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0是成功，非0是错误码 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetBodyPowerONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetBodyPowerONOFF.html","title":"设置身体电量开关","keywords":"","body":"设置身体电量开关 功能表：syncV3BodyPower Flutter示例： /// 设置身体电量开关事件号 setBodyPowerTurn( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_body_power_on_off), /// 设置身体电量开关 libManager.send(evt: CmdEvtType.setBodyPowerTurn, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 85：关闭 170：开 示例： { \"on_off\":170 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0是成功，非0是错误码 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetWeatherSwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetWeatherSwitch.html","title":"设置天气开关","keywords":"","body":"设置天气开关 功能表：setSetV3Weather Flutter示例： /// 设置天气开关事件号 setWeatherSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_weather_switch), /// 设置天气开关 libManager.send(evt: CmdEvtType.setWeatherSwitch, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 on_off int 85：关闭 170：开 示例： { \"on_off\":170 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetWeatcherData.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetWeatcherData.html","title":"设置天气数据","keywords":"","body":"设置天气数据 功能表：getWeather Flutter示例： /// 设置天气数据事件号 setWeatherData( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_weatcher_data), /// 设置天气数据 libManager.send(evt: CmdEvtType.setWeatherData, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 type int 天气类型 temp int 当前温度 max_temp int 当天最高温度 min_temp int 当天最低温度 humidity int 当前湿度 uv_intensity int 当前紫外线强度 aqi int 当前污染指数 future 集合 未来三天的天气情况type & min_temp & max_temp的集合 字段名 字段类型 字段说明 type int 未来天气类型 min_temp int 未来最高温度 max_temp int 未来最低温度 示例： { \"type\":1, \"temp\":10, \"max_temp\":18, \"min_temp\":7, \"humidity\":20, \"uv_intensity\":30, \"aqi\":60, \"future\":[ { \"type\":2, \"min_temp\":10, \"max_temp\":18 }, { \"type\":2, \"min_temp\":9, \"max_temp\":16 }, { \"type\":1, \"min_temp\":8, \"max_temp\":19 } ] } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功，非0失败 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetWeatcherCityName.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetWeatcherCityName.html","title":"设置天气城市名称","keywords":"","body":"设置天气城市名称 功能表：setWeatherCity Flutter示例： /// 设置天气城市名称事件号 setWeatherCityName( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_weatcher_city_name), /// 设置天气城市名称 libManager.send(evt: CmdEvtType.setWeatherCityName, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 version int 版本号0 city_name char [] 城市名称 固件开启功能表：V3_support_v3_long_city_name后支持75个字节大小的城市名称，不开启功能表默认17个字节大小 示例： { \"version\":0, \"city_name\":\"shenzhen\" } App收到的json字段： 字段名 字段类型 字段说明 version int 0是失败1是成功 err_code int 0成功，非0是错误码 示例： { \"version\":0, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetWeatcherSunTime.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2SetEvt/IDOSetWeatcherSunTime.html","title":"设置日出日落时间","keywords":"","body":"设置日出日落时间 功能表：support_set_weatch_sun_time_0a_06(c库jsonid SDK待补充) Flutter示例： /// 设置日出日落时间事件号 setWeatherSunTime( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_weatcher_set_sun_time), /// 设置日出日落时间 libManager.send(evt: CmdEvtType.setWeatherSunTime, json: jsonEncode(json)); App下发的json字段： 字段名 字段类型 字段说明 sunrise_hour int 日出时间 时 sunrise_min int 日出时间 分 sunset_hour int 日落时间 时 sunset_min int 日落时间 分 示例： { \"sunrise_hour\":6, \"sunrise_min\":12, \"sunset_hour\":18, \"sunset_min\":30 } App收到的json字段： 字段名 字段类型 字段说明 is_success int 0是失败1是成功 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/IDOGetEvtIntroduction.html":{"url":"doc/IDOGetEvtIntroduction.html","title":"V2 Get Instruction Event","keywords":"","body":"{V2 Get Event Instructions} Function Get Device MAC Address Get Device Information (Excluding BT Name) Get Device Information (Combined Interface with BT Name) Get Function Table Get Notification Center Status Get Real-time Data Get Error Records Get File Transfer Configuration Get HID Information Get GPS Information Get Hot Start Parameters Get GPS Status Get Version Information Get Do Not Disturb Mode Status Get MTU Information Get Default Sport Type Get Download Language Support Get Battery Information Get Font Library Information Get Device Supported Menu List Get Screen Brightness Get Raise Wrist Data Get Device Update Status Get Watch ID Get Watch Name Get Device Log Status Get Calorie/Distance/Active Time Settings (Daily Three Rings) Get Walk Reminder Get All Health Switch States Get Activity Autodetection Switch Get Firmware Level 3 Version and BT Level 3 Version Get Stress Value Get Blood Pressure Algorithm Version Get Maximum Number of Settings Supported by Firmware Get Undeletable Shortcut App List Get Unread App Red Dot Prompt Switch Query BT Pairing/Connection/A2DP Connection/HFP Connection Status Get Modification Time of Locally Saved Contact File on Firmware Get Heart Rate Monitoring Mode Get All-day Step Goal Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetMac.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetMac.html","title":"获取设备MAC地址","keywords":"","body":"获取设备mac地址 功能表:每个设备支持 【getBtAddrV2】 Flutter示例： /// 获取mac地址事件号 getMac( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_app_get_mac), /// 获取mac地址 libManager.send(evt: CmdEvtType.getMac, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 mac_addr int [6] 设备的id地址 最大6个字节 bt_addr int [6] bt的蓝牙地址 最大6个字节 示例： { \"bt_addr\" : [ 135, 0, 23, 0, 136, 173 ], \"mac_addr\" : [ 173, 136, 0, 23, 0, 135 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDeviceInfoOnly.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDeviceInfoOnly.html","title":"获取设备信息(不包含bt名称,初次绑定时获取设备信息调用该接口)","keywords":"","body":"获取设备信息(不包含bt名称,初次绑定时获取设备信息调用该接口) 功能表:每个设备支持 Flutter示例： /// 获取设备信息(绑定前专用)事件号 getDeviceInfoOnly( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.intapp_get_device_info_only), /// 获取设备信息(绑定前专用) libManager.send(evt: CmdEvtType.getDeviceInfoOnly, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 deivce_id int 设备id firmware_version int 版本号 mode int 模式0：运动模式，1：睡眠模式 batt_status int 电池状态 0： 正常1：正在充电2：充满3：低电量 energe int 电量等级 pair_flag int 绑定状态 reboot int 是否重启 如果重启 app会再次同步配置信息给手环 bind_confirm_method int 绑定确认方式 0：默认(注意以前ID号定制),超时时间无效1：单击[按键在下面]2：为长按[按键在下面]3：屏幕点击 横向确认和取消,确认在左边4：屏幕点击 横向确认和取消,确认在右边5：屏幕点击 竖向确认和取消，确认在上边6：屏幕点击 竖向确认和取消，确认在下边7：点击(右边一个按键) bind_confirm_timeout int 超时时间最长为15秒 0表示不超时 platform int 手环的平台 0 ：nordic10 ：realtek 8762x 20 ：cypress psoc630：Apollo3 40：为汇顶 50：nordic+泰凌微, 瑞坤 80：5340 90：炬芯 shape int 0：默认（gt01 方形的）1：圆形2：方形的3：椭圆 dev_type int 0：默认（gt01 手表）1： 手环2：手表 user_defined_dial_main_version int 自定义表盘主版本 从1开始 0：不支持对应的自定义表盘功能 cloud_clock_dial_version int 云端表盘版本号 默认从0开始 是否支持云端表盘有对应的功能表multi_dial (废弃 同user_defined_dial_main_version ) show_bind_choice_ui int 固件绑定时候显示勾勾叉叉ui界面 app根据这个位显示提示固件点击绑定 0：不需要app提示 1：需要app提示 bootload_version int nordic平台bootloader版本信息 最小为1 示例： { \"batt_status\" : 0, \"bind_confirm_method\" : 0, \"bind_confirm_timeout\" : 0, \"bootload_version\" : 0, \"cloud_clock_dial_version\" : 2, \"deivce_id\" : 7453, \"dev_type\" : 2, \"energe\" : 32, \"firmware_version\" : 2, \"mode\" : 1, \"pair_flag\" : 1, \"platform\" : 30, \"reboot\" : 0, \"shape\" : 2, \"show_bind_choice_ui\" : 0, \"user_defined_dial_main_version\" : 2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDeviceInfoWithBTName.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDeviceInfoWithBTName.html","title":"获取设备信息(组合接口 组合上报bt名称)","keywords":"","body":"获取设备信息(组合接口 组合上报bt名称) 功能表:每个设备支持 【getBtAddrV2】 Flutter示例： /// 获取设备信息事件号 getDeviceInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_device_info), /// 获取设备信息 libManager.send(evt: CmdEvtType.getDeviceInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 deivce_id int 设备id firmware_version int 版本号 mode int 模式0：运动模式，1：睡眠模式 batt_status int 电池状态 0： 正常1：正在充电2：充满3：低电量 energe int 电量等级 pair_flag int 绑定状态 reboot int 是否重启 如果重启 app会再次同步配置信息给手环 bind_confirm_method int 绑定确认方式 0：默认(注意以前ID号定制),超时时间无效1：单击[按键在下面]2：为长按[按键在下面]3：屏幕点击 横向确认和取消,确认在左边4：屏幕点击 横向确认和取消,确认在右边5：屏幕点击 竖向确认和取消，确认在上边6：屏幕点击 竖向确认和取消，确认在下边7：点击(右边一个按键) bind_confirm_timeout int 超时时间最长为15秒 0表示不超时 platform int 手环的平台 0 ：nordic10 ：realtek 8762x 20 ：cypress psoc630：Apollo3 40：为汇顶 50：nordic+泰凌微, 瑞坤 80：5340 90：炬芯 shape int 0：默认（gt01 方形的）1：圆形2：方形的3：椭圆 dev_type int 0：默认（gt01 手表）1： 手环2：手表 user_defined_dial_main_version int 自定义表盘主版本 从1开始 0：不支持对应的自定义表盘功能 cloud_clock_dial_version int 云端表盘版本号 默认从0开始 是否支持云端表盘有对应的功能表multi_dial (废弃 同user_defined_dial_main_version ) show_bind_choice_ui int 固件绑定时候显示勾勾叉叉ui界面 app根据这个位显示提示固件点击绑定 0：不需要app提示 1：需要app提示 bootload_version int nordic平台bootloader版本信息 最小为1 bt_name char [32] bt蓝牙名称需要固件开启v2_get_bt_addr 且 alarm_count>0才会返回bt名称，否则返回空 示例： { \"batt_status\" : 0, \"bind_confirm_method\" : 0, \"bind_confirm_timeout\" : 0, \"bootload_version\" : 0, \"bt_name\" : null, \"cloud_clock_dial_version\" : 2, \"deivce_id\" : 7453, \"dev_type\" : 2, \"energe\" : 32, \"firmware_version\" : 2, \"mode\" : 1, \"pair_flag\" : 1, \"platform\" : 30, \"reboot\" : 0, \"shape\" : 2, \"show_bind_choice_ui\" : 0, \"user_defined_dial_main_version\" : 2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetFuncTableUser.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetFuncTableUser.html","title":"获取功能表","keywords":"","body":"获取功能表 功能表:每个设备支持 Flutter示例： /// 获取功能表事件号 getFuncTable( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_func_table_user), /// 获取功能表 libManager.send(evt: CmdEvtType.getFuncTable, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 .. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetNoticeStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetNoticeStatus.html","title":"获取通知中心开关","keywords":"","body":"获取通知中心开关 功能表:reminderAncs Flutter示例： /// 获取通知中心的状态事件号 getNoticeStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_notice_status), /// 获取通知中心的状态 libManager.send(evt: CmdEvtType.getNoticeStatus, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 notify_switch int 通知提醒开关85：ble总开关开170：总开关关136：设置子开关187：只开bt（开关）204：ble、bt都开（开关）0：无效 call_switch int 来电子提醒开关 85：开170：关0：无效 notify_item1 int 子应用开关1 每个bit代表一个应用 notify_item2 int 子应用开关2 每个bit代表一个应用 call_delay int 来电提醒延时 单位秒 notify_item3 int 子应用开关3 每个bit代表一个应用 notify_item4 int 子应用开关4 每个bit代表一个应用 notify_item5 int 子应用开关5 每个bit代表一个应用 notify_item6 int 子应用开关6 每个bit代表一个应用 notify_item7 int 子应用开关7 每个bit代表一个应用 notify_item8 int 子应用开关8 每个bit代表一个应用 notify_item9 int 子应用开关9 每个bit代表一个应用 notify_item10 int 子应用开关10 每个bit代表一个应用 msg_all_switch int 消息应用总开关 开：85 关：170 notify_item11 int 子应用开关11 每个bit代表一个应用 notify_item12 int 子应用开关12 每个bit代表一个应用 示例： { \"call_delay\" : 0, \"call_switch\" : 85, \"msg_all_switch\" : 0, \"notify_item1\" : 0, \"notify_item10\" : 0, \"notify_item11\" : 0, \"notify_item12\" : 0, \"notify_item2\" : 0, \"notify_item3\" : 0, \"notify_item4\" : 0, \"notify_item5\" : 0, \"notify_item6\" : 0, \"notify_item7\" : 0, \"notify_item8\" : 0, \"notify_item9\" : 0, \"notify_item10\" : 0, \"notify_switch\" : 85, \"notify_item11\" : 0, \"notify_item12\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetLiveData.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetLiveData.html","title":"获得实时数据","keywords":"","body":"获得实时数据 功能表:getRealtimeData Flutter示例： /// 获得实时数据事件号 getLiveData( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_live_data), /// 获得实时数据 libManager.send(evt: CmdEvtType.getLiveData, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 flag int 0：无功能1：强制打开心率监测2：强制打开血压监测 App收到的json字段： 字段名 字段类型 字段说明 total_step int 总步数 total_calories int 总卡路里 单位大卡 total_distances int 总距离 单位m total_active_time int 总活动时长单位秒 heart_rate int 心率数据单位bpm如果没有心率功能，该值为0 示例： { \"heart_rate\" : 0, \"total_active_time\" : 0, \"total_calories\" : 0, \"total_distances\" : 0, \"total_step\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetErrorRecord.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetErrorRecord.html","title":"获取错误记录","keywords":"","body":"获取错误记录 功能表:getFlashLog Flutter示例： /// 获取错误记录事件号 getErrorRecord( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_error_record), /// 获取错误记录 libManager.send(evt: CmdEvtType.getErrorRecord, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 type int 0 查询1 清除记录 App收到的json字段： 字段名 字段类型 字段说明 type int 0 查询1 清除记录 reset_flag int 0 正常1 硬错误(Hard Faul)2 看门狗服务3 断言复位4 掉电服务5 其他异常 hw_error int 硬件错误码 0 正常1 加速度错误2 心率错误3 TP错误4 flash错误 示例： { \"type\":0, \"reset_flag\":0, \"hw_error\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDataTranConfig.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDataTranConfig.html","title":"获取文件传输配置","keywords":"","body":"获取图标文件传输配置传输 / 获取图片文件传输配置 功能表:getNotifyIconAdaptive Flutter示例： /// 文件传输配置传输获取事件号 getDataTranConfig( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_data_tran_configure), /// 文件传输配置传输获取 libManager.send(evt: CmdEvtType.getDataTranConfig, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 type int 运动类型 对应的图标类型 0：这个字段无效1：运动小图标2：运动大图标3：运动动画 4：运动等大小图标 5：运动最小图标 evt_type int 事件类型0是这个字段无效 比如 1：短信,2：邮件，3：微信 .... sport_type int 运动类型 0是这个字段无效 运动模式类型1 走路,2 跑步.... 示例： { \"type\":1, \"evt_type\":1, \"sport_type\":1 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 错误码 0是正常，非0是错误 type int 运动类型 对应的图标类型 0：这个字段无效1：运动小图标2：运动大图标 3：运动动画 4：运动中等大小图标 evt_type int 事件类型0是这个字段无效 比如 1：短信,2：邮件，3：微信 .... sport_type int 运动类型0是这个字段无效 运动模式类型, 1 走路,2 跑步.... icon_width int 固件图标需要的宽度（根据type 和 evt_type/sport_type 确定） icon_height int 固件图标需要的高度（根据type 和 evt_type/sport_type 确定） format int 颜色格式 block_size int 压缩块大小 big_sports_num int 运动图标大图标个数 msg_num int 消息图标的个数 small_sports_and_animation_num int 运动动画和小图标的个数 medium_num int 运动中等图标个数 示例： { \"err_code\":0, \"type\":1, \"evt_type\":1, \"sport_type\":1, \"icon_width\":50, \"icon_height\":50, \"format\":133, \"block_size\":1024, \"big_sports_num\":5, \"msg_num\":0, \"small_sports_and_animation_num\":0, \"medium_num\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetHIDInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetHIDInfo.html","title":"获取HID信息","keywords":"","body":"获取HID信息 功能表 /// TODO Flutter示例： /// 获取hid信息事件号 getHidInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_hid_info), /// 获取hid信息 libManager.send(evt: CmdEvtType.getHidInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 is_start int 0没有启动1启动成功 示例： { \"is_start\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetGPSInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetGPSInfo.html","title":"获取GPS信息","keywords":"","body":"获取GPS信息 功能表:getSupportUpdateGps Flutter示例： /// 获取gps信息事件号 getGpsInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_gps_info), /// 获取gps信息 libManager.send(evt: CmdEvtType.getGpsInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 err_code int GPS是否错误0正常 非0异常 fw_version int GPS固件版本 agps_info int AGPS有效期 agps_err_code int AGPS错误值 utc_year int utc时间 年 utc_month int utc时间 月 utc_day int utc时间 日 utc_hour int utc时间 时 utc_minute int utc时间 分 start_mode int 启动模式1 冷启动2 热启动 gns int 定位星选择1 GPS2 GLONASS3 GPS + GLONASS fix_start_bit int 修正标识位默认0 用于调试 示例： { \"err_code\":0, \"fw_version\":512, \"agps_info\":0, \"agps_err_code\":0, \"utc_year\":0, \"utc_month\":0, \"utc_day\":0, \"utc_hour\":0, \"utc_minute\":0, \"start_mode\":2, \"gns\":0, \"fix_start_bit\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetGPSStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetGPSStatus.html","title":"获取GPS状态","keywords":"","body":"获取GPS状态 功能表:getSupportUpdateGps Flutter示例： /// 获取gps状态事件号 getGpsStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_gps_status), /// 获取gps状态 libManager.send(evt: CmdEvtType.getGpsStatus, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 gps_run_status int GPS 运行状态 0 没有运行1 正在搜星2 为正在跟踪 agps_is_valid int agps 是否有效 有效期剩余小时非0为有效 示例： { \"gps_run_status\":0, \"agps_is_valid\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetVersionInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetVersionInfo.html","title":"获取版本信息","keywords":"","body":"获取版本信息 功能表:getVersionInfo Flutter示例： /// 获取版本信息事件号 getVersionInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_version_info), /// 获取版本信息 libManager.send(evt: CmdEvtType.getVersionInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 sdk_version int hr_algorithm_version int 心率算法版本 sleep_algorithm_version int 睡眠算法版本 step_algorithm_version int 计步算法版本 gesture_recognition_version int 手势识别算法版本 pcb_version int PCB 版本 数值为x10,11表示1.1的版本 spo2_version int 穿戴版本 wear_version int 血氧算法版本 stress_version int 压力算法版本 kcal_version int 卡路里算法版本 dis_version int 距离算法版本 axle3_swim_version int 三轴传感器游泳算法版本 axle6_swim_version int 六轴传感器游泳算法版本 act_mode_type_version int 运动自识别算法版本 all_day_hr_version int 全天心率算法版本 gps_version int gps算法版本 peripherals_version int 外设版本 206定制项目外设版本 示例： { \"act_mode_type_version\" : 10, \"all_day_hr_version\" : 45, \"axle3_swim_version\" : 19, \"axle6_swim_version\" : 19, \"dis_version\" : 4, \"gesture_recognition_version\" : 33, \"gps_version\" : 0, \"hr_algorithm_version\" : 45, \"kcal_version\" : 5, \"pcb_version\" : 1, \"peripherals_version\" : 0, \"sdk_version\" : 15, \"sleep_algorithm_version\" : 1, \"spo2_version\" : 24, \"step_algorithm_version\" : 25, \"stress_version\" : 4, \"wear_version\" : 22 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDoNotDisturb.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDoNotDisturb.html","title":"获取勿扰模式状态","keywords":"","body":"获取勿扰模式状态 功能表:getDoNotDisturbMain3 Flutter示例： /// 获取勿扰模式状态事件号 getNotDisturbStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_do_not_disturb), /// 获取勿扰模式状态 libManager.send(evt: CmdEvtType.getNotDisturbStatus, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 switch_flag int 开关状态170 开启85 关闭 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 have_time_range int 是否有时间范围 0 无效1 表示无时间范围2 表示有时间范围 week_repeat int 重复bit0无效(bit1 - bit7) 对于星期1到星期天 noontime_rest_on_off int 午休开关免提醒开关170 开启85 关闭 noontime_rest_start_hour int 提醒开始时间 时 noontime_rest_start_minute int 提醒开始时间 分 noontime_rest_end_hour int 提醒结束时间 时 noontime_rest_end_minute int 提醒结束时间 分 all_day_on_off int 全天勿扰开关170 开启85 关闭 intelligent_on_off int 智能勿扰开关170 开启85 关闭 示例： { \"all_day_on_off\" : 0, \"end_hour\" : 7, \"end_minute\" : 0, \"have_time_range\" : 0, \"intelligent_on_off\" : 0, \"noontime_rest_end_hour\" : 7, \"noontime_rest_end_minute\" : 0, \"noontime_rest_on_off\" : 85, \"noontime_rest_start_hour\" : 22, \"noontime_rest_start_minute\" : 0, \"start_hour\" : 22, \"start_minute\" : 0, \"switch_flag\" : 85, \"week_repeat\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetMtuInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetMtuInfo.html","title":"获取MTU信息","keywords":"","body":"获取mtu信息 功能表:getMtu Flutter示例： /// 获取mtu信息事件号 getMtuInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_mtu_info), /// 获取mtu信息 libManager.send(evt: CmdEvtType.getMtuInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 status int 0 表示数据有效1 表示数据无效,等一会儿再获取,数据无效的情况下,mtu 都是20 rx_mtu int app接收mtu tx_mtu int app发送mtu phy_speed int 物理层速度0 为无效1000 为1M2000 为2M512为512K dle_length int DLE长度0表示不支持 示例： { \"dle_length\" : 27, \"phy_speed\" : 285, \"rx_mtu\" : 132, \"status\" : 0, \"tx_mtu\" : 132 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDefaultSportType.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDefaultSportType.html","title":"获取默认的运动类型","keywords":"","body":"获取默认的运动类型 功能表:setV3GetSportSortField Flutter示例： /// 获取默认的运动类型事件号 getDefaultSportType( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_default_sport_type), /// 获取默认的运动类型 libManager.send(evt: CmdEvtType.getDefaultSportType, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 default_show_num int 默认显示的数量 min_show_num int 最小支持的数量 max_show_num int 最大支持的数量 is_supports_sort int 是否支持默认排序0 不支持1 支持 sport_types 集合 运动类型列表集合 type的集合 字段名 字段类型 字段说明 type int [8] 运行类型is_supports_sort=1时有效, 最大个数8个空位填0 示例： { \"default_show_num\" : 27, \"min_show_num\" : 285, \"max_show_num\" : 132, \"is_supports_sort\" : 0, \"sport_types\":[ { \"type\":1 }, { \"type\":2 }, { \"type\":3 }, { \"type\":4 }, { \"type\":5 }, { \"type\":6 }, { \"type\":7 }, { \"type\":8 }] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDownloadLanguage.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDownloadLanguage.html","title":"获取下载语言支持","keywords":"","body":"获取下载语言支持 功能表:getDownloadLanguage Flutter示例： /// 获取下载语言支持事件号 getDownLanguage( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_down_language), /// 获取下载语言支持 libManager.send(evt: CmdEvtType.getDownLanguage, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 use_lang int 当前使用的语言 default_lang int 默认语言 fixed_lang int 固定存储语言个数 max_storage_lang int 最大存储语言 lang_array 集合 已经存储语言值列表集合 value的集合 字段名 字段类型 字段说明 value int [14] 已经存储语言值前default_fixed_lang返回是固件固定的，遇0结束 示例： { \"use_lang\" : 27, \"default_lang\" : 285, \"fixed_lang\" : 132, \"max_storage_lang\" : 0, \"lang_array\":[ { \"type\":1 }, { \"type\":2 }, { \"type\":3 }, { \"type\":4 }, { \"type\":5 }, { \"type\":6 }, { \"type\":7 }, { \"type\":8 }] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetBattInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetBattInfo.html","title":"获取电池信息","keywords":"","body":"获取电池信息 功能表:getBatteryInfo Flutter示例： /// 获取电池信息事件号 getBatteryInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_batt_info), /// 获取电池信息 libManager.send(evt: CmdEvtType.getBatteryInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 type int 电池类型：0：可充电锂电池， 1：纽扣电池 voltage int 电量 status int 电池状态0：正常1：正在充电2：充电完成3：低电量 level int 等级 last_charging_year int 最后一次充电时间 年 last_charging_month int 最后一次充电时间 月 last_charging_day int 最后一次充电时间 日 last_charging_hour int 最后一次充电时间 时 last_charging_minute int 最后一次充电时间 分 last_charging_second int 最后一次充电时间 秒 mode int 0：无效1：正常模式（非省电模式） 2：省电模式 示例： { \"last_charging_day\" : 0, \"last_charging_hour\" : 158, \"last_charging_minute\" : 66, \"last_charging_month\" : 0, \"last_charging_second\" : 0, \"last_charging_year\" : 0, \"level\" : 100, \"mode\" : 0, \"status\" : 0, \"type\" : 0, \"voltage\" : 4317 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetFlashBinInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetFlashBinInfo.html","title":"获取字库信息","keywords":"","body":"获取字库信息 功能表:getFlashLog Flutter示例： /// 获取字库信息事件号 getFlashBinInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_flash_bin_info), /// 获取字库信息 libManager.send(evt: CmdEvtType.getFlashBinInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 status int 状态 0正常,1 字库无效 校验错误,2 版本不匹配 version int 版本号 match_version int 匹配版本号,就是固件需要的字库版本号 check_code int 字库校验码 示例： { \"check_code\" : 1211171869, \"match_version\" : 13, \"status\" : 0, \"version\" : 13 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetMenuList.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetMenuList.html","title":"获取设备支持的菜单列表","keywords":"","body":"获取设备支持的菜单列表 功能表:getMenuList Flutter示例： /// 获取设备支持的列表事件号 getMenuList( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_menu_list), /// 获取设备支持的列表 libManager.send(evt: CmdEvtType.getMenuList, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 min_show_num int 最小显示个数 max_show_num int 最大显示个数 max_num int 目前列表最大个数 current_show_num int 设备当前显示的列表个数 items 集合 设备当前显示的列表详情index & value的集合 字段名 字段类型 字段说明 index int 序号0开始 最大值13 value int 类型0 无效1 步数2 心率3 睡眠4 拍照5 闹钟6 音乐 7 秒表 8 计时器9 运动模式10 天气11 呼吸锻炼12 查找手机13 压力14 数据三环15 时间界面 16 最近一次活动 17 健康数据 18 血氧 19 菜单设置 20 (20)aleax语音依次显示 21 X屏（gt01pro-X新增）22 卡路里 （Doro Watch新增）23 距离 （Doro Watch新增）24 一键测量 (IDW05新增) 25 renpho health(润丰健康)(IDW12新增) 26 指南针 (mp01新增) 27 气压高度计(mp01新增) 示例： { \"current_show_num\" : 5, \"items\" : [ { \"index\" : 0, \"value\" : 17 }, { \"index\" : 1, \"value\" : 2 }, { \"index\" : 2, \"value\" : 13 }, { \"index\" : 3, \"value\" : 16 }, { \"index\" : 4, \"value\" : 20 }, { \"index\" : 5, \"value\" : 6 }, { \"index\" : 6, \"value\" : 10 } ], \"max_num\" : 7, \"max_show_num\" : 7, \"min_show_num\" : 2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetScreenBrightness.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetScreenBrightness.html","title":"获取屏幕亮度","keywords":"","body":"获取屏幕亮度 功能表:getScreenBrightnessMain9 Flutter示例： /// 获取屏幕亮度事件号 getScreenBrightness( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_screen_brightness), /// 获取屏幕亮度 libManager.send(evt: CmdEvtType.getScreenBrightness, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 level int 亮度等级(0-100) opera int 0 自动1 手动 如果是自动同步配置,请发送00,如果是用户调节请发送01 mode int 0 指定等级1 使用环境光传感器2 level不起作用 auto_adjust_night int 夜间自动亮度调整 0 无效,由固件定义1 关闭2 夜间自动调整亮度3 夜间降亮度使用设置的时间 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 night_level int 夜间亮度 show_interval int 显示间隔 示例： { \"auto_adjust_night\" : 1, \"end_hour\" : 6, \"end_minute\" : 0, \"level\" : 60, \"mode\" : 0, \"night_level\" : 0, \"opera\" : 1, \"show_interval\" : 5, \"start_hour\" : 19, \"start_minute\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetUpHandGesture.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetUpHandGesture.html","title":"获取抬腕数据","keywords":"","body":"获取抬腕数据 功能表:getUpHandGestureEx Flutter示例： /// 获取抬腕数据事件号 getUpHandGesture( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_up_hand_gesture), /// 获取抬腕数据 libManager.send(evt: CmdEvtType.getUpHandGesture, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 on_off int 开关170 开85 关 show_second int 亮屏时间 单位秒 has_time_range int 是否有时间范围,1 有0 没有 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 示例： { \"end_hour\" : 0, \"end_minute\" : 0, \"has_time_range\" : 0, \"on_off\" : 170, \"show_second\" : 5, \"start_hour\" : 0, \"start_minute\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetUpdateStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetUpdateStatus.html","title":"获取设备升级状态","keywords":"","body":"获取设备升级状态 功能表:getDeviceUpdateState Flutter示例： /// 获取设备升级状态事件号 getUpdateStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_update_state), /// 获取设备升级状态 libManager.send(evt: CmdEvtType.getUpdateStatus, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 dev_vesion int 固件版本号 state int 0是正常状态1是升级状态 示例： { \"dev_vesion\":0, \"state\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDevicesLogStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetDevicesLogStatus.html","title":"获取设备的日志状态","keywords":"","body":"获取设备的日志状态 功能表:getDeviceLogState Flutter示例： /// 获取设备的日志状态事件号 getDeviceLogState( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_devices_log_state), /// 获取设备的日志状态 libManager.send(evt: CmdEvtType.getDeviceLogState, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 type int 0：没有对应的日志产生 1：固件重启log（100- 200）2：固件异常（0-100） err_code int 固件重启log错误码 0正常 示例： { \"err_code\":4, \"type\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetMainSportGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetMainSportGoal.html","title":"获取设置的卡路里/距离/中高运动时长(日常三环)","keywords":"","body":"获取设置的卡路里/距离/中高运动时长 功能表:setMidHighTimeGoal Flutter示例： /// 获取设置的卡路里/距离/中高运动时长事件号 getMainSportGoal( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_main_sport_goal), /// 获取设置的卡路里/距离/中高运动时长 libManager.send(evt: CmdEvtType.getMainSportGoal, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 time_goal_type int 0：无效 1：日目标 2：周目标 需要固件开启功能表 V2_support_set_get_time_goal_type App收到的json字段： 字段名 字段类型 字段说明 calorie int 活动卡路里目标 单位千卡 distance int 距离 单位米 calorie_min int 活动卡路里最小值 calorie_max int 活动卡路里最大值 mid_high_time_goal int 中高运动时长的目标 单位秒 walk_goal_time int 目标时间 需要固件开启功能表V3_support_get_main_sport_goal time_goal_type int 0：无效 1：日目标 2：周目标需要固件开启功能表 V2_support_set_get_time_goal_type 示例： { \"calorie\" : 4, \"distance\" : 200, \"calorie_min\" : 101, \"calorie_max\" : 500, \"mid_high_time_goal\" : 1, \"walk_goal_time\" : 1, \"time_goal_type\" : 1, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetWalkReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetWalkReminder.html","title":"获取走动提醒","keywords":"","body":"获取走动提醒 功能表:getWalkReminderV3 Flutter示例： /// 获取走动提醒事件号 getWalkRemind( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_walk_reminder), /// 获取走动提醒 libManager.send(evt: CmdEvtType.getWalkRemind, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 on_off int 0 关1 开 goal_step int 目标步数 废弃 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 repeat int 重复bit1-bit7 周一到周日， bit 0是总开关位（开关） goal_time int 目标时间 废弃 notify_flag int 通知类型 0：无效 1：允许通知2：静默通知3：关闭通知需要固件开启功能表V3_walk_reminder_add_notify_flag do_not_disturb_on_off int 免提醒开关0 关 1开需要固件开启功能表v2_support_set_get_no_reminder_on_walk_reminder no_disturb_start_hour int 免提醒开始时间 时需要固件开启功能表v2_support_set_get_no_reminder_on_walk_reminder no_disturb_start_minute int 免提醒开始时间 分需要固件开启功能表v2_support_set_get_no_reminder_on_walk_reminder no_disturb_end_hour int 免提醒结束时间 时需要固件开启功能表v2_support_set_get_no_reminder_on_walk_reminder no_disturb_end_minute int 免提醒结束时间 分需要固件开启功能表v2_support_set_get_no_reminder_on_walk_reminder 示例： { \"on_off\" : 0, \"goal_step\" : 0, \"start_hour\" : 18, \"start_minute\" : 0, \"end_hour\" : 23, \"end_minute\" : 0, \"repeat\" : 127, \"goal_time\" : 0, \"notify_flag\" : 2, \"do_not_disturb_on_off\" : 0, \"no_disturb_start_hour\" : 0, \"no_disturb_start_minute\" : 0, \"no_disturb_end_hour\" : 0, \"no_disturb_end_minute\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetAllHealthSwitchState.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetAllHealthSwitchState.html","title":"获取所有的健康监测开关","keywords":"","body":"获取所有的健康监测开关 功能表:getHealthSwitchStateSupportV3 Flutter示例： /// 获取所有的健康监测开关事件号 getAllHealthSwitchState( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_all_health_switch_state), /// 获取所有的健康监测开关 libManager.send(evt: CmdEvtType.getAllHealthSwitchState, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 heart_mode int 连续测量心率开关 170是开，85是关 pressure_mode int 压力自动检测开关 170是开，85是关 spo2_mode int 血氧自动检测开关 170是开，85是关 science_mode int 科学睡眠开关 170（科学睡眠）,85(普通睡眠) temperature_mode int 夜间体温开关 170是开，85是关 noise_mode int 噪声开关 170是开，85是关 menstrual_mode int 生理周期开关 170是开，85是关 walk_mode int 走动提醒开关 170是开，85是关 handwashing_mode int 洗手提醒开关 170是开，85是关 drinkwater_mode int 喝水提醒开关 170是开，85是关 heartmode_notify_flag int 心率通知状态类型 0无效 1：允许通知2：静默通知3：关闭通知 pressure_notify_flag int 压力通知状态类型 0无效 1：允许通知2：静默通知3：关闭通知 spo2_notify_flag int 血氧通知状态类型 0无效 1：允许通知2：静默通知3：关闭通知 menstrual_notify_flag int 生理周期通知状态类型 0无效 1：允许通知2：静默通知3：关闭通知 guidance_notify_flag int 健身指导通知状态类型 0无效 1：允许通知2：静默通知3：关闭通知 reminder_notify_flag int 提醒事项通知状态类型 0无效 1：允许通知2：静默通知3：关闭通知 respir_rate_state int 呼吸率开关 85：关闭 170：开 body_power_state int 身体电量开关 85：关闭 170：开 示例： { \"heart_mode\" : 85, \"pressure_mode\" : 85, \"spo2_mode\" : 85, \"science_mode\" : 85, \"temperature_mode\" : 85, \"noise_mode\" : 85, \"menstrual_mode\" : 85, \"walk_mode\" : 85, \"handwashing_mode\" : 85, \"drinkwater_mode\" : 85, \"heartmode_notify_flag\" : 0, \"pressure_notify_flag\" : 0, \"spo2_notify_flag\" : 0, \"menstrual_notify_flag\" : 0, \"guidance_notify_flag\" : 0, \"reminder_notify_flag\" : 0, \"respir_rate_state\" : 0, \"body_power_state\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetActivitySwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetActivitySwitch.html","title":"获取运动模式自动识别开关","keywords":"","body":"获取运动模式自动识别开关 功能表:getActivitySwitch Flutter示例： /// 运动模式自动识别开关获取事件号 getActivitySwitch( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_activity_switch), /// 运动模式自动识别开关获取 libManager.send(evt: CmdEvtType.getActivitySwitch, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 err_code int 0是成功非0 是错误 auto_identify_sport_walk int 自动识别走路开关 0 关闭,1 开 auto_identify_sport_run int 自动识别跑步开关 0 关闭,1 开 auto_identify_sport_bicycle int 自动识别自行车开关 0 关闭,1 开 auto_pause_on_off int 运动自动暂停 0 关闭,1 开 auto_end_remind_on_off_on_off int 结束提醒 0 关闭,1 开 auto_identify_sport_elliptical int 自动识别椭圆机开关 0 关闭,1 开 auto_identify_sport_rowing int 自动识别划船机开关 0 关闭,1 开 auto_identify_sport_swim Int 自动识别游泳开关 0 关闭,1 开 示例： { \"err_code\":0, \"auto_identify_sport_walk\":0, \"auto_identify_sport_run\":0, \"auto_identify_sport_bicycle\":0, \"auto_pause_on_off\":0, \"auto_end_remind_on_off_on_off\":0, \"auto_identify_sport_elliptical\":0, \"auto_identify_sport_rowing\":0, \"auto_identify_sport_swim\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetFirmwareBtVersion.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetFirmwareBtVersion.html","title":"获得固件三级版本和BT的3级版本","keywords":"","body":"获得固件三级版本和BT的3级版本 功能表:getBleAndBtVersion Flutter示例： /// 获得固件三级版本和bt的3级版本事件号 getFirmwareBtVersion( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_get_firmware_bt_version), /// 获得固件三级版本和bt的3级版本 libManager.send(evt: CmdEvtType.getFirmwareBtVersion, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 firmware_version1 int 固件版本version1 firmware_version2 int 固件版本version2 firmware_version3 int 固件版本version3 BT_flag int BT版本生效标志位0：无效1：说明固件有对应的BT固件 BT_version1 int BT的版本version1 BT_version2 int BT的版本version2 BT_version3 int BT的版本version3 BT_match_version1 int BT的所需要匹配的版本version1 BT_match_version2 int BT的所需要匹配的版本version2 BT_match_version3 int BT的所需要匹配的版本version3 示例： { \"BT_flag\" : 1, \"BT_match_version1\" : 2, \"BT_match_version2\" : 0, \"BT_match_version3\" : 7, \"BT_version1\" : 2, \"BT_version2\" : 0, \"BT_version3\" : 9, \"firmware_version1\" : 2, \"firmware_version2\" : 0, \"firmware_version3\" : 6 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetBpAlgVersion.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetBpAlgVersion.html","title":"获取血压算法三级版本号信息","keywords":"","body":"获取血压算法三级版本号信息 功能表:setSupportV3Bp Flutter示例： /// 获取血压算法三级版本号信息事件号 getBpAlgVersion( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_bp_alg_version), /// 获取血压算法三级版本号信息 libManager.send(evt: CmdEvtType.getBpAlgVersion, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 三级版本号拼接：version1.version2.version3 bp_version_1 int 固件血压算法版本version1 bp_version_2 int 固件血压算法版本version2 bp_version_3 int 固件血压算法版本version3 示例： { \"bp_version_1\":0, \"bp_version_2\":0, \"bp_version_3\":6 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetSupportMaxSetItemNum.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetSupportMaxSetItemNum.html","title":"获取固件支持的详情最大设置数量","keywords":"","body":"获取固件支持的详情最大设置数量 功能表:getSetMaxItemsNum Flutter示例： /// 获取固件支持的详情最大设置数量事件号 getSupportMaxSetItemsNum( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_support_max_set_items_num ), /// 获取固件支持的详情最大设置数量 libManager.send(evt: CmdEvtType.getSupportMaxSetItemsNum, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 contact_max_set_num int 常用联系人 固件支持app下发最大设置数量 0默认10个 reminder_max_set_num int 日程提醒 固件支持app下发最大设置数量 msg_max_buff_size int 消息提醒最大发送缓存大小 0默认250字节 示例： { \"contact_max_set_num\":0, \"reminder_max_set_num\":0, \"msg_max_buff_size\":300, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetUndeletableMenuList.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetUndeletableMenuList.html","title":"获取固件不可删除的快捷应用列表","keywords":"","body":"获取固件不可删除的快捷应用列表 功能表:getDeletableMenuListV2 Flutter示例： /// 获取固件不可删除的快捷应用列表事件号 getUnerasableMeunList( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_undeleteable_meun_list ), /// 获取固件不可删除的快捷应用列表 libManager.send(evt: CmdEvtType.getUnerasableMeunList, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 num int 列表详情个数 最大个数10 item_list int [10] 不可删除的应用列表0 无效1 步数2 心率3 睡眠4 拍照5 闹钟6 音乐7 秒表8 计时器9 运动模式10 天气11 呼吸锻炼12 查找手机13 压力14 数据三环15 时间界面16 最近一次活动17 健康数据18 血氧 19 菜单设置20 (20)aleax语音依次显示21 X屏（gt01pro-X新增）22 卡路里 （Doro Watch新增）23 距离 （Doro Watch新增）24 一键测量 (IDW05新增)25 renpho health(润丰健康)(IDW12新增) 26 指南针 (mp01新增) 27 气压高度计(mp01新增) 示例： { \"num\":4, \"item_list\":[ 1, 2, 3, 4 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetUnreadAppONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetUnreadAppONOFF.html","title":"获取固件红点提示开关状态","keywords":"","body":"获取固件红点提示开关状态 功能表:TODO Flutter示例： /// 获取红点提醒开关事件号 getUnreadAppReminder( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_unread_app_onoff ), /// 获取红点提醒开关 libManager.send(evt: CmdEvtType.getUnreadAppReminder, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 on_off int 开关状态 170：打开 85：关闭 示例： { \"on_off\":85 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetBtStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetBtStatus.html","title":"查询获取bt配对开关、连接、a2dp连接、hfp连接状态","keywords":"","body":"查询获取bt配对开关、连接、a2dp连接、hfp连接状态(仅支持带bt蓝牙的设备) 功能表:getBleAndBtVersion Flutter示例： /// 查询bt配对开关、连接、a2dp连接、hfp连接状态(仅支持带bt蓝牙的设备)事件号 getBtNotice( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_set_bt_notice), /// 查询bt配对开关、连接、a2dp连接、hfp连接状态(仅支持带bt蓝牙的设备) libManager.send(evt: CmdEvtType.getBtNotice, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 bt_connect_states int 85：bt连接状态开170：bt连接状态关0：无效 bt_pair_states int 85：bt配对状态开170：bt配对状态关0：无效 a2dp_connect_states int 85：a2dp连接状态开170：a2dp连接状态关0：无效 hfp_connect_states int 85：hfp连接状态开170：hfp连接状态关0：无效 示例： { \"bt_connect_states\":85, \"bt_pair_states\":85, \"a2dp_connect_states\":85, \"hfp_connect_states\":85 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetContactReviceTime.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetContactReviceTime.html","title":"获取固件本地保存联系人文件修改时间","keywords":"","body":"获取固件本地保存联系人文件修改时间 功能表:TODO Flutter示例： /// 获取固件本地保存联系人文件修改时间事件号 getContactReviseTime( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_contact_revice_time ), /// 获取固件本地保存联系人文件修改时间 libManager.send(evt: CmdEvtType.getContactReviseTime, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 result int 0：不需要下发联系人文件 1：需要下发联系人数据 示例： { \"result\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetHRMode.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetHRMode.html","title":"获取心率监测模式","keywords":"","body":"获取心率监测模式 功能表:getHeartRateModeV2 Flutter示例： /// 获取心率监测模式事件号 getHeartRateMode( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_heart_rate_mode), /// 获取心率监测模式 libManager.send(evt: CmdEvtType.getHeartRateMode, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 mode int 170：手动模式85：关闭136：自动153：持续监测 has_time_range int 是否有时间区间 0 无,1 有 start_hour int 开始时间 时 start_minute int 开始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 measurement_interval int 测量间隔单位分钟 示例： { \"mode\":85, \"has_time_range\":0, \"start_hour\":9, \"start_minute\":0, \"end_hour\":12, \"end_minute\":0, \"measurement_interval\":15 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetStepGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV2GetEvt/IDOGetStepGoal.html","title":"获取全天步数目标","keywords":"","body":"获取全天步数目标 功能表:getStepDataTypeV2 Flutter示例： /// 获取全天步数目标事件号 getStepGoal( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_step_goal), /// 获取全天步数目标 libManager.send(evt: CmdEvtType.getStepGoal, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 step int 全天步数日目标 step_week int 全天步数周目标v2_support_set_step_data_type_03_03开启 有效 示例： { \"step\":2000, \"step_week\":6000 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/IDOOtaEvtIntroduction.html":{"url":"doc/IDOOtaEvtIntroduction.html","title":"OTA Instruction Event","keywords":"","body":"{OTA Event} Function Enter Upgrade Mode Directly Enter Upgrade Mode (Ignore Battery) Set OTA Authorization Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOOtaEvt/IDOOtaStart.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOOtaEvt/IDOOtaStart.html","title":"进入升级模式","keywords":"","body":"进入升级模式 Flutter示例： /// 进入升级模式事件号 otaStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_ota_start), /// 进入升级模式 libManager.send(evt: CmdEvtType.otaStart, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 err_flag int 0: 进入OTA成功 1: 失败：电量过低 2: 失败：设备不支持 3: 失败：参数不正确 示例： { \"err_flag\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOOtaEvt/IDOOtaDirectStart.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOOtaEvt/IDOOtaDirectStart.html","title":"直接进入升级模式(忽略电量)","keywords":"","body":"直接进入升级模式(忽略电量) Flutter示例： /// 直接进入升级模式(忽略电量)事件号 otaDirectStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_ota_direct_start), /// 直接进入升级模式(忽略电量) libManager.send(evt: CmdEvtType.otaDirectStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOOtaEvt/IDOOtaAuth.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOOtaEvt/IDOOtaAuth.html","title":"设置OTA授权","keywords":"","body":"设置ota授权 Flutter示例： /// ota授权事件号 otaAuth( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_ota_auth), /// ota授权 libManager.send(evt: CmdEvtType.otaAuth, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 device_id int 设备ID version int 版本0 表示不进行版本校验,用于不能降级的约束,默认0 示例： { \"device_id\":0, \"version\":0 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 错误码0：校验成功1：ID号校验失败2：版本号校验失败3：电量不足4：其他错误 示例： { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/IDOControlEvtIntroduction.html":{"url":"doc/IDOControlEvtIntroduction.html","title":"APP Initiated Notification/Control Event","keywords":"","body":"{APP Initiates Notification/Control Event} Function Control Device Reboot Control Device Disconnection Clear Binding Information Control Device Shutdown Control Device Factory Reset Control Clear Band Cache Send Call Time to Firmware Control Music Start Control Music Stop Control Photo Taking Start Control Photo Taking Stop Control Find Phone Start Control Find Phone Stop Control Open ANCS Start Control Open ANCS Stop APP Transmits Sports Icon Information and Status to the Firmware APP Notifies Firmware to Enable BT Broadcast APP Notifies Firmware of the Permission Status of Certain Functions Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlReboot.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlReboot.html","title":"控制设备重启","keywords":"","body":"控制设备重启 Flutter示例： /// 重启设备事件号 reboot(evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_reboot), /// 重启设备 libManager.send(evt: CmdEvtType.reboot, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlDisconnect.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlDisconnect.html","title":"控制设备断线","keywords":"","body":"控制设备断线 Flutter示例： /// 控制断线事件号 controlDisconnect( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_control_disconnect), /// 控制断线 libManager.send(evt: CmdEvtType.controlDisconnect, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlCleanBindInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlCleanBindInfo.html","title":"清除绑定信息","keywords":"","body":"清除绑定信息 Flutter示例： /// 清除绑定信息事件号 cleanBindInfo( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_clean_bond_info), /// 清除绑定信息 libManager.send(evt: CmdEvtType.cleanBindInfo, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlShutdown.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlShutdown.html","title":"控制关闭设备","keywords":"","body":"控制关闭设备 Flutter示例： /// 关闭设备事件号 shutdown( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_shutdown), /// 关闭设备 libManager.send(evt: CmdEvtType.shutdown, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlRestoreFazctory.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlRestoreFazctory.html","title":"控制设备恢复出厂","keywords":"","body":"控制设备恢复出厂 Flutter示例： /// 恢复出厂设置事件号 factoryReset( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_restore_fazctory), /// 恢复出厂设置 libManager.send(evt: CmdEvtType.factoryReset, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 is_success int 1：成功 0：失败 示例： { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlClearCache.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlClearCache.html","title":"控制清除手环缓存","keywords":"","body":"控制清除手环缓存 Flutter示例： /// 清除手环缓存事件号 clearCache( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_clear_cache), /// 清除手环缓存 libManager.send(evt: CmdEvtType.clearCache, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 is_success int 1：成功 0：失败 示例： { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlNoticeCallTime.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlNoticeCallTime.html","title":"下发通话时间给固件","keywords":"","body":"下发通话时间给固件 Flutter示例： /// 来电接通完成后下发通话时间给固件事件号 setNoticeCallTime( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_notice_call_time), /// 来电接通完成后下发通话时间给固件 libManager.send(evt: CmdEvtType.setNoticeCallTime, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 sec int 通话时间 单位秒 示例： { \"sec\":30 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 0：成功1：失败 参数不正确 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlMusicStart.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlMusicStart.html","title":"控制音乐开始","keywords":"","body":"控制音乐开始 Flutter示例： /// 控制音乐开始事件号 musicStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_music_start), /// 控制音乐开始 libManager.send(evt: CmdEvtType.musicStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlMusicStop.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlMusicStop.html","title":"控制音乐停止","keywords":"","body":"控制音乐停止 Flutter示例： /// 控制音乐停止事件号 musicStop( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_music_stop), /// 控制音乐停止 libManager.send(evt: CmdEvtType.musicStop, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlPhotoStart.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlPhotoStart.html","title":"控制拍照开始","keywords":"","body":"控制拍照开始 Flutter示例： /// 开始拍照 (app -> ble)事件号 photoStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_photo_start), /// 开始拍照 (app -> ble) libManager.send(evt: CmdEvtType.photoStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlPhotoStop.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlPhotoStop.html","title":"控制拍照停止","keywords":"","body":"控制拍照停止 Flutter示例： /// 结束拍照 (app -> ble)事件号 photoStop( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_photo_stop), /// 结束拍照 (app -> ble) libManager.send(evt: CmdEvtType.photoStop, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlFindDeviceStart.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlFindDeviceStart.html","title":"控制寻找设备开始","keywords":"","body":"控制寻找设备开始 Flutter示例： /// 寻找设备开始 (app -> ble)事件号 findDeviceStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_find_device_start), /// 寻找设备开始 (app -> ble) libManager.send(evt: CmdEvtType.findDeviceStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlFindDeviceStop.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlFindDeviceStop.html","title":"控制寻找设备停止","keywords":"","body":"控制寻找设备停止 Flutter示例： /// 结束寻找设备 (app -> ble)事件号 findDeviceStop( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_find_device_stop), /// 结束寻找设备 (app -> ble) libManager.send(evt: CmdEvtType.findDeviceStop, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlOpenANCS.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlOpenANCS.html","title":"控制打开ANCS开始","keywords":"","body":"控制打开ancs开始 Flutter示例： /// 打开ancs事件号 openAncs( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_open_ancs), /// 打开ancs libManager.send(evt: CmdEvtType.openAncs, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlCloseANCS.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlCloseANCS.html","title":"控制打开ANCS停止","keywords":"","body":"控制打开ancs停止 Flutter示例： /// 关闭ancs事件号 closeAncs( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_close_ancs), /// 关闭ancs libManager.send(evt: CmdEvtType.closeAncs, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlNoticeIconInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlNoticeIconInfo.html","title":"APP传输运动图标信息及状态通知固件","keywords":"","body":"APP传输运动图标信息及状态通知固件 Flutter示例： /// app传输运动图标信息及状态通知固件事件号 setNoticeIconInformation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_notcie_icon_informationg ), /// app传输运动图标信息及状态通知固件 libManager.send(evt: CmdEvtType.setNoticeIconInformation, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 states int 0：开始传输 16：结束传输 icon_num int 图标传输数量 示例： { \"states\":0, \"icon_num\":0 } App收到的json字段： 字段名 字段类型 字段说明 status int 成功：0 失败：1 示例： { \"states\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlNoticeOpenBroadcast.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlNoticeOpenBroadcast.html","title":"APP通知固件开启BT广播","keywords":"","body":"APP通知固件开启bt广播 Flutter示例： /// app通知固件开启bt广播事件号 setNoticeOpenBroadcastn( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_notcie_open_broadcast ), /// app通知固件开启bt广播 libManager.send(evt: CmdEvtType.setNoticeOpenBroadcastn, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 err_code int 成功：0 失败：1 示例： { \"err_code\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlNoticeDisableFunction.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOControlEvt/IDOControlNoticeDisableFunction.html","title":"APP通知固件某些功能的权限状态","keywords":"","body":"APP通知固件某些功能的权限状态 Flutter示例： /// app被禁用功能权限导致某些功能无法启用，同时需要告知固件改功能已被禁用 setNoticeDisableFunc( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_notcie_disable_func ), /// app被禁用功能权限导致某些功能无法启用，同时需要告知固件改功能已被禁用 libManager.send(evt: CmdEvtType.setNoticeDisableFunc, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 type int 0：相机权限 enable int 170：启用 85：关闭 示例： { \"type\":0, \"enable\":85 } App收到的json字段： 字段名 字段类型 字段说明 status_code int 成功：0 失败：1 示例： { \"status_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/IDODeviceControlEvtIntroduction.html":{"url":"doc/IDODeviceControlEvtIntroduction.html","title":"Device-initiated Notification/Control Event","keywords":"","body":"{Device Notification/Control Event} Function Device Control: Start Music Device Control: Pause Music Device Control: Stop Music Device Control: Previous Music Device Control: Next Music Device Control: Take Photo (Single Shot) Device Control: Take Photo (Burst) Device Control: Volume Up Device Control: Volume Down Device Control: Open Camera Device Control: Close Camera Device Control: Answer Call Device Control: Reject Call Device Control: Set Music Volume (Percentage) Device Control: Start Find Phone Device Control: Stop Find Phone Device Notification: Enable Anti-Lost Device Notification: Start SOS Call Device Notification: Sensor Data Device Notification: Operation Type Device Notification: Data Update Device Request: Version Check Device Request: OTA Device Notification: SMS Device Control: Camera Device Notification: Firmware Speaker Volume Modification (Alexa) Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlMusicStart.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlMusicStart.html","title":"设备控制APP音乐开始","keywords":"","body":"设备控制APP音乐开始 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlMusicPause.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlMusicPause.html","title":"设备控制APP音乐暂停","keywords":"","body":"设备控制APP音乐暂停 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlMusicStop.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlMusicStop.html","title":"设备控制APP音乐停止","keywords":"","body":"设备控制APP音乐停止 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlMusicLast.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlMusicLast.html","title":"设备控制APP音乐上一首","keywords":"","body":"设备控制APP音乐上一首 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlMusicNext.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlMusicNext.html","title":"设备控制APP音乐下一首","keywords":"","body":"设备控制APP音乐下一首 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlPhotoSingleShot.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlPhotoSingleShot.html","title":"设备控制APP拍照单拍","keywords":"","body":"设备控制APP拍照单拍 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlPhotoBurst.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlPhotoBurst.html","title":"设备控制APP拍照连拍","keywords":"","body":"设备控制APP拍照连拍 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlVolumeUp.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlVolumeUp.html","title":"设备控制APP音量加","keywords":"","body":"设备控制APP音量加 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlVolumeDown.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlVolumeDown.html","title":"设备控制APP音量减","keywords":"","body":"设备控制APP音量减 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlOpenCamera.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlOpenCamera.html","title":"设备控制APP打开相机","keywords":"","body":"设备控制APP打开相机 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlCloseCamera.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlCloseCamera.html","title":"设备控制APP关闭相机","keywords":"","body":"设备控制APP关闭相机 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlPhoneAnswer.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlPhoneAnswer.html","title":"设备控制APP接听电话","keywords":"","body":"设备控制APP接听电话 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlPhoneReject.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlPhoneReject.html","title":"设备控制APP拒接电话","keywords":"","body":"设备控制APP拒接电话 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlVolumePercentage.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlVolumePercentage.html","title":"设备控制APP音乐音量百分比","keywords":"","body":"设备控制APP音乐音量百分比 App收到的json字段： 字段名 字段类型 字段说明 volume_percentage int 音量百分比 0-100 示例： { \"volume_percentage\":22 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlFindPhoneStart.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlFindPhoneStart.html","title":"设备控制APP寻找手机开始","keywords":"","body":"设备控制APP寻找手机开始 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlFindPhoneStop.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlFindPhoneStop.html","title":"设备控制APP寻找手机结束","keywords":"","body":"设备控制APP寻找手机结束 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlAntiLostStart.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlAntiLostStart.html","title":"设备通知APP防丢启动","keywords":"","body":"设备通知APP防丢启动 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlOnekeySOSStart.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlOnekeySOSStart.html","title":"设备通知APP一键呼叫开始","keywords":"","body":"设备通知APP一键呼叫开始 App收到的json字段： 字段名 字段类型 字段说明 status int 状态：0:开始 ，1：结束 timeout int 超时时间 单位秒 示例： { \"status\":0, \"timeout\":30, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlDataUpdate.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlDataUpdate.html","title":"设备通知APP数据更新","keywords":"","body":"设备通知APP数据更新 App收到的json字段： 字段名 字段类型 字段说明 data_type int 跳转到详情 notify_type int 跳转到详情 msg_ID int 预留 msg_notice int 预留 error_index int 跳转到详情固件错误码返回非0是错误,具体看固件错误码app收到非0错误,发送获取设备0x21 11的命令采集flash数据 示例： { \"data_type\":1, \"notify_type\":0, \"msg_ID\":0, \"msg_notice\":0, \"error_index\":0 } data_type 30 通知app运动结束（作用于拦截表盘传输同27） 31 固件重启发送通知给app （app收到通知需要获取固件版本信息） 32 设备空闲时（没有使用aleax），需要上报通知给app（时间间隔为1小时） 33 固件整理空间完成通知app继续下传表盘文件 34 固件通知app结束寻找手环指令 （对应6.3寻找手环） 35 固件进入省电模式通知app 36 固件退出省电模式通知app 37 固件通知请求app下发设置gps热启动参数(废弃) 38 固件传输原始数据完成，通知app获取特性向量信息 39 固件通知app，固件血压校准失败(固件退出测量界面/检测失败/检测超时/未佩戴) 40 固件传输原始数据完成，没有特性向量信息，通知app数据采集结束 41 v3健康数据同步单项数据完成通知 (android 内部使用） 42 固件整理gps数据空间完成通知app下发gps文件 43 固件升级EPO.dat文件失败，通知app再次下发一次该文件 44 固件升级EPO.dat文件成功 45 固件升级GPS失败，通知app重新传输 46 固件升级GPS成功 47 发起运动时, 固件GPS异常，通知app 48 固件润丰外设信息更新，通知app获取 49 固件通知用户取消ble和手表配对,app弹窗处理 50 固件通知app bt配对完成 51 固件设置运动排序,通知app获取运动排序信息 52 固件全天步数目标参数有更改,通知app获取全天步数目标(0208) 53 固件通知app固件进入血压校准界面 54 固件自动识别开关状态更新,通知app获取运动自动识别开关状态(02EA) notify_type(按位获取) 值 说明 位 1 闹钟已经修改 bit0 2 固件过热异常告警 bit1 4 亮屏参数有修改（02 b0） bit2 8 抬腕参数有修改（02 b1） bit3 16 勿擾模式获取（02 30） bit4 32 手机音量的下发（03 0xE3）（删除），app音量修改，直接下发 bit5 说明：心率模式复用V3的心率模式修改 data_type = 2的时候，app发起获取心率命令 error_index 值 错误类型 备注 0 没有错误 1 ACC 1~100是固件错误 2 PPG 3 TP 4 FLASH 5 过热（PPG） 6 气压 7 GPS 8 地磁 100 开门狗复位 100~200复位日志码 101 上电复位 102 软件错位复位 103 OTA复位 104 用户主动复位 105 低电关机复位 Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlFastMsgUpdate.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlFastMsgUpdate.html","title":"主动通知APP短信","keywords":"","body":"主动通知APP短信 App下发的json字段: 字段名 字段类型 字段说明 is_success int 0app发送信息失败，1app发送信息成功 msg_ID int 回复的ID :每个消息对应一个ID msg_type int 消息类型 msg_notice int 0是没有对应的短信回复，对应回复列表 示例： { \"is_success\":0, \"msg_ID\":1, \"msg_type\":1, \"msg_notice\":0 } App收到的json字段： 字段名 字段类型 字段说明 msg_type int 回复的消息类型：来电短信（1） QQ，微信 msg_ID int 回复的ID :每个消息对应一个ID msg_notice int 0是没有对应的短信回复，对应回复列表 示例： { \"msg_ID\":1, \"msg_type\":1, \"msg_notice\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlPhotograph.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlPhotograph.html","title":"设备控制APP相机","keywords":"","body":"设备控制APP相机 App收到的json字段： 字段名 字段类型 字段说明 type int 0：打开相机 1：点击开始拍照 2：拍照结束 3：请求系统配对 示例： { \"type\":0 } App下发的json字段: 字段名 字段类型 字段说明 type int 0：打开相机 1：点击开始拍照 2：拍照结束 3：请求系统配对 示例： { \"type\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlSpeakerValue.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDODeviceControlEvt/IDODeviceControlSpeakerValue.html","title":"设备通知固件喇叭音量修改(alexa)","keywords":"","body":"设备通知固件喇叭音量修改(alexa) App收到的json字段： 字段名 字段类型 字段说明 value int 固件音量值 0-100 示例： { \"value\":20 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/IDOV3EvtIntroduction.html":{"url":"doc/IDOV3EvtIntroduction.html","title":"V3 Long Package Instruction Event","keywords":"","body":"{V3 long packet instruction event} Function V3GetDialList V3GetScreenInfo V3SetDial V3SetHRMode V3MusicControl V3NoticeMsg V3SetSportSort V3GetDefaultSportType V3SetAlarm V3GetAlarm V3SetFastMsg V3ActivityDataExchange V3ActivityDataFinal V3GetActivityExchangeHRData V3GetLanguageLibList V3SetVoiceReplyTxt V3GetActivityExchangeGPSData V3SetHotStartParam V3GetBleBeep V3ControlBpCal V3GetDailLIstNew V3SetWallpaperDialStyle V3SetGet100SportSort V3ScheduleReminder V3SetGetMainUiSort V3SetGetBaseSportParamSort V3SetLongCityName V3SetNoticeMegState V3GetPackName V3SyncContact V3SetWeather V3SetWorldTime V3SetWalkRemindTimes V3GetMusicInfo V3OperateMusic V3NoticeMsgDynamic V3SetHistoricalMenstruation V3SetDialSort V3SetRunPlan V3SetCutoverSport V3GetHabitInfo V3MiniProgramControl V3SetSmartCompetitorConfigInfo V3CutoverSportFromDevice V3NoticeDialChange Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetDialList.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetDialList.html","title":"V3获取表盘列表","keywords":"","body":"V3获取表盘列表 功能表:getNewWatchList Flutter示例： /// 获取表盘列表事件号 getWatchFaceList( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_get_watch_face_list), /// 获取表盘列表 libManager.send(evt: CmdEvtType.getWatchFaceList, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号 available_count int 剩余个数，可用文件个数 file_max_size int 单个文件最大size 单位KB item 集合 表盘列表详情，file_name的集合 字段名 字段类型 字段说明 file_name char [] 表盘名称 示例： { \"version\":0, \"available_count\":0, \"file_max_size\":140, \"item\":[ { \"file_name\":\"w256.iwf\" }, { \"file_name\":\"w174.iwf\" } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetScreenInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetScreenInfo.html","title":"V3获取屏幕信息","keywords":"","body":"V3获取屏幕信息 Flutter示例： /// 获取屏幕信息事件号 getWatchDialInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_get_screen_ifno), /// 获取屏幕信息 libManager.send(evt: CmdEvtType.getWatchDialInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 width int 屏幕宽度 height int 屏幕高度 format int 颜色格式 sizex100 int 尺寸 x100 family_name char [] 家族名称 最大10个字节 block_size int 压缩块大小 示例： { \"block_size\" : 4096, \"family_name\" : \"139\", \"format\" : 133, \"height\" : 280, \"sizex100\" : 0, \"width\" : 240 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetDial.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetDial.html","title":"V3设置表盘","keywords":"","body":"V3设置表盘 Flutter示例： /// 设置表盘事件号 setWatchFaceData( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_set_watch_face_data), /// 设置表盘 libManager.send(evt: CmdEvtType.setWatchFaceData, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 operate int 操作 0 查询正在使用表盘，1 设置表盘，2 删除表盘3 动态申请空间设置对应的空间大小 file_name char [] 表盘名，最大值30个字节 watch_file_size int 未压缩的文件长度固件开启功能表v3_watch_dail_set_add_size_33_08后app需要下发该字段表盘传输前，固件需要开辟对应的空间保存，需要把未压缩的文件长度传输过去 示例： { \"operate\":0, \"file_name\":\"\", \"watch_file_size\":0 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 错误码，0成功，非0错误 operate int 操作 0 查询正在使用表盘，1 设置表盘，2 删除表盘3 动态申请空间设置对应的空间大小 file_name char [] 表盘名，最大值30个字节 file_count int 文件的个数需要固件开启功能表V3_watch_dail_set_add_size如果operate!=3，这个数据就是1和以前保存一样如果operate =3：动态申请空间设置对应的空间大小，这个对应的就是一个删除的文件名列如果V3_watch_dail_set_add_size未开启,该字段默认返回1 示例： { \"err_code\":0, \"operate\":0, \"file_name\":\"w256.iwf\", \"file_count\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetHRMode.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetHRMode.html","title":"V3设置心率模式","keywords":"","body":"V3设置心率模式 功能表:setSmartHeartRate Flutter示例： // 设置心率模式事件号 setHeartMode( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_hr_mode), /// 设置心率模式 libManager.send(evt: CmdEvtType.setHeartMode, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 update_time int 更新时间unix 时间戳,秒级 等于0是获取，当前的utc时间挫是设置 mode int 模式136 ：自动（5分钟）153 ：持续监测（5S）85 ：关闭 不起作用204 ：设置对应的measurement_interval170 ：手动模式(关闭自动)187 ：默认的类型187这个是app设置这个下来，固件自动设置成默认的模式，如果配置了功能表support_set_v3_heart_interval，85&136&153 持续监测设置无效 快速配置的时候，配置support_set_v3_heart_interval， 204设置起作用设置连续心率的时候，如果配置support_set_v3_heart_interval这个功能，对应的设置mode是204 has_time_range int 是否有时间区间 0 无,1 有 start_hour int 起始时间 时 start_minute int 起始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 measurement_interval int 测量间隔 单位秒 notify_flag int 通知类型 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知固件未开启v3_heart_set_rate_mode_custom设置无效 high_heart_mode int 170:开启智能心率过高提醒开关， 85:关闭固件未开启v3_heart_set_rate_mode_custom设置无效 low_heart_mode int 170:开启智能心率过低提醒开关， 85:关闭固件未开启v3_heart_set_rate_mode_custom设置无效 high_heart_value int 智能心率过高提醒阈值固件未开启v3_heart_set_rate_mode_custom设置无效 low_heart_value int 智能心率过低提醒阈值固件未开启v3_heart_set_rate_mode_custom设置无效 示例： { \"update_time\":0, \"mode\":0, \"has_time_range\":0, \"start_hour\":0, \"start_minute\":0, \"end_hour\":0, \"end_minute\":0, \"measurement_interval\":0, \"notify_flag\":0, \"high_heart_mode\":0, \"low_heart_mode\":0, \"high_heart_value\":0, \"low_heart_value\":0 } App收到的json字段： 字段名 字段类型 字段说明 update_time int 更新时间unix 时间戳,秒级等于0是获取，当前的utc时间挫是设置 mode int 模式136 ：自动（5分钟）153 ：持续监测（5S）85 ：关闭 不起作用204 ：设置对应的measurement_interval170 ：手动模式(关闭自动)187 ：默认的类型187这个是app设置这个下来，固件自动设置成默认的模式，如果配置了功能表support_set_v3_heart_interval，85&136&153 持续监测设置无效 快速配置的时候，配置support_set_v3_heart_interval， 204设置起作用设置连续心率的时候，如果配置support_set_v3_heart_interval这个功能，对应的设置mode是204 has_time_range int 是否有时间区间 0 无,1 有 start_hour int 起始时间 时 start_minute int 起始时间 分 end_hour int 结束时间 时 end_minute int 结束时间 分 measurementInterval int 测量间隔 单位秒 get_sec_mode int 目前手表支持的心率类型，全0 无效值，bit0：5s模式固件未开启support_set_v3_heart_interval则返回0 get_min_mode int 目前手表支持的心率类型，全0 无效值，bit0：1分钟， bit1 ：3分钟； bit2：5分钟； bit3：10分钟； bit4：30分钟 bit5：285模式 bit6：15分钟模式固件未开启support_set_v3_heart_interval则返回0 notify_flag int 通知类型 ： 0无效 ； 1：允许通知； 2：静默通知； 3：关闭通知固件未开启v3_heart_set_rate_mode_custom则返回0 high_heart_mode int 170:开启智能心率过高提醒开关， 85:关闭固件未开启v3_heart_set_rate_mode_custom则返回0 low_heart_mode int 170:开启智能心率过低提醒开关， 85:关闭固件未开启v3_heart_set_rate_mode_custom则返回0 high_heart_value int 智能心率过高提醒阈值固件未开启v3_heart_set_rate_mode_custom则返回0 low_heart_value Int 智能心率过低提醒阈值固件未开启v3_heart_set_rate_mode_custom则返回0 示例： { \"update_time\":0, \"mode\":204, \"has_time_range\":1, \"start_hour\":9, \"start_minute\":0, \"end_hour\":12, \"end_minute\":19, \"measurement_interval\":5, \"notify_flag\":2, \"high_heart_mode\":85, \"low_heart_mode\":85, \"high_heart_value\":0, \"low_heart_value\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3MusicControl.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3MusicControl.html","title":"V3控制音乐","keywords":"","body":"V3控制音乐 功能表:setBleControlMusic Flutter示例： /// 控制音乐事件号 musicControl( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_music_control), /// 控制音乐 libManager.send(evt: CmdEvtType.musicControl, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 status int 状态：0：无效，1：播放，2：暂停，3:停止 cur_time_second int 当前播放时间 total_time_second int 总时间 music_name int 音乐名称 最大值64个字节 singer_name int 歌手名称 最大值64个字节固件未开启V3_music_control_02_add_singer_name设置该值无效 示例： { \"status\":1, \"cur_time_second\":5, \"total_time_second\":360, \"music_name\":\"夕阳无限好.mp3\", \"singer_name\":\"eason\" } App收到的json字段： 字段名 字段类型 字段说明 status int 1：成功，0：失败 示例： { \"status\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3NoticeMsg.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3NoticeMsg.html","title":"V3通知消息提醒","keywords":"","body":"V3通知消息提醒 功能表:getNotifyMsgV3 Flutter示例： /// 通知消息提醒事件号 noticeMessageV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_notice_message), /// 通知消息提醒 libManager.send(evt: CmdEvtType.noticeMessageV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 verison int 协议库版本号默认version=1version=2是增加msg_id的发送格式 evt_type int 消息应用类型 msg_id int 消息的ID evt_type是消息提醒，起作用 mesg_ID 如果是0这个字段不起作 support_answering bool 支持接听 1 不支持接听 0 support_mute bool 支持静音 1不支持静音 0 support_hang_up bool 支持挂断 1不支持挂断 0 contact char [] 联系人名称 最大64个字节 phone_number char [] 电话号码 最大32个字节 data_text char [] 消息内容 最大250个字节 示例： { \"verison\":2, \"evt_type\":12289, \"msg_id\":1, \"support_answering\":false, \"support_mute\":false, \"support_hang_up\":false, \"msg_data\":\"你好\", \"contact\":\"Lihua\", \"phone_number\":\"13340216580\", \"data_text\":\"123456\" } App收到的json字段： 字段名 字段类型 字段说明 is_success int 1：成功 ， 0失败 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetSportSort.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetSportSort.html","title":"V3设置运动类型排序","keywords":"","body":"V3设置运动类型排序 功能表:getSportsTypeV3 Flutter示例： /// 设置运动类型排序事件号 setSportSortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_sport_sort), /// 设置运动类型排序 libManager.send(evt: CmdEvtType.setSportSortV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 num int 运动类型详情个数，最大30个 item 集合 运动类型排序详情，index&type的集合 字段名 字段类型 字段说明 index int 排序序号，0无效，从1开始 type int 运动类型，具体看定义的运动类型 示例： { \"num\":3, \"item\":[ { \"index\":1, \"type\":2, }, { \"index\":2, \"type\":22, }, { \"index\":3, \"type\":33, } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetAlarm.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetAlarm.html","title":"V3APP设置ble的闹钟","keywords":"","body":"V3APP设置ble的闹钟 功能表:syncV3SyncAlarm Flutter示例： /// v3app设置ble的闹钟事件号 setAlarmV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_alarm), /// v3app设置ble的闹钟 libManager.send(evt: CmdEvtType.setAlarmV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 num int 闹钟详情个数 version int 协议版本号，默认0 item 集合 闹钟详情alarm_id&status&type&hour&minute&repeat&tsnooze_duration&delay_min&name&shock_on_off&repeat_times的集合 字段名 字段类型 字段说明 alarm_id int 闹钟id status int 170 ：不显示(删除) ，85 ：显示 type int 闹钟类型00：起床， 01 睡觉， 02 锻炼， 03 吃药， 04 约会， 05 聚会， 06 会议， 07 其他 hour int 闹钟时间 时 minute int 闹钟时间 分 repeat int 重复bit1-bit7 周一到周日， bit 0是总开关位（开关） tsnooze_duration int 贪睡时长 单位分钟还是秒 delay_min int 延时分钟 name char [24] 闹钟名称，最大值24个字节 shock_on_off int 震动开关 0关闭 ，1开启 repeat_times int 重复闹铃次数 重复闹几次,延时开关,设置成0就是关，设置成数字就是重复几次 示例： { \"item\" : [ { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 } ], \"num\" : 10, \"version\" : 0 } App收到的json字段： 字段名 字段类型 字段说明 status int 0：成功，1：失败 示例： { \"status\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetAlarm.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetAlarm.html","title":"V3APP获取设备的闹钟","keywords":"","body":"V3APP获取设备的闹钟 功能表:syncV3SyncAlarm Flutter示例： /// v3app获取ble的闹钟事件号 getAlarmV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_alarm), /// v3app获取ble的闹钟 libManager.send(evt: CmdEvtType.getAlarmV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 flag int 获取闹钟标志0:获取所有的闹钟1:收到通知，获取手环修改的闹钟 App收到的json字段： 字段名 字段类型 字段说明 num int 闹钟详情个数 version int 协议版本号，默认0 item 集合 闹钟详情alarm_id&status&type&hour&minute&repeat&tsnooze_duration&delay_min&name&shock_on_off&repeat_times的集合 字段名 字段类型 字段说明 alarm_id int 闹钟id status int 170 ：不显示(删除) ，85 ：显示 type int 闹钟类型00：起床， 01 睡觉， 02 锻炼， 03 吃药， 04 约会， 05 聚会， 06 会议， 07 其他 hour int 闹钟时间 时 minute int 闹钟时间 分 repeat int 重复bit1-bit7 周一到周日， bit 0是总开关位（开关） tsnooze_duration int 贪睡时长 单位分钟还是秒 delay_min int 延时分钟 name char [24] 闹钟名称，最大值24个字节 shock_on_off int 震动开关 0关闭 ，1开启 repeat_times int 重复闹铃次数 重复闹几次,延时开关,设置成0就是关，设置成数字就是重复几次 示例： { \"item\" : [ { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 } ], \"num\" : 10, \"version\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3ActivityDataExchange.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3ActivityDataExchange.html","title":"V3多运动数据交互","keywords":"","body":"V3多运动数据交互 Flutter示例： /// app发起数据v3交换过程事件号 exchangeAppV3Ing( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_activity_data_exchange), /// app发起数据v3交换过程 libManager.send(evt: CmdEvtType.exchangeAppV3Ing, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议版本号 默认0 固件开启功能表V3_support_v3_exchange_data_reply_add_real_time_speed_pace时version=16 固件开启功能表v3_support_sports_plan时version=32 type int 运动类型 signal_flag int 0 ：表示信号弱 1 ：表示信号强 distance int app 距离app信号强的时候ble使用app的距离数据计算 app信号弱的时候ble不使用app的数据，app显示使用手环的数据 real_time_speed int app计算显示实时配速，单位km/h，100倍 duration int 持续时间 calories Int 卡路里 示例： { \"version\":0, \"type\":0, \"signal_flag\":0, \"distance\":0, \"real_time_speed\":0, \"duration\":0, \"calories\":0 } App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号0：基础版本16：biggerfive定制项目需要固件开启V3_support_v3_exchange_data_reply_add_real_time_speed_pace32：新增跑步计划数据 需要固件开启功能表v3_support_sports_plan时version=32 type int 运动类型act_type为0有效 day int 数据时间 日 hour int 数据时间 时 minute int 数据时间 分 second int 数据时间 秒 heart_rate int 心率数据 distance int 距离 单位根据单位设置的单位显示 real_time_speed int 实时速度，单位km/h，扩大100倍 km_speed int 实时公里配速 单位s/公里 real_time_calories int 动态卡路里 steps int 步数 swim_posture int 主泳姿 status int 状态 0：无效1：开始2：手动暂停3：结束4：自动暂停 duration int 持续时间 秒钟数据 real_time_speed_pace int 实时的配速 单位秒 5秒使用滑动平均，第5秒使用1-5秒数据，第6秒使用2-6秒数据。第1-4秒不显示配速或速度需要固件开启功能表V3_support_v3_exchange_data_reply_add_real_time_speed_pace功能表未开启返回0 te int 有氧训练效果等级 单位无 范围 0-50 扩大10倍传输需要固件开启功能表V3_support_v3_exchange_data_reply_add_real_time_speed_pace功能表未开启返回0 tean int 无氧运动训练效果等级 单位无 范围 0-50 扩大10倍传输需要固件开启功能表V3_support_v3_exchange_data_reply_add_real_time_speed_pace功能表未开启返回0 action_type int 动作类型 1快走2慢跑3中速跑4快跑 5结束课程运动 （还要等待用户是否有自由运动）6课程结束后自由运动（此字段当operate为5起作用）运动累积时间=课程内训练时间+课程结束后计时需要固件开启功能表v3_support_sports_plan 功能表未开启返回0 count_hour int action_type = 1—5时，该字段是运动倒计时时间（注：时间递减）action_type = 6时，该字段是课程结束后计时（注：时间递增）需要固件开启功能表v3_support_sports_plan 功能表未开启返回0 count_minute int action_type = 1—5时，该字段是运动倒计时时间（注：时间递减）action_type = 6时，该字段是课程结束后计时（注：时间递增）需要固件开启功能表v3_support_sports_plan 功能表未开启返回0 count_second int action_type = 1—5时，该字段是运动倒计时时间（注：时间递减）action_type = 6时，该字段是课程结束后计时（注：时间递增）需要固件开启功能表v3_support_sports_plan 功能表未开启返回0 示例： { \"version\":0, \"type\":0, \"day\":0, \"hour\":0, \"minute\":0, \"second\":0, \"heart_rate\":0, \"distance\":0, \"real_time_speed\":0, \"km_speed\":0, \"real_time_calories\":0, \"steps\":0, \"swim_posture\":0, \"status\":0, \"duration\":0, \"real_time_speed_pace\":0, \"te\":0, \"tean\":0, \"action_type\":0, \"count_hour\":0, \"count_minute\":0, \"count_second\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3ActivityDataFinal.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3ActivityDataFinal.html","title":"V3多运动数据最后一次数据获取","keywords":"","body":"V3多运动数据最后一次数据获取 Flutter示例： /// app获取v3运动数据事件号 exchangeAppGetActivityData( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_activity_data), /// app获取v3运动数据 libManager.send(evt: CmdEvtType.exchangeAppGetActivityData, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号默认16功能表v3_support_sports_plan开启后version=32 功能表V3_support_v3_exchange_data_reply_add_real_time_speed_pace开启后version=48 type int 运动类型 year int 年 month int 月 day int 日 hour int 时 minute int 分 second int 秒 hr_data_interval_minute int 心率间隔 单位分钟 step int 步数 durations int 持续时间 calories int 卡路里 distance int 距离 burn_fat_mins int 脂肪燃烧的心率持续时间单位分钟 aerobic_mins int 有氧运动的持续时间 limit_mins int 极限锻炼的持续时间 warm_up int 热身运动(字段重复) 预留 fat_burning int 脂肪燃烧 (字段重复) 预留 aerobic_exercise Int 有氧运动(字段重复) 预留 anaerobic_exercise int 无氧运动(字段重复) 预留 extreme_exercise int 极限锻炼(字段重复) 预留 warm_up_time int 热身运动的累计时长 单位秒 fat_burning_time int 脂肪燃烧的累计时长 单位秒 aerobic_exercise_time int 有氧运动的累计时长单位秒 anaerobic_exercise_time int 无氧运动的累计时长 单位秒 extreme_exercise_time int 极限锻炼的累计时长 单位秒 avg_speed int 平均速度 单位km/h max_speed int 最快速度 单位km/h avg_step_stride int 平均步幅 max_step_stride int 最大步幅 km_speed int 平均公里配速 fast_km_speed int 最快公里配速 avg_step_frequency int 平均步频 max_step_frequency int 最大步频 avg_hr_value int 平均心率 max_hr_value int 最大心率 km_speed_count int 公里配速详情个数 最大100 steps_frequency_count int 步频详情个数 mi_speed_count int 英里配速个数最大100 recover_time int 恢复时长单位小时app收到该数据之后，每过一小时需要自减一 vo2max int 最大摄氧量 单位 ml/kg/min training_effect int 训练效果范围： 1.0 - 5.0 （扩大10倍传输） grade int 摄氧量等级 1：低等 2：业余 3：一般 4：平均 5：良好 6：优秀 7：专业 act_type int 计划类型：1：跑步计划3km 2：跑步计划5km 3：跑步计划10km 4：半程马拉松训练（二期）5：马拉松训练（二期）64：6分钟轻松跑 65：10分钟轻松跑 66：15分钟轻松跑 67：走跑结合初级 68：走跑结合进阶 69：走跑结合强化 128：跑后拉伸 training_offset int 训练的课程日期偏移 从零开始version=32 字段有效 否则无效上报0 action_data_count int 本次动作训练个数version=32 字段有效 否则无效上报0 in_class_calories int 课程内运动热量 单位千卡version=32 字段有效 否则无效上报0 completion_rate int 动作完成率 0—100version=32 字段有效 否则无效上报0 hr_completion_rate int 心率控制率 0—100version=32 字段有效 否则无效上报0 smart_competitor int 0:无效 1:非智能陪跑运动 2:智能陪跑运动功能表support_smart_competitor开启有效 否则无效上报0 ai_image_id int ai形象ID功能表support_smart_competitor开启有效 否则无效上报0 user_image_id int 用户形象ID功能表support_smart_competitor开启有效 否则无效上报0 bg_image_id int 背景形象ID功能表support_smart_competitor开启有效 否则无效上报0 smart_competitor_pace int 智能陪跑对手配速功能表support_smart_competitor开启有效 否则无效上报0 real_speed_count int 实时速度个数 version=48 字段有效 否则无效上报0 pace_speed_count int 实时配速数组version=48 字段有效 否则无效上报0 km_speed_s int [] 每公里耗时秒数 配速 steps_frequency int [] 步频 单位步/分钟 items_mi_speed int [] 英里配速数组 s钟数据传输 一英里用了多少s item_real_speed int [] 实时速度 5s一个最大保存6小时 单位km/hversion=48 字段有效 否则无效上报0 pace_speed_items int [] 实时配速数组 传过来的是 s 钟 每5S算一次version=48 字段有效 否则无效上报0 items 集合 动作完成内容详情 type&heart_con_value&time&goal_timegoal_time的集合version=32 字段有效 否则无效上报0 字段名 字段类型 字段说明 type int 动作类型 1快走 2慢跑 3中速跑 4快跑version=32 字段有效 否则无效上报0 heart_con_value int 每个动作心率控制version=32 字段有效 否则无效上报0 time int 动作完成时间 单位秒version=32 字段有效 否则无效上报0 goal_timegoal_time int 动作目标时间version=32 字段有效 否则无效上报0 示例： { \"version\":0, \"type\":0, \"year\":0, \"month\":0, \"day\":0, \"hour\":0, \"minute\":0, \"second\":0, \"hr_data_interval_minute\":0, \"step\":0, \"durations\":0, \"calories\":0, \"distance\":0, \"burn_fat_mins\":0, \"aerobic_mins\":0, \"limit_mins\":0, \"warm_up\":0, \"fat_burning\":0, \"aerobic_exercise\":0, \"anaerobic_exercise\":0, \"extreme_exercise\":0, \"warm_up_time\":0, \"fat_burning_time\":0, \"aerobic_exercise_time\":0, \"anaerobic_exercise_time\":0, \"extreme_exercise_time\":0, \"avg_speed\":0, \"max_speed\":0, \"avg_step_stride\":0, \"max_step_stride\":0, \"km_speed\":0, \"fast_km_speed\":0, \"avg_step_frequency\":0, \"max_step_frequency\":0, \"avg_hr_value\":0, \"max_hr_value\":0, \"km_speed_count\":0, \"steps_frequency_count\":0, \"mi_speed_count\":0, \"recover_time\":0, \"vo2max\":0, \"training_effect\":0, \"grade\":0, \"act_type\":0, \"training_offset\":0, \"action_data_count\":0, \"in_class_calories\":0, \"completion_rate\":0, \"hr_completion_rate\":0, \"real_speed_count\":0, \"pace_speed_count\":0, \"km_speed_s\":[], \"steps_frequency\":[], \"items_mi_speed\":[], \"item_real_speed\":[], \"pace_speed_items\":[], items:[ { \"type\":0, \"heart_con_value\":0, \"time\":0, \"goal_timegoal_time\":0 }, { \"type\":0, \"heart_con_value\":0, \"time\":0, \"goal_timegoal_time\":0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetActivityExchangeHRData.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetActivityExchangeHRData.html","title":"V3多运动数据数据交换中获取1分钟的心率数据","keywords":"","body":"V3多运动数据数据交换中获取1分钟的心率数据 Flutter示例： /// app获取v3心率数据事件号 exchangeAppGetV3HrData( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_activity_exchange_heart_rate_data), /// app获取v3心率数据 libManager.send(evt: CmdEvtType.exchangeAppGetV3HrData, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号预留 hour int 时 minute int 分 second int 秒 heart_rate_history_len int 心率数据数组长度最大60 interval_second Int 心率间隔单位秒 heart_rate_history int [] 心率数据数组存一分钟的心率数据, 1s存一个 示例： { \"version\":0, \"hour\":0, \"minute\":0, \"second\":0, \"heart_rate_history_len\":0, \"interval_second\":0, \"heart_rate_history\":[ 85, 85, 86, 90, 100, 80, 75 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetLanguageLibList.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetLanguageLibList.html","title":"V3获取设备字库列表","keywords":"","body":"V3获取设备字库列表 功能表:getLangLibraryV3 Flutter示例： /// v3获取设备字库列表事件号 getLanguageLibraryDataV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_language_library_data), /// v3获取设备字库列表 libManager.send(evt: CmdEvtType.getLanguageLibraryDataV3, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号预留 use_lang int 当前使用的语言 default_lang int 默认语言 fixed_lang int 固定存储语言个数 max_storage_lang int 最大存储语言 items_len int 目前固件支持的语言个数可能没有对应的字库文件 user_len int 目前已经储存的语言个数 items 集合 目前固件支持的语言个数详情集合language_type & language_version的集合 items_user 集合 目前已经储存的语言个数详情集合language_type & language_version的集合 字段名 字段类型 字段说明 language_type int 语言类型0 ：无效 1 ：中文2 ：英文 3 ：法语4 ：德语 5 ：意大利语 6 ：西班牙语7 ：日语 8 ：波兰语 9 ：捷克语10 ：罗马尼亚 11 ：立陶宛语 12 ：荷兰语13 ：斯洛文尼亚语14 ：匈牙利语15 ： 俄罗斯语16 ：乌克兰语 17 ：斯洛伐克语 18 ：丹麦语 19 ：克罗地亚语20 ：印尼语21 ：韩语22 ：印地语23 ：葡萄牙语 24 ：土耳其语25 ：泰国语 26 ：越南语27 ：缅甸语28 ：菲律宾语29：繁体中文30 ：希腊语31 ：阿拉伯语32 ：瑞典语33 ：芬兰语34 ：波斯语35 ：挪威语 language_version int 语言版本号 示例： { \"version\":0, \"use_lang\":1, \"default_lang\":1, \"fixed_lang\":3, \"max_storage_lang\":10, \"items_len\":2, \"user_len\":3, \"items\":[ { \"language_type\":1, \"language_version\":0 }, { \"language_type\":2, \"language_version\":0 } ], \"items_user\":[ { \"language_type\":1, \"language_version\":0 }, { \"language_type\":2, \"language_version\":0 }, { \"language_type\":3, \"language_version\":0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetVoiceReplyTxt.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetVoiceReplyTxt.html","title":"V3语音回复文本","keywords":"","body":"V3语音回复文本 功能表:getSportsTypeV3 Flutter示例： /// v3语音回复文本事件号 setVoiceReplyTxtV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_voice_reply_txt), /// v3语音回复文本 libManager.send(evt: CmdEvtType.setVoiceReplyTxtV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议版本号 2 flag_is_continue int 继续录音的标志0停止录音 1继续录音 title char [] 标题数据最大值32字节 text_content char [] 信息数据最大值512字节 示例： { \"version\":0, \"flag_is_continue\":1, \"title\":\"title\", \"text_content\":\"content\" } App收到的json字段： 字段名 字段类型 字段说明 is_success int 1成功 0失败 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetActivityExchangeGPSData.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetActivityExchangeGPSData.html","title":"V3多运动数据数据交换中获取一段时间的GPS数据","keywords":"","body":"V3多运动数据数据交换中获取一段时间的GPS数据 Flutter示例： /// v3多运动数据数据交换中获取一段时间的gps数据事件号 getActivityExchangeGpsData( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_activity_exchange_gps_data), /// v3多运动数据数据交换中获取一段时间的gps数据 libManager.send(evt: CmdEvtType.getActivityExchangeGpsData, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号 hour int 时 minute int 分 second int 秒 interval_second int 间隔时间 单位秒 GPS_data_len int gps数据长度 GPS_data 集合 gps数据详情集合latitude & longitude的集合 字段名 字段类型 字段说明 latitude double 经度 longitude double 纬度 示例： { \"version\":0, \"hour\":0, \"minute\":0, \"second\":0, \"interval_second\":0, \"GPS_data_len\":1, \"GPS_data\":[ { \"latitude\":0, \"longitude\":0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetHotStartParam.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetHotStartParam.html","title":"V3设置GPS热启动参数","keywords":"","body":"V3设置GPS热启动参数 Flutter示例： /// v3设置gps热启动参数事件号 setHotStartParamV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_hot_start_param), /// v3设置gps热启动参数 libManager.send(evt: CmdEvtType.setHotStartParamV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 accmaj int 参考高度 单位米 accmin int 半主要RMS精度 单位米 accvert int 方向角 单位度 altitude int 高度 x10 bear int 半次要RMS精度 单位米 latitude int 纬度 x10^6 北纬为正数 longitude int 经度 x10^6 东经为正数 tcxo_offset int 晶振偏移 示例： { \"accmaj\":0, \"accmin\":0, \"accvert\":0, \"altitude\":0, \"bear\":0, \"latitude\":0, \"longitude\":0, \"tcxo_offset\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetBleBeep.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetBleBeep.html","title":"V3获取固件本地提示音文件信息","keywords":"","body":"V3获取固件本地提示音文件信息 功能表:getSupportGetBleBeepV3 Flutter示例： /// v3获取固件本地提示音文件信息事件号 getBleBeepV3( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_ble_beep ), /// v3获取固件本地提示音文件信息 libManager.send(evt: CmdEvtType.getBleBeepV3, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号 err_code int 错误码 0成功 非0失败 item_count int 提示音个数 item 集合 提示音文件名列表 name的集合 字段名 字段类型 字段说明 name char [] 提示音文件名 最大值30个字节 示例： { \"version\":0, \"err_code\":0, \"item_count\":2, \"item\":[ { \"name\":\" \" }, { \"name\":\" \" } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3ControlBpCal.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3ControlBpCal.html","title":"V3操作血压校准控制","keywords":"","body":"V3操作血压校准控制 Flutter示例： /// v3血压校准控制 setBpCalControlV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_bp_cal_control), /// v3血压校准控制 libManager.send(evt: CmdEvtType.setBpCalControlV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 operate int 0：无效1：开始设置血压校准2：停止设置血压校准3：获取特性向量信息 file_path char [] 获取固件血压校准的原始数据后保存到的文件路径路径包含文件名(../../blood.txt)operate=1时有效 示例： { \"operate\": 1, \"file_path\":\"/sdcard/lx/blood.txt\" } App收到的json字段： 字段名 字段类型 字段说明 error_code int 错误码 0成功，非0失败 operate int 操作 0：无效1：开始设置血压校准2：停止设置血压校准 3：获取特性向量 sbp_ppg_feature_num int 高压ppg特性向量组数operate=3有效 dbp_ppg_feature_num int 低压ppg特性向量组数operate=3有效 sbp_ppg_feature_items int [] 高压ppg特性向量数组operate=3有效 dbp_ppg_feature_items int [] 低压ppg特性向量数组operate=3有效 示例： { \"error_code\": 0, \"operate\":1, \"sbp_ppg_feature_num\":0, \"dbp_ppg_feature_num\":0, \"dbp_ppg_feature_num\":null; \"dbp_ppg_feature_num\":null; } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetDailLIstNew.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetDailLIstNew.html","title":"V3获取表盘列表(新接口)","keywords":"","body":"V3获取表盘列表(新接口) 功能表:getNewWatchList Flutter示例： /// v3 获取表盘列表事件号 getWatchListV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_watch_list_new), /// v3 获取表盘列表 libManager.send(evt: CmdEvtType.getWatchListV3, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 local_watch_num int 本地表盘的总个数 cloud_watch_num int 云端表盘的总个数 wallpaper_watch_num int 壁纸表盘的总个数 user_cloud_watch_num int 云端表盘的已经使用个数 user_wallpaper_watch_num int 壁纸表盘的已经使用个数 now_show_watch_name char [] 当前显示的表盘ID 最大30个字节 watch_frame_main_version int 框架版本号 从1开始 file_max_size int 单个文件最大size 单位KB list_item_numb int 表盘列表详情个数 watch_capacity_size int 表盘的总容量固件开启V3_support_watch_capacity_size_display有效,否则字段赋0 user_watch_capacity_size int 表盘的已经使用容量固件开启V3_support_watch_capacity_size_display有效,否则字段赋0 usable_max_download_space_size int 最大的可用表盘下载连续空间大小固件开启V3_support_watch_capacity_size_display有效,否则字段赋0 item 集合 表盘列表详情 type & watch_version & sort_number &name &size的集合 字段名 字段类型 字段说明 type int 表盘类型 1：普通表盘 2：壁纸表盘 3：云表盘 watch_version int 当前的表盘版本号 云表盘起作用 sort_number int 表盘序号 name char [] 表盘名称 size int 当前表盘占用空间 单位byte固件开启v3_support_get_watch_size功能表有效, 否则字段无效 示例： { \"local_watch_num\":0, \"cloud_watch_num\":0, \"wallpaper_watch_num\":0, \"user_cloud_watch_num\":0, \"user_wallpaper_watch_num\":0, \"now_show_watch_name\":\"w123.iwf\", \"watch_frame_main_version\":0, \"file_max_size\":0, \"list_item_numb\":2, \"watch_capacity_size\":0, \"user_watch_capacity_size\":0, \"usable_max_download_space_size\":0, \"item\":[ { \"type\":0, \"watch_version\":0, \"sort_number\":0, \"name\":\"w123.iwf\", \"size\":0 }, { \"type\":0, \"watch_version\":0, \"sort_number\":0, \"name\":\"w846.iwf\", \"size\":0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetWallpaperDialStyle.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetWallpaperDialStyle.html","title":"V3设置壁纸表盘颜色和位置","keywords":"","body":"V3设置壁纸表盘颜色和位置 功能表:setWatchPhotoPositionMove Flutter示例： /// v3 设置壁纸表盘列表事件号 setWallpaperDialReplyV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_wallpaper_dial_reply), /// v3 设置壁纸表盘列表 libManager.send(evt: CmdEvtType.setWallpaperDialReplyV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 operate int 操作 0 ：查询, 1： 设置, 2： 删除壁纸表盘 location int 设置的位置信息 参考九宫格0：无效1：表盘（上左）2：表盘（上中）3：表盘（上右) 4：表盘（中左）5：表盘（中中）6：表盘（中右）7：表盘（下左）8：表盘（下中）9：表盘（下右） hide_type int 隐藏类型0：全部显示1：隐藏子控件(图标和数字) time_color int 时间控件颜色 1个Byte预留 + R(1BYTE) + G(1BYTE) + B (1BYTE) widget_type int 控件类型1：星期/日期2：步数3：距离4：卡路里5：心率6：电量 widget_icon_color int 小控件图标颜色 1个Byte预留 + R(1BYTE) + G(1BYTE) + B (1BYTE) widget_num_color int 小控件数字颜色 1个Byte预留 + R(1BYTE) + G(1BYTE) + B (1BYTE) 示例： { \"operate\":0, \"location\":0, \"hide_type\":0, \"time_color\":0, \"widget_type\":0, \"widget_icon_color\":0, \"widget_num_color\":0 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0成功 非0失败 operate int 操作 0 ：查询1： 设置2： 删除壁纸表盘 location int 设置的位置信息 hide_type int 隐藏类型 time_color int 时间控件颜色 widget_type int 控件类型 widget_icon_color int 小控件图标颜色 1个Byte预留 + R(1BYTE) + G(1BYTE) + B (1BYTE) widget_num_color int 小控件数字颜色 1个Byte预留 + R(1BYTE) + G(1BYTE) + B (1BYTE) 示例： { \"err_code\":0, \"operate\":0, \"location\":1, \"hide_type\":1, \"time_color\":16777215, \"widget_type\":1, \"widget_icon_color\":0, \"widget_num_color\":65535 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetGet100SportSort.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetGet100SportSort.html","title":"V3设置查询100种运动排序","keywords":"","body":"V3设置查询100种运动排序 功能表:getSportsTypeV3 Flutter示例： /// v3 新的100种运动排序事件号 set100SportSortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_100_sport_sort), /// v3 新的100种运动排序 libManager.send(evt: CmdEvtType.set100SportSortV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 operate int 操作 0：无效 1：查询 2：设置 now_user_location int 当前的显示已经添加的运动位置 all_num int 运动排序列表中的个数 items_set int [] 运动排序列表 最大值150个字节 示例： { \"version\":0, \"operate\":2, \"now_user_location\":2, \"all_num\":6, \"items_set\":[ 2, 3, 50, 198, 20, 32 ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 0成功 非0失败 operate int 操作 0：无效 1：查询 2：设置 min_show_num int 最少显示个数 最少是1个 max_show_num int 最大显示个数 最大是20个 now_user_location int 当前的显示已经添加的运动位置，app根据这个位置显示，前面的对应的设备是添加的，这边位置后面是未添加的，查询起作用 all_num int 运动排序列表详情个数 查询起作用 items 集合 运动排序查询的列表 type & flag的集合 字段名 字段类型 字段说明 type int 运动类型 flag int 00都没有下载bit0：小图标已下载 bit1：大图标已下载 bit2：中等图标已下载 bit3：最小图标已下载 示例： { \"version\":0, \"err_code\":0, \"operate\":2, \"min_show_num\":1, \"max_show_num\":20, \"now_user_location\":2, \"all_num\":6, \"items\":null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3ScheduleReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3ScheduleReminder.html","title":"V3日程提醒","keywords":"","body":"V3日程提醒 功能表:setScheduleReminder Flutter示例： /// v3 设置日程提醒事件号 setSchedulerReminderV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_scheduler_reminder), /// v3 设置日程提醒 libManager.send(evt: CmdEvtType.setSchedulerReminderV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 operate int 操作类型0：无效 1：增 2：删 3：查4：改 num int 提醒事件详情个数,items的个数,设置起作用,其他时候是0, 每次发送1个 items 集合 提醒事件详情 最大设置1个数据 字段名 字段类型 字段说明 id int 提醒事件id每次app下发自增1，从0开始 year int 年 mon int 月 day int 日 hour int 时 min int 分 sec int 秒 repeat_type int 重复的时间 开启v3_support_set_repeat_week_type_on_schedule_reminder后重复提醒类型设置星期重复 bit1-bit7 周一到周日 bit 0是总开关位（开关）开启v3_support_set_repeat_type_on_schedule_reminder后重复提醒类型设置(0:无效 1:仅一次 2:每天 3:每周 4:每月 5:每年） remind_on_off int 当天提醒开关 0是关， 1是开 state int 状态码 0：无效, 1：删除状态, 2：启用状态 title char [] 标题内容 最大值74个字节 note char [] 提醒内容 最大值149个字节 示例： { \"version\":0, \"operate\":1, \"num\":1, \"items\":[ { \"id\":0, \"year\":2022, \"mon\":12, \"day\":26, \"hour\":15, \"min\":51, \"sec\":20, \"repeat_type\":255, \"remind_on_off\":1, \"state\":2, \"title\":\"提醒事项1\", \"note\":\"记得完成工作\" } ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 错误码 0成功，非0是错误码 num Int 固件中目前有多少提醒数据 operate int 操作类型0：无效 1：增 2：删 3：查4：改 items 集合 提醒事件详情 字段名 字段类型 字段说明 id int 提醒事件id每次app下发自增1，从0开始 year int 年 mon int 月 day int 日 hour int 时 min int 分 sec int 秒 repeat_type int 重复的时间 开启v3_support_set_repeat_week_type_on_schedule_reminder后重复提醒类型设置星期重复 bit1-bit7 周一到周日 bit 0是总开关位（开关）开启v3_support_set_repeat_type_on_schedule_reminder后重复提醒类型设置(0:无效 1:仅一次 2:每天 3:每周 4:每月 5:每年） remind_on_off int 当天提醒开关 0是关， 1是开 state int 状态码 0：无效, 1：删除状态, 2：启用状态 title char [] 标题内容 最大值74个字节 note char [] 提醒内容 最大值149个字节 示例： { \"version\":0, \"err_code\":0, \"num\":0, \"operate\":1, \"items\":null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetGetMainUiSort.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetGetMainUiSort.html","title":"V3设置查询主界面控件排序","keywords":"","body":"V3设置查询主界面控件排序 功能表:setSetMainUiSort Flutter示例： /// v3 设置主界面控件排序事件号 setMainUISortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_main_ui_sort), /// v3 设置主界面控件排序 libManager.send(evt: CmdEvtType.setMainUISortV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 operate int 操作 0：无效 1：查询 2：设置 all_num int 控件排序列表详情的个数 items int [] 控件排序列表详情 location_x int 横轴x 从1开始 location_y int 纵轴y 从1开始 一个y就是一个横向的格子 size_type int 0：无效 1：大图标 2：小图标 widgets_type int 控件类型0：无效1：星期/日期2：步数3：距离4：卡路里5：心率6：电量 示例： { \"version\":0, \"operate\":2, \"all_num\":3, \"items\":[ 1, 2, 3 ], \"location_x\":1, \"location_y\":1, \"size_type\":2, \"widgets_type\":1 } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 0成功 非0失败 operate int 操作 0：无效 1：查询 2：设置 all_num int 固件当前的显示的列表的个数 items 集合 固件当前的显示的列表排列的情况 location_x & location_y & size_type & support_size_type & widgets_type的集合 support_items 集合 固件支持的所有的组件类型 support_size_type & widgets_type的集合 字段名 字段类型 字段说明 location_x int 横轴x 从1开始 location_y int 纵轴y 从1开始 一个y就是一个横向的格子 size_type int 0：无效1：大图标2：小图标 support_size_type int 固件支持可以编辑的图标类型0：无效1：大图标2：小图标3：大图标+小图标 widgets_type int 控件类型0：无效1：星期/日期2：步数3：距离4：卡路里5：心率6：电量 字段名 字段类型 字段说明 support_size_type int 固件支持可以编辑的图标类型0： 无效1：大图标2：小图标3：大图标+小图标 widgets_type int 控件类型0：无效1：星期/日期2：步数3：距离4：卡路里5：心率6：电量 示例： { \"version\":0, \"err_code\":0, \"operate\":0, \"all_num\":0, \"items\":[], \"location_x\":0, \"location_y\":0, \"size_type\":0, \"widgets_type\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetGetBaseSportParamSort.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetGetBaseSportParamSort.html","title":"V3设置查询运动子项数据排列","keywords":"","body":"V3设置查询运动子项数据排列 功能表:setSet20SportParamSort Flutter示例： /// v3 设置运动子项数据排列事件号 setBaseSportParamSortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_base_sport_param_sort), /// v3 设置运动子项数据排列 libManager.send(evt: CmdEvtType.setBaseSportParamSortV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 operate int 操作 0：无效 1：查询 2：设置 sport_type int 运动类型 now_user_location int 当前的显示已经添加的运动位置 all_num int 运动排序列表中的个数 items int [] 设置列表 最大值50个字节 示例： { \"version\":0, \"operate\":2, \"sport_type\":2, \"now_user_location\":2, \"all_num\":5, \"items\":[ 1, 2, 3, 4, 5 ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 0成功 非0失败 operate int 操作 0：无效 1：查询 2：设置 sport_type int 运动类型 now_user_location int 当前的显示已经添加的运动位置，app根据这个位置显示，前面的对应的设备是添加的，这边位置后面是未添加的，查询起作用 all_num int 运动排序列表详情个数 查询起作用 items int [] 运动排序查询的列表 运动子项排序枚举列表 示例： { \"version\":0, \"err_code\":0, \"operate\":0, \"sport_type\":0, \"now_user_location\":0, \"all_num\":0, \"items\":[] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetLongCityName.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetLongCityName.html","title":"V3设置运动城市名称","keywords":"","body":"V3设置运动城市名称 Flutter示例： /// v3 设置运动城市名称事件号 setLongCityNameV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_long_city_name), /// v3 设置运动城市名称 libManager.send(evt: CmdEvtType.setLongCityNameV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 name char [] 城市名称最大75个字节 示例： { \"version\":0, \"name\":\"shenzhen\" } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 错误码 0成功，非0是错误码 示例： { \"version\":0, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetNoticeMegState.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetNoticeMegState.html","title":"V3设置单个应用的通知状态","keywords":"","body":"V3设置单个应用的通知状态 功能表:setSetNotificationStatus Flutter示例： /// v3 设置消息通知状态事件号 setNoticeMessageState( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.tran_json_set_notice_message_state), /// v3 设置消息通知状态 libManager.send(evt: CmdEvtType.setNoticeMessageState, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 items_num int 消息详情的个数 operat int 操作1：增加 , 2：修改 , 3：获取查询 all_on_off int 增加、修改有效消息通知总开关 170:开启总通知开关， 85:关闭总通知开关 all_send_num int 发送的总包数 如果是发大于100的分次发送 all_send_num=now_send_index 发送完成 now_send_index int 当前发送的序列 items 集合 消息详情evt_type & notify_state & pic_flag的集合 字段名 字段类型 字段说明 evt_type int 事件类型 notify_state int 通知状态 1：允许通知，2：静默通知 ， 3：关闭通知 pic_flag int 回复的时候起作用，设置这个参数填0 0：无效 1：有下载对应的图片 2：没有对应的图片 示例： { \"version\": 0, \"items_num\": 0, \"operat\": 3, \"all_on_off\": 170, \"all_send_num\": 1, \"now_send_index\": 1, \"items\": null } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 错误码 0成功，非0失败 operat int 操作1：增加，2：修改，3：获取查询 all_on_off int 查询时有效回复消息通知总开关状态 170:开启总通知开关， 85:关闭总通知开关 items_num int 查询时有效固件目前有的消息详情items的个数 items 集合 消息详情内容，查询时有效 字段名 字段类型 字段说明 evt_type int 事件类型 notify_state int 通知状态 1：允许通知，2：静默通知，3：关闭通知 pic_flag int 0：无效，1：有下载对应的图片，2：没有对应的图片 示例： { \"version\": 0, \"err_code\": 0, \"operat\": 3, \"all_on_off\": 170, \"items_num\": 2, \"items\": [ { \"evt_type\": 1, \"notify_state\": 1, \"pic_flag\": 1 }, { \"evt_type\": 1, \"notify_state\": 1, \"pic_flag\": 1 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetPackName.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetPackName.html","title":"V3获取包名","keywords":"","body":"V3获取包名 功能表:getNotifyIconAdaptive Flutter示例： /// 获取应用包名事件号 getPackName( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.tran_json_get_app_pack_name ), /// 获取应用包名 libManager.send(evt: CmdEvtType.getPackName, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 operat_flag int 0：获取全部的1：获取增量数据 last_id int operat_flag == 获取增量数据 起作用获取增量数据的时候需要传上次返回的ID，继续获取 示例： { \"operat_flag\":0, \"last_id\":0 } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 icon_width int 宽度 icon_height int 高度 format int 颜色格式 block_size int 压缩块大小 pack_name_num int 包名的个数 package_num int 包名信息详情总个数 items 集合 app包名信息详情item_id & evt_type & need_sync_icon & msg_cout & pack_name_len & pack_name_array的集合 字段名 字段类型 字段说明 item_id int 每个包名给一个id，累加，后续用来拿增量数据，由0开始 evt_type int 事件类型 need_sync_icon int 需要更新图标数据 0：不需要更新 1：需要更新icon2：需要更新app名3：icon和app都需要更新 msg_cout int 该条消息收到次数 pack_name_len int 包名长度 最大50个字节 pack_name_array char [] 包名 示例： { \"version\":0, \"icon_width\":200, \"icon_height\":120, \"format\":133, \"block_size\":1024, \"pack_name_num\":0, \"package_num\":0, \"items\":null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SyncContact.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SyncContact.html","title":"V3同步协议蓝牙通话常用联系人","keywords":"","body":"V3同步协议蓝牙通话常用联系人 功能表:setSyncContact、reminderCallContact Flutter示例： /// 同步常用联系人事件号 setSyncContact( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.tran_json_sync_contact ), /// 同步常用联系人 libManager.send(evt: CmdEvtType.setSyncContact, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 operat int 操作 0：无效1：设置联系人2：查询联系人 3：设置紧急联系人 需要功能表支持v3_support_set_get_emergency_connact4：查询紧急联系人 需要功能表支持v3_support_set_get_emergency_connact items_num int 联系人详情个数 最大支持10个 items 集合 联系人详情 phone & name的集合 字段名 字段类型 字段说明 phone char [] 联系人号码内容 最大支持14个字节 + '\\0'换行符 name char [] 联系人名称内容 最大支持31个字节 + '\\0'换行符 示例： { \"version\":0, \"operat\":1, \"items_num\":1, \"items\":[ { \"phone\":\"13310214520\", \"name\":\"张三\" } ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 错误码 0成功，非0是错误码 operat int 操作 0：无效1：设置2：查询3：设置紧急联系人 需要功能表支持v3_support_set_get_emergency_connact4：查询紧急联系人 需要功能表支持v3_support_set_get_emergency_connact items_num int 联系人详情个数 最大支持10个操作码(operat)是查询(2/4)有效 items 集合 联系人详情 phone & name的集合操作码(operat)是查询(2/4)有效 字段名 字段类型 字段说明 phone char [] 联系人号码内容 最大支持14个字节 + '\\0'换行符操作码(operat)是查询(2/4)有效 name char [] 联系人名称内容 最大支持31个字节 + '\\0'换行符操作码(operat)是查询(2/4)有效 示例： { \"version\":0, \"err_code\":0, \"operat\":1, \"items_num\":0, \"items\":null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetWeather.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetWeather.html","title":"V3设置天气数据","keywords":"","body":"V3设置天气数据 功能表:setSetV3Weather Flutter示例： /// v3 下发v3天气协议事件号 setWeatherV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_v3_weather), /// v3 下发v3天气协议 libManager.send(evt: CmdEvtType.setWeatherV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 month int 服务器最新一次同步的月 day int 服务器最后一次同步的日 hour int 服务器最后一次同步的时 min int 服务器最后一次同步的分 sec int 服务器最后一次同步的秒 week int 当前是星期几bit0：星期1bit1：星期2类推到星期天 weather_type int 天气类型0：其他1：晴2：多云3：阴4：雨5：暴雨6：雷阵雨7：雪8：雨夹雪9：台风10：沙尘暴11：夜间晴12：夜间多云13：热14：冷15：清风16：大风17：雾霭18：阵雨19：多云转晴 48：雷 49：冰雹 50：扬沙 51：龙卷风(realme定制天气类型idw02) today_tmp int 当前的温度单位摄氏度适配负数，温度加100传输 today_max_temp int 最大温度单位摄氏度适配负数，温度加100传输 today_min_temp int 最小温度单位摄氏度适配负数，温度加100传输 city_name char [] 城市名称最大75个字节 air_quality int 空气质量扩大10倍传输 precipitation_probability int 降水概率0-100 百分比 humidity int 湿度 today_uv_intensity int 紫外线强度扩大10倍传输 wind_speed int 风速 sunrise_hour int 日出时间 时version为1有效 sunrise_min int 日出时间 分version为1有效 sunset_hour int 日出时间 时version为1有效 sunset_min int 日出时间 分version为1有效 sunrise_item_num int 日出日落时间详情个数天数目前最大暂定为7天version为1无效 air_grade_item char [] 空气质量等级内容version为1无效 hours_weather_items 集合 未来48小时的天气数据集合weather_type & temperature & probability的集合 future_items 集合 未来七天的天气数据weather_type & max_temp & min_temp的集合 sunrise_item 集合 日出日落时间详情sunrise_hour & sunrise_min & sunset_hour & sunset_min的集合version为1无效 字段名 字段类型 字段说明 weather_type int 天气类型 temperature int 温度适配负数，温度加100传输 probability int 温度出现的概率0-100 百分比 字段名 字段类型 字段说明 weather_type int 天气类型 max_temp int 最大温度适配负数，温度加100传输 min_temp int 最小温度适配负数，温度加100传输 字段名 字段类型 字段说明 sunrise_hour int 日出时间 时version为1无效 sunrise_min int 日出时间 分version为1无效 sunset_hour int 日落时间 时version为1无效 sunset_min int 日落时间 分version为1无效 示例： { \"version\":0, \"month\":12, \"day\":26, \"hour\":16, \"min\":31, \"sec\":30, \"week\":1, \"weather_type\":1, \"today_tmp\":21, \"today_max_temp\":23, \"today_min_temp\":12, \"city_name\":\"shenzhen\", \"air_quality\":53, \"precipitation_probability\":1, \"humidity\":0, \"today_uv_intensity\":0, \"wind_speed\":0, \"sunrise_hour\":6, \"sunrise_min\":20, \"sunset_hour\":18, \"sunset_min\":17, \"sunrise_item_num\":0, \"air_grade_item\":[], \"hours_weather_items\":[ { \"weather_type\":1, \"temperature\":0, \"probability\":0 }, { \"weather_type\":1, \"temperature\":0, \"probability\":0 } ], \"future_items\":null, \"sunrise_item\":null } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 错误码 0成功，非0是错误码 示例： { \"version\":0, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetWorldTime.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetWorldTime.html","title":"V3下发世界时间","keywords":"","body":"V3下发世界时间 功能表:setSetV3WorldTime Flutter示例： /// v3 下发v3世界时间 setWorldTimeV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_world_time), /// v3 下发v3世界时间 libManager.send(evt: CmdEvtType.setWorldTimeV3, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 items_num int 时钟个数 每次下发所有的时钟最大10个 items 集合 世界时钟详情id & min_offset & city_name & sunrise_hour & sunrise_min & sunset_hour & sunset_min & longitude_flag & longitude & latitude_flag & latitude的集合 字段名 字段类型 字段说明 id int 详情id min_offset int 当前的时间和0时区的偏移分钟数据 city_name char [] 城市名称 最大60个字节 sunrise_hour int 日出时间 时 sunrise_min int 日出时间 分 sunset_hour int 日落时间 时 sunset_min int 日落时间 分 longitude_flag int 1：东经 2：西经 longitude int 经度 保留2位小数扩大100倍传输， app需要将对应的分转换成度 latitude_flag int 1：北纬 2：南纬 latitude Int 纬度 保留2位小数扩大100倍传输， app需要将对应的分转换成度 示例： { \"items_num\": 4, \"items\": [{ \"id\": 31, \"min_offset\": 480, \"city_name\": \"北京\", \"sunrise_hour\": 7, \"sunrise_min\": 25, \"sunset_hour\": 16, \"sunset_min\": 49, \"longitude_flag\": 1, \"longitude\": 11641, \"latitude_flag\": 1, \"latitude\": 3990 }, { \"id\": 295, \"min_offset\": 540, \"city_name\": \"东京\", \"sunrise_hour\": 6, \"sunrise_min\": 41, \"sunset_hour\": 16, \"sunset_min\": 28, \"longitude_flag\": 1, \"longitude\": 13965, \"latitude_flag\": 1, \"latitude\": 3568 }, { \"id\": 148, \"min_offset\": 0, \"city_name\": \"伦敦\", \"sunrise_hour\": 7, \"sunrise_min\": 56, \"sunset_hour\": 15, \"sunset_min\": 51, \"longitude_flag\": 2, \"longitude\": 13, \"latitude_flag\": 1, \"latitude\": 5151 }, { \"id\": 197, \"min_offset\": -300, \"city_name\": \"纽约\", \"sunrise_hour\": 7, \"sunrise_min\": 10, \"sunset_hour\": 16, \"sunset_min\": 28, \"longitude_flag\": 2, \"longitude\": 7401, \"latitude_flag\": 1, \"latitude\": 4071 }] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 err_code int 错误码 0成功，非0是错误码 示例： { \"version\":0, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetWalkRemindTimes.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetWalkRemindTimes.html","title":"V3设置多个走动提醒的时间点","keywords":"","body":"V3设置多个走动提醒的时间点 功能表:setWalkReminderTimeGoal Flutter示例： /// 设置多个走动提醒的时间点事件号 setWalkRemindTimes( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_walk_remind_times), /// 设置多个走动提醒的时间点 libManager.send(evt: CmdEvtType.setWalkRemindTimes, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 verison int 协议库版本号 on_off int 开关170：开，85：关 num int items个数，即设置时间点个数 items 集合 走动提醒详情hour & min的集合 字段名 字段类型 字段说明 hour int 走动提醒时间 时 min int 走动提醒时间 分 示例： { \"version\": 0, \"on_off\":0, \"num\":2, \"items\":[ { \"hour\":0, \"min\":0 }, { \"hour\":0, \"min\":0 } ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号 err_code int 错误码 0成功，非0失败 示例： { \"version\": 0, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetMusicInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetMusicInfo.html","title":"V3获取固件的歌曲名和文件夹","keywords":"","body":"V3获取固件的歌曲名和文件夹 功能表:getSupportGetBleMusicInfoVerV3 Flutter示例： /// 获取固件的歌曲名和文件夹事件号 getBleMusicInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_ble_music_info), /// 获取固件的歌曲名和文件夹 libManager.send(evt: CmdEvtType.getBleMusicInfo, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 all_memory int 固件sdk卡信息总的空间 useful_memory int 固件sdk卡信息可用的空间 used_memory int 固件sdk卡信息当前使用的空间 单位字节 folder_num int (歌单)文件夹详情个数 music_num int 音乐详情个数 folder_items 集合 (歌单)文件夹详情folder_id & music_num & folder_name & music_index的集合 music_items 集合 音乐详情music_id & music_memory & music_name & singer_name的集合 字段名 字段类型 字段说明 folder_id int 歌单(文件夹) id 1~10 music_num int 歌单中的歌曲数目 最多100个 folder_name char [] 歌单(文件夹)名称 最大20个字节 music_index int [] 歌单中对应歌曲的id，按照添加的先后顺序，依次排列 字段名 字段类型 字段说明 music_id int 音乐id 从1开始 music_memory int 音乐占用的空间 music_name char [] 音乐名 最大45个字节 singer_name char [] 歌手名 最大30个字节 示例： { \"version\":0, \"icon_width\":200, \"icon_height\":120, \"format\":133, \"block_size\":1024, \"pack_name_num\":0, \"package_num\":0, \"items\":null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3OperateMusic.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3OperateMusic.html","title":"V3操作歌曲或者文件夹","keywords":"","body":"V3操作歌曲或者文件夹 Flutter示例： /// 操作歌曲或者文件夹事件号 setMusicOperate( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_operate_ble_music), /// 操作歌曲或者文件夹 libManager.send(evt: CmdEvtType.setMusicOperate, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 music_operate int 音乐操作0：无效操作1：删除音乐2：增加音乐 folder_operate int 文件夹(歌单)操作0：无效操作1：删除文件夹2：增加文件夹3：修改歌单 4：导入歌单 5：音乐删除 music_items 集合 音乐详情music_id & music_memory & music_name & singer_name的集合 folder_items 集合 (歌单)文件夹详情folder_id & music_num & folder_name & music_index的集合 字段名 字段类型 字段说明 folder_id int 歌单(文件夹) id 1~10 music_num int 歌单中的歌曲数目 最多100个 folder_name char [] 歌单(文件夹)名称 最大20个字节 music_index int [] 歌单中对应歌曲的id，按照添加的先后顺序，依次排列 字段名 字段类型 字段说明 music_id int 音乐id 从1开始 music_memory int 音乐占用的空间 music_name char [] 音乐名 最大45个字节 singer_name char [] 歌手名 最大30个字节 示例： { \"version\":0, \"music_operate\":0, \"folder_operate\":2, \"music_items\":null, \"folder_items\": { \"folder_id\":1, \"music_num\":0, \"folder_name\":\"music fold 1\" \"music_index\":[] } } App收到的json字段： 字段名 字段类型 字段说明 operate_type int 操作类型：0：无效操作1：删除音乐2：增加音乐3：删除文件夹4：增加文件夹5：修改歌单 6：导入歌单7：歌单中音乐删除 version int 固件sdk卡信息总的空间 err_code int 0成功 非0失败 music_id int 当操作为 2:增加音乐成功时返回音乐id 音乐id 示例： { \"operate_type\":4, \"version\":0, \"err_code\":0, \"music_id\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3NoticeMsgDynamic.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3NoticeMsgDynamic.html","title":"V3通知消息提醒(动态)","keywords":"","body":"V3通知消息提醒(动态) Flutter示例： /// V3动态消息通知事件号 setNoticeAppName( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_notice_message_add_app_name ) /// V3动态消息通知 libManager.send(evt: CmdEvtType.setNoticeAppName, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 verison int 协议库版本号 os_platform int 系统0 ：无效 ，1：安卓 ，2：ios evt_type int 当前处于那种模式 0：无效， 1：消息提醒 notify_type int 消息的枚举类型 上限值：20000 msg_ID int 消息的ID evt_type是消息提醒，起作用 mesg_ID 如果是0这个字段不起作用 app_items_len int 国家及语言详情的个数 contact char [] 联系人名称 最大64个字节 phone_number char [] 电话号码 最大32个字节 msg_data char [] 消息内容 最大250个字节 items 集合 国家及语言详情language & name的集合 字段名 字段类型 字段说明 language int 语言类型 name char [] 国家对应的app名称 最大50个字节 示例： { \"verison\":0, \"os_platform\":1, \"evt_type\":1, \"notify_type\":3, \"msg_ID\":1, \"app_items_len\":1, \"contact\":\"张三\", \"phone_number\":\"13425165412\", \"msg_data\":\"你好\", \"items\":[ { \"language\":2, \"name\":\"wechar\" } ] } App收到的json字段： 字段名 字段类型 字段说明 is_success int 1：成功 ， 0失败 示例： { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetHistoricalMenstruation.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetHistoricalMenstruation.html","title":"V3经期的历史数据下发","keywords":"","body":"V3经期的历史数据下发 功能表:setHistoryMenstrual Flutter示例： /// 经期的历史数据下发事件号 getHistoricalMenstruation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_historical_menstruation), /// 经期的历史数据下发 libManager.send(evt: CmdEvtType.getHistoricalMenstruation, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 avg_menstrual_day int 平均经期长度 avg_cycle_day int 平均周期长度 items_len int 增加、修改有效消息通知总开关 170:开启总通知开关， 85:关闭总通知开关 items 集合 经期历史数据详情year & mon & day & menstrual_day & cycle_day的集合 字段名 字段类型 字段说明 year int 经期开始的年 mon int 经期开始的月 day int 经期开始的日 menstrual_day int 经期长度 单位天 cycle_day int 周期长度 单位天 示例： { \"version\": 0, \"avg_menstrual_day\": 0, \"avg_cycle_day\": 0, \"items_len\": 2, \"items\": [ { \"year\": 0, \"mon\": 0, \"day\": 0, \"menstrual_day\": 0, \"cycle_day\":0, }, { \"year\": 0, \"mon\": 0, \"day\": 0, \"menstrual_day\": 0, \"cycle_day\":0, } ] } App收到的json字段： 字段名 字段类型 字段说明 err_code int 错误码 0成功，非0失败 示例： { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetDialSort.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetDialSort.html","title":"V3设置表盘顺序","keywords":"","body":"V3设置表盘顺序 功能表:setWatchDialSort Flutter示例： /// 设置表盘顺序事件号 setWatchDialSort( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_watch_dial_sort), /// 设置表盘顺序 libManager.send(evt: CmdEvtType.setWatchDialSort, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 sort_item_numb int 表盘排序列表内容个数 p_sort_item 集合 表盘排序列表内容type & sort_number & name的集合 字段名 字段类型 字段说明 type int 表盘类型 1：普通表盘 2：壁纸表盘 3：云表盘 sort_number int 序号，从0开始，不超过设备支持的表盘总个数 name char [] 表盘id 最大值30个字节 示例： { \"sort_item_numb\": 2, \"p_sort_item\":[ { \"type\":1, \"sort_number\":0, \"name\":\"w123.iwf\" }, { \"type\":1, \"sort_number\":1, \"name\":\"w555.iwf\" } ] } App收到的json字段： 字段名 字段类型 字段说明 version int 协议版本号 err_code int 错误码 0成功，非0失败 示例： { \"version\": 0, \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetRunPlan.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetRunPlan.html","title":"V3APP下发跑步计划(运动计划)","keywords":"","body":"V3APP下发跑步计划(运动计划) 功能表:setSupportSportPlan Flutter示例： /// app下发跑步计划(运动计划)事件号 setSendRunPlan( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_send_run_plan), /// app下发跑步计划(运动计划) libManager.send(evt: CmdEvtType.setSendRunPlan, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 verison int 协议库版本号 operate int 操作1：开始计划 2：计划数据下发 3：结束计划 4：查询跑步计划 type int 计划类型1：跑步计划3km 2：跑步计划5km 3：跑步计划10km4：半程马拉松训练（二期）5：马拉松训练（二期） year int 计划开始时间 年 month int 计划开始时间 月 day int 计划开始时间 日 hour int 计划开始时间 时 min int 计划开始时间 月 sec int 计划开始时间 日 day_num int 计划天数个数当operate 为2时起作用 items 集合 计划详情 type & num & item的集合 字段名 字段类型 字段说明 type int 训练类型 186：计划休息 187：计划户外跑步 188：计划室内跑步189：计划室内健身 num int 动作个数注：休息时动作个数为零 ，其他动作时个数不为零 item 集合 动作详情 type & time & height_heart & low_heart的集合 字段名 字段类型 字段说明 type int 动作类型 1：快走 2：慢跑 3：中速跑 4：快跑 time int 目标时间 单位秒 height_heart int 心率范围低值 low_heart int 心率范围高值 示例： { \"verison\":0, \"operate\":1, \"type\":1, \"year\":2022, \"month\":12, \"day\":26, \"hour\":17, \"min\":36, \"sec\":0, \"day_num\":1, \"items\":[ { \"type\":186, \"num\":2, \"item\":[ { \"type\":1, \"time\":200, \"height_heart\":110, \"low_heart\":80 }, { \"type\":1, \"time\":500, \"height_heart\":110, \"low_heart\":80 } ] } ], \"item\":[], } App收到的json字段： 字段名 字段类型 字段说明 err_code int 00:成功，01:失败 ，02:已开启另一跑步计划 version int 协议库版本号 operate int 操作：1：开始计划 2：计划数据下发 3：结束计划 4：查询跑步计划 type int 计划类型：1：跑步计划3km 2：跑步计划5km 3：跑步计划10km 4：半程马拉松训练（二期）5：马拉松训练（二期） year int 计划实施开始时间 年 month int 计划实施开始时间 月 day int 计划实施开始时间 日 hour int 计划实施开始时间 时 min int 计划实施开始时间 分 sec int 计划实施开始时间 秒 示例： { \"err_code\":0, \"version\":0, \"operate\":1, \"type\":1, \"year\":2022, \"month\":12, \"day\":26, \"hour\":17, \"min\":36, \"sec\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetCutoverSport.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetCutoverSport.html","title":"V3APP通知设备运动过程切换","keywords":"","body":"V3APP通知设备运动过程切换 Flutter示例： /// app运动计划操作事件号 exchangeAppPlan( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_app_to_ble_sport_cutover), /// app运动计划操作 libManager.send(evt: CmdEvtType.exchangeAppPlan, json: jsonEncode(json)); App下发的json字段: 字段名 字段类型 字段说明 operate int 操作1：开始运动 2：暂停运动 3：恢复运动 4：结束运动 5：切换动作 type int 计划类型1：跑步计划3km2：跑步计划5km3：跑步计划10km4：半程马拉松训练（二期）5：马拉松训练（二期）6：跑后拉伸7：6分钟轻松跑 8：10分钟轻松跑 9：15分钟轻松跑 10：走跑结合初级 11：走跑结合进阶 12：走跑结合强化 training_offset int 训练的课程日期偏移 从零开始 hour int 开始、暂停、恢复、结束时间 由operate决定是什么时间类型时间 时 minute int 时间 分 second int 时间 秒 示例： { \"operate\":1, \"type\":1, \"action_type\":1, \"year\":2022, \"month\":12, \"day\":26, \"time\":200, \"low_heart\":80, \"height_heart\":110, \"cur_day\":1, \"hour\":0, \"minute\":0, \"second\": 0 } App收到的json字段： 字段名 字段类型 字段说明 err_code int 0:成功 其他失败 operate int 操作1：开始运动2：暂停运动 3：恢复运动4：结束运动 5：切换动作 type int 计划类型1：跑步计划3km2：跑步计划5km3：跑步计划10km4：半程马拉松训练（二期）5：马拉松训练（二期） action_type int 动作类型 1：快走2：慢跑3：中速跑4：快跑5：结束课程运动（还要等待用户是否有自由运动）（此字段当operate为5起作用） 示例： { \"err_code\":0 \"operate\":1, \"type\":1, \"action_type\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetHabitInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3GetHabitInfo.html","title":"V3获取用户习惯信息","keywords":"","body":"V3获取用户习惯信息 Flutter示例： /// v3获取固件本地提示音文件信息 getHabitInfoV3( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_habit_information ), /// v3获取固件本地提示音文件信息 libManager.send(evt: CmdEvtType.getHabitInfoV3, json: jsonEncode(json)); App收到的json字段： 字段名 字段类型 字段说明 browse_count int 浏览打点详情个数 implement_count int 执行打点详情个数 bro_items 集合 浏览打点详情type & evt & year & month & day & hour & min & sec &count的集合 imp_items 集合 执行打点详情type & evt & start_year & start_month & start_day & start_hour & start_min & start_sec & end_year & end_month & end_day & end_hour & end_min & end_sec & completion_rate的集合 字段名 字段类型 字段说明 type int 特性名称 1：跑步课程 2：跑步计划3：设备睡眠4：体重 evt int 事件 1：浏览跑步课程 2：浏览跑步计划 3：浏览睡眠 4：睡眠呼吸 5：点击设备体重管理入口 year int 浏览日期 年 month int 浏览日期 月 day int 浏览日期 日 hour int 当天最后一次点击时间 时 min int 当天最后一次点击时间 分 sec int 当天最后一次点击时间 秒 count int 点击次数 字段名 字段类型 字段说明 type int 特性名称 1：跑步课程 2：跑步计划 3：跑后拉伸 evt int 事件 1：使用跑步课程 2：执行跑步计划3：执行跑后拉伸 start_year int 启动时间 年 start_month int 启动时间 月 start_day int 启动时间 日 start_hour int 启动时间 时 start_min int 启动时间 分 start_sec int 启动时间 秒 end_year int 结束时间 年 end_month int 结束时间 月 end_day int 结束时间 日 end_hour int 结束时间 时 end_min int 结束时间 分 end_sec int 结束时间 秒 completion_rate int 点击次数 0到100 示例： { \"browse_count\":1, \"implement_count\":1, \"bro_items\":[ { \"type\":0, \"evt\":0, \"year\":0, \"month\":0, \"day\":0, \"hour\":0, \"min\":0, \"sec\":0, \"count\":0 } ], \"imp_items\":[ \"type\":0, \"evt\":0, \"start_year\":0, \"start_month\":0, \"start_day\":0, \"start_hour\":0, \"start_min\":0, \"start_sec\":0, \"end_year\":0, \"end_month\":0, \"end_day\":0, \"end_hour\":0, \"end_min\":0, \"end_sec\":0, \"completion_rate\":0 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3MiniProgramControl.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3MiniProgramControl.html","title":"V3操作小程序信息(预留)","keywords":"","body":"V3操作小程序信息 App下发的json字段: 字段名 字段类型 字段说明 verison int 协议库版本号 operate int 0:无效 1:启动小程序 2:删除小程序 3:获取已安装的小程序列表 mini_program_name char [] 小程序名称 operate=0/operate=3无效,获取操作不需要下发名称最大30个字节 示例： { \"verison\":0, \"operate\":1, \"mini_program_name\":\"粤康码\" } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 operate int 0:无效 1:启动小程序 2:删除小程序 3:获取已安装的小程序列表 error_code int 0:成功 非0失败 mini_program_num int operate=3有效小程序个数 最多50个 residual_space int 剩余空间 total_space int 总空间 info_item 集合 小程序列表mini_program_name & mini_program_size &mini_program_version的集合operate=3有效 字段名 字段类型 字段说明 mini_program_name char [] 小程序名称 最大值30个字节 mini_program_size int 小程序大小 mini_program_version int 小程序版本号 示例： { \"version\":0, \"operate\":1, \"error_code\":0, \"mini_program_num\":0, \"residual_space\": 0, \"total_space\":0, \"info_item\":null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetSmartCompetitorConfigInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3SetSmartCompetitorConfigInfo.html","title":"V3智能陪跑信息配置(预留)","keywords":"","body":"V3智能陪跑信息配置 App下发的json字段: 字段名 字段类型 字段说明 version int 协议库版本号 默认0 operate int 操作 0:无效 1:设置 2:查询 background_font_color int 背景文字颜色 设置操作有效 ai_image_id int ai形象ID 设置操作有效 user_image_id int 用户形象ID设置操作有效 bg_image_id Int 背景形象ID设置操作有效 示例： { } App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 默认0 err_code int 0成功 非0失败 operate int 操作 0:无效 1:设置 2:查询 background_font_color int 背景文字颜色 查询操作有效 ai_image_id int ai形象ID 查询操作有效 user_image_id int 用户形象ID查询操作有效 bg_image_id Int 背景形象ID查询操作有效 示例： { } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3CutoverSportFromDevice.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3CutoverSportFromDevice.html","title":"V3设备通知app运动过程切换","keywords":"","body":"V3设备通知APP运动过程切换 App下发的json字段: 字段名 字段类型 字段说明 operate int 操作1：开始运动 2：暂停运动 3：恢复运动 4：结束运动 5：切换动作 type int 计划类型1：跑步计划3km 2：跑步计划5km 3：跑步计划10km 4：半程马拉松训练（二期） 5：马拉松训练（二期） action_type int 动作类型 1：快走2：慢跑3：中速跑4：快跑 5：结束课程运动（还要等待用户是否有自由运动）（此字段当operate为5起作用） err_code int 0:成功 其他失败 示例： { \"operate\":1, \"type\":1, \"action_type\":1, \"err_code\":0 } App收到的json字段： 字段名 字段类型 字段说明 operate int 1：开始运动 2：暂停运动 3：恢复运动 4：结束运动5：切换动作 type int 计划类型1：跑步计划3km2：跑步计划5km 3：跑步计划10km 4：半程马拉松训练（二期）5：马拉松训练（二期） action_type int 动作类型 1：快走2：慢跑3：中速跑4：快跑 5：结束课程运动 （还要等待用户是否有自由运动）；6课程结束后自由运动 （此字段当operate为5起作用） year int 训练的课程日期(训练日的日期) 年 month int 训练的课程日期(训练日的日期) 月 day int 训练的课程日期(训练日的日期) 日 time int 动作目标时间 单位秒 low_heart int 心率范围低值 height_heart int 心率范围高值 cur_day int 开始/暂停/恢复/结束时间，由operate决定是什么时间类型时间 日 hour int 时间 时 minute int 时间 分 second int 时间 秒 示例： { \"operate\":1, \"type\":1, \"action_type\":1, \"year\":2022, \"month\":12, \"day\":26, \"time\":200, \"low_heart\":80, \"height_heart\":110, \"cur_day\":1, \"hour\":0, \"minute\":0, \"second\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3NoticeDialChange.html":{"url":"doc/BaseProtocolEvtExecDoc/zh/doc/IDOV3Evt/IDOV3NoticeDialChange.html","title":"V3APP获取表盘颜色样式修改","keywords":"","body":"V3APP获取表盘颜色样式修改 App收到的json字段： 字段名 字段类型 字段说明 version int 协议库版本号 dail_ID int 表盘ID name char [] 表盘名字 最大30个字节 dial_type int 回复类型目前只有 0：无效；1：颜色 style_enum int 颜色改变的枚举 0无效从一开始就是对应的枚举样式 示例： { \"version\":0, \"dail_ID\":1, \"name\":\"w120.iwf\", \"dial_type\":1, \"style_enum\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by Gitbook修订时间: 2023-08-18 19:50:58 "},"doc/IDOAppendix/IDODeviceErrorCode.html":{"url":"doc/IDOAppendix/IDODeviceErrorCode.html","title":"Firmware Standardization General Error Codes","keywords":"","body":"{Firmware Generic Error code} Note: The following common error codes are from firmware development and are for reference only. Some firmware items may use different error codes. You need to locate error flags corresponding to different firmware items index ID Description 0 ERROR_CODE_SUCCESS Successful command 1 ERROR_CODE_SVC_HANDLER_MISSING SVC handler is missing 2 ERROR_CODE_SOFTDEVICE_NOT_ENABLED SoftDevice has not been enabled 3 ERROR_CODE_INTERNAL Internal Error 4 ERROR_CODE_NO_MEM No Memory for operation 5 ERROR_CODE_NOT_FOUND Not found 6 ERROR_CODE_NOT_SUPPORTED Not supported 7 ERROR_CODE_INVALID_PARAM Invalid Parameter 8 ERROR_CODE_INVALID_STATE Invalid state, operation disallowed in this state 9 ERROR_CODE_INVALID_LENGTH Invalid Length 10 ERROR_CODE_INVALID_FLAGS Invalid Flags 11 ERROR_CODE_INVALID_DATA Invalid Data 12 ERROR_CODE_DATA_SIZE Invalid Data size 13 ERROR_CODE_TIMEOUT Operation timed out 14 ERROR_CODE_NULL Null Pointer 15 ERROR_CODE_FORBIDDEN Forbidden Operation 16 ERROR_CODE_INVALID_ADDR Bad Memory Address 17 ERROR_CODE_BUSY Busy 18 ERROR_CODE_CONN_COUNT Maximum connection count exceeded. 19 ERROR_CODE_RESOURCES Not enough resources for operation 20 ERROR_CODE_BT_OTA Bt Bluetooth upgrade error 21 ERROR_CODE_NO_SPACE Not enough space for operation 22 ERROR_CODE_LOW_BATTERY Low Battery 23 ERROR_CODE_INVALID_FILE_NAME Invalid File Name/Format 24 ERROR_SPACE_ORGANIZATION Watch space needs to be organized 25 ERROR_SPACE_ORGANIZATION_ING Watch space is being organized Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-19 10:25:03 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetLongSitReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetLongSitReminder.html","title":"Set Sedentary Reminder","keywords":"","body":"Set Sedentary Reminder Menu: setSedentariness Flutter Example: /// Set Long Sit Event setLongSit( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_long_sit), /// Set Long Sit libManager.send(evt: CmdEvtType.setLongSit, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description start_hour int Start Time of Sedentary Reminder (hour) start_minute int Start Time of Sedentary Reminder (minute) end_hour int End Time of Sedentary Reminder (hour) end_minute int End Time of Sedentary Reminder (minute) interval int Interval (in minutes) Value should be greater than 15 minutes repetitions int Repetitions and Switchbit0: 0 means off, 1 means on bit1-7: 0 means no repetition, 1 means repetition Example: { \"start_hour\": 15, \"start_minute\": 40, \"end_hour\": 23, \"end_minute\": 26, \"interval\": 15, \"repetitions\": 254 } JSON Field Received by the App: Field Name Field Type Field Description status_code int 0: Success, non-zero: Error code Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:59:59 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetDisplayMode.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetDisplayMode.html","title":"Set Display Mode","keywords":"","body":"Set Display Mode Menu: displayMode (SDK to be supplemented) Flutter Example: /// Display mode event number setDisplayMode( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_display_mode), /// Set display mode libManager.send(evt: CmdEvtType.setDisplayMode, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description mode int Mode 0: Default 1: Landscape 2: Portrait 3: Flipped (180 degrees) Example: { \"mode\": 0 } JSON fields received by the App: Field Name Field Type Field Description status_code int 0 for success, non-zero for failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:49:10 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetDoNotDisturb.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetDoNotDisturb.html","title":"Set Do Not Disturb Mode","keywords":"","body":"Set Do Not Disturb Mode Menu: setDoNotDisturb [disturbHaveRangRepeat (SDK to be supplemented), setOnlyNoDisturbAllDayOnOff, setOnlyNoDisturbSmartOnOff] Flutter Example: /// Do not disturb mode event number setDoNotDisturb( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_do_not_disturb), /// Set do not disturb mode libManager.send(evt: CmdEvtType.setDoNotDisturb, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description switch_flag int Mode 0: Default 1: Landscape 2: Portrait 3: Flipped (180 degrees) start_hour int Start time Hour start_minute int Start time Minute end_hour int End time Hour end_minute int End time Minute have_time_range int Whether there is a time range 0: Invalid 1: No time range 2: Has time range week_repeat int Week repeat and sedentary reminder, same as alarm bit0: Invalid (bit1 - bit7): For Monday to Sunday noontime_rest_on_off int Daytime do not disturb switch 170: Enable 85: Disable noontime_rest_start_hour int Start time Hour noontime_rest_start_minute int Start time Minute noontime_rest_end_hour int End time Hour noontime_rest_end_minute int End time Minute all_day_on_off int All-day do not disturb 170: Enable 85: Disable intelligent_on_off int Intelligent do not disturb switch 170: Enable 85: Disable Example: { \"switch_flag\":0, \"start_hour\":15, \"start_minute\":23, \"end_hour\":23, \"end_minute\":30, \"have_time_range\":2, \"week_repeat\":127, \"noontime_rest_on_off\":170, \"noontime_rest_start_hour\":9, \"noontime_rest_start_minute\":0, \"noontime_rest_end_hour\":12, \"noontime_rest_end_minute\":0, \"all_day_on_off\":85, \"intelligent_on_off\":85 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:50:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetFindPhone.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetFindPhone.html","title":"Set Find Phone","keywords":"","body":"Set Find Phone Menu: getFindPhone Flutter Example: /// Set Find Phone setFindPhone( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_find_phone), /// Set Do Not Disturb Mode libManager.send(evt: CmdEvtType.setNotDisturb, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int 170: Turn on, 85: Turn off Example: { \"on_off\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0: Success, non-zero: Error Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:54:12 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetSportGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetSportGoal.html","title":"Set Sport Goal","keywords":"","body":"Set Exercise Goal Menu: [supportWalkGoalSteps (to be filled by SDK), v2SupportSetStepDataType (to be filled by SDK)] Flutter Example: /// Set exercise goal event setSportGoal( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sport_goal), /// Set exercise goal libManager.send(evt: CmdEvtType.setSportGoal, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description sport_step int Number of steps for the exercise goal walk_goal_steps int Walk goal steps per hour setting target_type int Target type setting, 0: Invalid, 1: Daily Goal, 2: Weekly GoalRequires support from the menu Example: { \"sport_step\": 2000, \"walk_goal_steps\": 15, \"target_type\": 2 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0 for success, non-zero for failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:13:50 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetHand.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetHand.html","title":"Set Hand Orientation","keywords":"","body":"Set Left/Right Hand Menu: ////TODO (No corresponding menu found) Flutter Example: /// Set Left/Right Hand Event setHand( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_hand), /// Set Left/Right Hand libManager.send(evt: CmdEvtType.setHand, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description hand int 0: Left Hand1: Right Hand Example: { \"hand\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:55:40 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetTime.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetTime.html","title":"Set Time","keywords":"","body":"Set Time Flutter Example: /// Set Time setTime( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_time), /// Set Time libManager.send(evt: CmdEvtType.setTime, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description year int Year month int Month day int Day hour int Hour minute int Minute second int Second week int Week: 0-6 for Monday to Sunday time_zone int Timezone in a 24-hour format: 0-12 for East13-24 for West Example: { \"year\": 2022, \"month\": 12, \"day\": 16, \"hour\": 17, \"minute\": 49, \"second\": 46, \"week\": 5, \"time_zone\": 8 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:12:59 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetUserInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetUserInfo.html","title":"Set User Information","keywords":"","body":"Set User Information Flutter Example: /// Set user information event number setUserInfo( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_user_info), /// Set user information libManager.send(evt: CmdEvtType.setUserInfo, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description year int Birth year month int Birth month day int Birth day hour int Birth hour height int Height in centimeters weight int Weight in kilograms,requires x100 gender int Gender1: Female0: Male Example: { \"year\": 2022, \"month\": 12, \"day\": 16, \"hour\": 18, \"height\": 173, \"weight\": 7400, \"gender\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:17:52 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOOneKeySOS.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOOneKeySOS.html","title":"Set One-Key SOS","keywords":"","body":"Set One-touch Calling Function: onetouchCalling (SDK to be provided) Flutter Example: /// Set the one-touch calling event number setOnekeySOS( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_onekey_sos), /// Set one-touch calling libManager.send(evt: CmdEvtType.setOnekeySOS, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description on_off bool Switch: true - Onfalse - Off phone_type int 0: Invalid1: Doro phone2: Non-Doro phone Example: { \"on_off\": true, \"phone_type\": 0 } JSON fields received by the App: Field Name Field Type Field Description status_code int 0: Success, Non-zero: Failure Example: { \"status_code\": 0 } The above Chinese text has been translated into English. Other structures should not be changed. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetMusicONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetMusicONOFF.html","title":"Set Music Switch","keywords":"","body":"Set Music On/Off Menu: setBleControlMusic [supportV2SetShowMusicInfoSwitch (to be supplied)] Flutter Example: /// Set Music On/Off Event setMusicOnOff( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_muisc_onoff), /// Set Music On/Off libManager.send(evt: CmdEvtType.setMusicOnOff, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int On/Off switch170: On85: Off show_info_status int Show song information switch170: On85: OffRequires firmware support for menu: support_v2_set_show_music_info_switch (to be supplied) Example: { \"on_off\": 85, \"show_info_status\": 85 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0: Success, non-zero: Failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:03:09 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetLostFind.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetLostFind.html","title":"Set Lost Find","keywords":"","body":"Set Anti-Lost Mode Menu: antilost (SDK to be supplied) Flutter Example: /// Set Lost Find Event setLostFind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_lost_find), /// Set Lost Find libManager.send(evt: CmdEvtType.setLostFind, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int Mode0: No anti-lost1: Close-range anti-lost2: Medium-range anti-lost3: Long-range anti-lost Example: { \"mode\": 0 } JSON Field Received by the App: Field Name Field Type Field Description status_code int 0: Success, non-zero: Error code Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:00:48 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetAlarm.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetAlarm.html","title":"Add Alarm","keywords":"","body":"Add Alarm Function: setAddAlarm [v3AddAlarm (to be provided), add_alarm_to_clibrary (C library jsonid SDK to be provided)] Flutter Example: /// Set alarm event number setAddAlarm( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_add_alarm), /// Set alarm libManager.send(evt: CmdEvtType.setAddAlarm, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description alarm_num int Number of alarms alarm_items array Collection of details of each alarm (alarm_id, alarm_type, alarm_hour, alarm_minute, alarm_status, tsnooze_duration, repeat) Field Name Field Type Field Description alarm_id int Alarm ID (fixed from 1 to the maximum number of alarms) alarm_type int Type:0: Wake up1: Sleep2: Exercise3: Medication4: Appointment5: Gathering6: Meeting7: Other8: Meal9: Brushing teeth10: Rest11: Class12: Bathing13: Study14: Playtime alarm_hour int Alarm hour (24-hour format) alarm_minute int Alarm minute (24-hour format) alarm_status int Status:85: Display170: Don't display tsnooze_duration int Snooze duration0 means no snooze, 0-60 minutes repeat int Repeat and switch:bit0: Overall switch (0: Off, 1: On)bit1-7: Each bit corresponds to Monday to Sunday (1: Repeat reminder, 0: No repeat reminder) Example: { \"alarm_num\": 10, \"alarm_items\": [ { \"alarm_id\": 1, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 85, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 2, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 85, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 3, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 85, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 4, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 85, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 5, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 85, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 6, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 85, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 7, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 85, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 8, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 85, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 9, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 85, \"tsnooze_duration\": 5, \"repeat\": 285 }, { \"alarm_id\": 10, \"alarm_type\": 0, \"alarm_hour\": 9, \"alarm_minute\": 0, \"alarm_status\": 85, \"tsnooze_duration\": 5, \"repeat\": 285 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetSportMode.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetSportMode.html","title":"Set Sport Mode","keywords":"","body":"Set Sport Mode Flutter Example: /// Set sport mode select event number setSportModeSelect( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sport_mode_select), /// Set sport mode select libManager.send(evt: CmdEvtType.setSportModeSelect, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description flag int 0: Invalid1: Set quick sport type - sport_type1 & sport_type2 & sport_type3 & sport_type42: Set specific sport type sport_type1 int Quick sport type 1flag: 1 is valid sport_type2 int Quick sport type 2flag: 1 is valid sport_type3 int Quick sport type 3flag: 1 is valid sport_type4 int Quick sport type 4flag: 1 is valid sport_type0_walk bool Type: Walking, 0 not supported, 1 supportedflag: 2 is valid sport_type0_run bool Type: Running, 0 not supported, 1 supportedflag: 2 is valid sport_type0_by_bike bool Type: Cycling, 0 not supported, 1 supportedflag: 2 is valid sport_type0_on_foot bool Type: Walking (on foot), 0 not supported, 1 supportedflag: 2 is valid sport_type0_swim bool Type: Swimming, 0 not supported, 1 supportedflag: 2 is valid sport_type0_mountain_climbing bool Type: Mountain climbing, 0 not supported, 1 supportedflag: 2 is valid sport_type0_badminton bool Type: Badminton, 0 not supported, 1 supportedflag: 2 is valid sport_type0_other bool Type: Other, 0 not supported, 1 supportedflag: 2 is valid sport_type1_fitness bool Type: Fitness, 0 not supported, 1 supportedflag: 2 is valid sport_type1_spinning bool Type: Spinning, 0 not supported, 1 supportedflag: 2 is valid sport_type1_ellipsoid bool Type: Ellipsoid, 0 not supported, 1 supportedflag: 2 is valid sport_type1_treadmill bool Type: Treadmill, 0 not supported, 1 supportedflag: 2 is valid sport_type1_sit_up bool Type: Sit-ups, 0 not supported, 1 supportedflag: 2 is valid sport_type1_push_up bool Type: Push-ups, 0 not supported, 1 supportedflag: 2 is valid sport_type1_dumbbell bool Type: Dumbbell, 0 not supported, 1 supportedflag: 2 is valid sport_type1_weightlifting bool Type: Weightlifting, 0 not supported, 1 supportedflag: 2 is valid sport_type2_bodybuilding_exercise bool Type: Bodybuilding exercise, 0 not supported, 1 supportedflag: 2 is valid sport_type2_yoga bool Type: Yoga, 0 not supported, 1 supportedflag: 2 is valid sport_type2_rope_skipping bool Type: Rope skipping, 0 not supported, 1 supportedflag: 2 is valid sport_type2_table_tennis bool Type: Table tennis, 0 not supported, 1 supportedflag: 2 is valid sport_type2_basketball bool Type: Basketball, 0 not supported, 1 supportedflag: 2 is valid sport_type2_football bool Type: Football, 0 not supported, 1 supportedflag: 2 is valid sport_type2_volleyball bool Type: Volleyball, 0 not supported, 1 supportedflag: 2 is valid sport_type2_tennis bool Type: Tennis, 0 not supported, 1 supportedflag: 2 is valid sport_type3_golf bool Type: Golf, 0 not supported, 1 supportedflag: 2 is valid sport_type3_baseball bool Type: Baseball, 0 not supported, 1 supportedflag: 2 is valid sport_type3_skiing bool Type: Skiing, 0 not supported, 1 supportedflag: 2 is valid sport_type3_roller_skating bool Type: Roller skating, 0 not supported, 1 supportedflag: 2 is valid sport_type3_dance bool Type: Dance, 0 not supported, 1 supportedflag: 2 is valid sport_type3_strength_training bool Type: Strength training, 0 not supported, 1 supportedflag: 2 is valid sport_type3_core_training bool Type: Core training, 0 not supported, 1 supportedflag: 2 is valid sport_type3_tidy_up_relax bool Type: Tidy up and relax, 0 not supported, 1 supportedflag: 2 is valid Example: { \"flag\": 2, \"sport_type1\": 0, \"sport_type2\": 0, \"sport_type3\": 0, \"sport_type4\": 0, \"sport_type0_walk\": 1, \"sport_type0_run\": 1, \"sport_type0_by_bike\": 1, \"sport_type0_on_foot\": 1, \"sport_type0_swim\": 1, \"sport_type0_mountain_climbing\": 1, \"sport_type0_badminton\": 1, \"sport_type0_other\": 1, \"sport_type1_fitness\": 1, \"sport_type1_spinning\": 1, \"sport_type1_ellipsoid\": 1, \"sport_type1_treadmill\": 1, \"sport_type1_sit_up\": 1, \"sport_type1_push_up\": 1, \"sport_type1_dumbbell\": 1, \"sport_type1_weightlifting\": 1, \"sport_type2_bodybuilding_exercise\": 1, \"sport_type2_yoga\": 1, \"sport_type2_rope_skipping\": 1, \"sport_type2_table_tennis\": 1, \"sport_type2_basketball\": 1, \"sport_type2_football\": 1, \"sport_type2_volleyball\": 1, \"sport_type2_tennis\": 1, \"sport_type3_golf\": 1, \"sport_type3_baseball\": 1, \"sport_type3_skiing\": 1, \"sport_type3_roller_skating\": 1, \"sport_type3_dance\": 1, \"sport_type3_strength_training\": 1, \"sport_type3_core_training\": 1, \"sport_type3_tidy_up_relax\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0: Success, non-zero: Failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:16:56 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetWatchDial.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetWatchDial.html","title":"Set Watch Dial","keywords":"","body":"Set Watch Face Event Number: 124 VBUS_EVT_APP_SET_WATCH_DIAL Function: WatchDial (to be supplemented with SDK) Flutter Example: /// Set watch face event number setWatchDial( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_watch_dial), /// Set watch face libManager.send(evt: CmdEvtType.setWatchDial, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description dial_id int ID of the watch face to be setDial id (0 invalid, currently supports 1~4) Example: { \"dial_id\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description ret_code int 0 for success, non-zero for failure Example: { \"ret_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:19:41 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetShortcut.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetShortcut.html","title":"Set Shortcut","keywords":"","body":"Set Shortcut Flutter Example: /// Set shortcut setShortcut( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_shortcut), /// Set shortcut libManager.send(evt: CmdEvtType.setShortcut, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int Function of Shortcut 10: Invalid1: Quick access to camera control2: Quick access to motion mode3: Quick access to do not disturb Example: { \"mode\": 2 } JSON Fields Received by the App: Field Name Field Type Field Description ret_code int 0 for success, non-zero for failure Example: { \"ret_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:11:03 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetBpCal.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetBpCal.html","title":"Set Blood Pressure Calibration","keywords":"","body":"v2 Blood Pressure Calibration Function: getSupportBpSetOrMeasurementV2 Flutter Example: /// Blood pressure calibration event number setBpCalibration( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_bp_cal), /// Blood pressure calibration libManager.send(evt: CmdEvtType.setBpCalibration, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description flag int 1: Blood pressure calibration settings2: Blood pressure calibration query result diastolic int Systolic pressure systolic int Diastolic pressure Example: { \"flag\": 2, \"diastolic\": 0, \"systolic\": 0 } JSON fields received by the App: Field Name Field Type Field Description ret_code int 0: Success1: Successfully entered calibration mode, calibration in progress2: In exercise mode3: Device busy4: Invalid status Example: { \"ret_code\": 4 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetStressCal.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetStressCal.html","title":"Set Stress Calibration","keywords":"","body":"Set Stress Calibration Menu: setSetStressCalibration Flutter Example: /// Set Stress Calibration Event Code setStressCalibration( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_stress_cal), /// Set Stress Calibration libManager.send(evt: CmdEvtType.setStressCalibration, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description stress_score int Stress score, ranging from 1 to 10 status int 0: Start calibration setting1: Cancel calibration setting Example: { \"stress_score\": 6, \"status\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description ret_code int 0: Success1: Failed - Calibration in progress2: Failed - Charging3: Failed - Not wearing4: Failed - In a sports scene Example: { \"ret_code\": 3 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:19:21 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetHRInterval.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetHRInterval.html","title":"Set Heart Rate Interval","keywords":"","body":"Set Heart Rate Interval Flutter Example: /// Set Heart Rate Interval Event setHeartRateInterval( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_heart_rate_interval), /// Set Heart Rate Interval libManager.send(evt: CmdEvtType.setHeartRateInterval, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description burn_fat_threshold int Fat burning range 50%-69% aerobic_threshold int Aerobic training range 70%-84% limit_threshold int Peak training range 85%-100% user_max_hr int Maximum heart rate reminder range1 int Warm-up exercise range (98% of 220 - age) range2 int Fat burning range (118% of 220 - age) range3 int Aerobic exercise range (138% of 220 - age) range4 int Anaerobic exercise range (157% of 220 - age) range5 int Extreme exercise range (177% of 220 - age) min_hr int Minimum heart rate max_hr_remind int Max heart rate reminder 0: Off, 1: On min_hr_remind int Min heart rate reminder0: Off, 1: On remind_start_hour int Reminder start hour remind_start_minute int Reminder start minute remind_stop_hour int Reminder stop hour remind_stop_minute int Reminder stop minute Example: { \"burn_fat_threshold\": 50, \"aerobic_threshold\": 70, \"limit_threshold\": 80, \"user_max_hr\": 120, \"range1\": 0, \"range2\": 0, \"range3\": 0, \"range4\": 0, \"range5\": 0, \"min_hr\": 76, \"max_hr_remind\": 1, \"min_hr_remind\": 1, \"remind_start_hour\": 9, \"remind_start_minute\": 0, \"remind_stop_hour\": 23, \"remind_stop_minute\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:57:56 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetHRMode.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetHRMode.html","title":"Set Heart Rate Mode","keywords":"","body":"Set Heart Rate Mode Menu: syncHeartRateMonitor [exTableMain7HeartRateInterval (to be supplemented by SDK)] Flutter Example: /// Set Heart Rate Mode Event setHeartRateMode( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_heart_rate_mode), /// Set Heart Rate Mode libManager.send(evt: CmdEvtType.setHeartRateMode, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int 170: Manual Mode85: Off136: Auto153: Continuous Monitoring has_time_range int Time Range0: No1: Yes start_hour int Start Hour (24-hour format, 0-23) start_minute int Start Minute (0-59) end_hour int End Hour end_minute int End Minute measurement_interval int Measurement Interval (in minutes) Example: { \"mode\": 170, \"has_time_range\": 1, \"start_hour\": 10, \"start_minute\": 30, \"end_hour\": 20, \"end_minute\": 30, \"measurement_interval\": 15 } JSON Field Received by the App: Field Name Field Type Field Description status_code int 0: Success, non-zero: Failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:58:40 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetUint.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetUint.html","title":"Set Unit","keywords":"","body":"Set Units Function list: [setSupportFahrenheit, setSupportCalorieUnit, setSupportSwimPoolUnit, setSupportCyclingUnit, setSupportWalkRunUnit] Flutter Example: /// Set Unit event number setUnit( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_unit), /// Set Unit libManager.send(evt: CmdEvtType.setUnit, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description dist_unit int Distance Unit:0: Invalid1: km (metric)2: mi (imperial) weight_unit int Weight Unit:0: Invalid1: kg2: lb temp int Temperature Unit:0: Invalid1: ℃2: ℉ stride int Walking Stride:0: Invalid0: cm language int Language is_12hour_format int Time Format:0: Invalid1: 24-hour format2: 12-hour format stride_run int Running Stride:0: Invalid1: cmDefault value for males: 90cm stride_gps_cal int Stride Calibration via GPS on/off:0: Invalid1: On2: Off week_start_date int Start day of the week:0: Monday1: Sunday3: Saturday calorie_unit int Calorie unit setting:0: Invalid1: Default kCal2: Cal3: kJ swim_pool_unit int Swim pool unit setting:0: Invalid1: Default meters2: yards cycling_unit int Cycling unit:0: Invalid1: km2: miles walking_running_unit int Unit for walking or running (km/miles) setting:0: Invalid1: km2: milesRequires support from the device firmware (V3_support_walking_running_unit) Example: { \"dist_unit\": 1, \"weight_unit\": 1, \"temp\": 1, \"stride\": 1, \"language\": 1, \"is_12hour_format\": 1, \"stride_run\": 1, \"stride_gps_cal\": 1, \"week_start_date\": 1, \"calorie_unit\": 1, \"swim_pool_unit\": 1, \"cycling_unit\": 1, \"walking_running_unit\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0: Success, Non-zero: Failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:14:30 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetSleepPeriod.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetSleepPeriod.html","title":"Set Sleep Period","keywords":"","body":"Set Sleep Period Menu: exSleepPeriod Flutter Example: /// Set sleep period event setSleepPeriod( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sleep_period), /// Set sleep period libManager.send(evt: CmdEvtType.setSleepPeriod, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int Switch170 for on, 85 for off start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) Example: { \"on_off\": 170, \"start_hour\": 23, \"start_minute\": 0, \"end_hour\": 8, \"end_minute\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0 for success, non-zero for failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:12:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetUpHandGesture.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetUpHandGesture.html","title":"Set Up Hand Gesture","keywords":"","body":"Set Raise-to-Wake Gesture Function list: setUpHandGesture Flutter Example: /// Raise-to-wake gesture event number setUpHandGesture( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_up_hand_gesture), /// Set Raise-to-wake gesture libManager.send(evt: CmdEvtType.setUpHandGesture, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int Switch170: On85: Off show_second int Duration for the screen to stay on, in seconds has_time_range int Whether there is a time range1: Yes0: No start_hour int Starting hour of the time range start_minute int Starting minute of the time range end_hour int Ending hour of the time range end_minute int Ending minute of the time range Example: { \"on_off\": 170, \"show_second\": 10, \"has_time_range\": 1, \"start_hour\": 8, \"start_minute\": 0, \"end_hour\": 18, \"end_minute\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0: Success, Non-zero: Failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:16:03 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetBpMeasure.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetBpMeasure.html","title":"Set Blood Pressure Measurement","keywords":"","body":"Set Blood Pressure Measurement Function: getSupportBpSetOrMeasurementV2 Flutter Example: /// Blood pressure measurement event number setBpMeasurement( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_bp_measure), /// Blood pressure measurement libManager.send(evt: CmdEvtType.setBpMeasurement, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description flag int 1: Start measurement2: End measurement3: Get blood pressure data Example: { \"flag\": 1 } JSON fields received by the App: Field Name Field Type Field Description status int 0: Not supported1: Measurement in progress2: Measurement successful3: Measurement failed4: Device in exercise mode systolic_bp int Systolic blood pressure diastolic_bp int Diastolic blood pressure Example: { \"status\": 170, \"systolic_bp\": 120, \"diastolic_bp\": 68 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetScreenBrightness.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetScreenBrightness.html","title":"Set Screen Brightness","keywords":"","body":"Set Screen Brightness Menu: setScreenBrightness 【v2SupportSetBrightScreenTime (To be filled by SDK), v2SupportAdjustNightTurnOnAfterSunset (To be filled by SDK), v2SupportAddNightLevel (To be filled by SDK)】 Flutter Example: /// Screen brightness setting event setScreenBrightness( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_screen_brightness), /// Set screen brightness libManager.send(evt: CmdEvtType.setScreenBrightness, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description level int Brightness level0-100 opera int 0: Auto-sync configuration1: User manual adjustment mode int 0: Specify level1: Use ambient light sensor2: level does not take effect auto_adjust_night int Nighttime auto brightness adjustment0: Invalid, defined by firmware1: Off2: Auto adjust brightness at night3: Nighttime brightness decrease, using the set time start_hour int Start time - hour start_minute int Start time - minute end_hour int End time - hour end_minute int End time - minute night_level int Nighttime brightness show_interval int Display interval Example: { \"level\": 20, \"opera\": 0, \"mode\": 0, \"auto_adjust_night\": 3, \"start_hour\": 18, \"start_minute\": 0, \"end_hour\": 23, \"end_minute\": 0, \"night_level\": 20, \"show_interval\": 10 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:10:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetConfigGPS.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetConfigGPS.html","title":"Set GPS Information","keywords":"","body":"Set GPS Information Flutter Example: /// Set temperature switch event number setTemperatureSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_temperature_switch), /// Set temperature switch libManager.send(evt: CmdEvtType.setTemperatureSwitch, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description utc_year int Year utc_month int Month utc_day int Day utc_hour int Hour utc_minute int Minute utc_second int Second start_mode int Start mode 1: Cold start 2: Hot start Default 2 gsop_operation_mode int Operation mode 1: Normal 2: Low power 4: Balance 5: 1PPS Default 1 gsop_cycle_ms int Position cycle in milliseconds Default 1000 (1 second) gns_value int Positioning satellite mode 1: GPS 2: GLONASS 3: GPS + GLONASS Default 1 Example: { \"utc_year\": 2022, \"utc_month\": 12, \"utc_day\": 19, \"utc_hour\": 16, \"utc_minute\": 18, \"utc_second\": 30, \"start_mode\": 2, \"gsop_operation_mode\": 1, \"gsop_cycle_ms\": 1000, \"gns_value\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetControlGPS.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetControlGPS.html","title":"Set Control GPS","keywords":"","body":"Set Control GPS Flutter Example: /// Control GPS event number setGpsControl( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_control_gps), /// Set control GPS libManager.send(evt: CmdEvtType.setGpsControl, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description operate int 1: Control 2: Query type int 1: Enable log 2: Disable log 3: Write AGPS data 4: Erase AGPS data 5: Write GPS firmware Example: { \"operate\": 2, \"type\": 0 } JSON fields received by the App: Field Name Field Type Field Description type int 1: Enable log 2: Disable log 3: Write AGPS data 4: Erase AGPS data 5: Write GPS firmware status int 0: Invalid 1: Command in progress 2: Completed error_code int 0 for success, non-zero for failure Example: { \"type\": 2, \"status\": 0, \"error_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:48:42 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetConnectParam.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetConnectParam.html","title":"Set Control Connection Parameters","keywords":"","body":"Set Control Connection Parameters Flutter Example: /// Control connection parameters event number setConnParam( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_conn_param), /// Set control connection parameters libManager.send(evt: CmdEvtType.setConnParam, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description mode int 1: Control 2: Query modify_conn_param int 1: Enable log 2: Disable log 3: Write AGPS data 4: Erase AGPS data 5: Write GPS firmware max_interval int Maximum interval min_interval int Minimum interval slave_latency int Latency conn_timeout int Connection timeout Example: { \"mode\": 2, \"modify_conn_param\": 0, \"max_interval\": 0, \"min_interval\": 0, \"slave_latency\": 0, \"conn_timeout\": 0 } JSON fields received by the App: Field Name Field Type Field Description cur_mode int Current mode 1: Set fast mode 2: Set slow mode err_code int 0 for success, non-zero for failure Example: { \"cur_mode\": 2, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:48:06 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetHotStartParam.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetHotStartParam.html","title":"Set Hot Start Parameters","keywords":"","body":"Set Hot Start Parameters Flutter Example: /// Set Hot Start Parameters Event setHotStartParam( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_hot_start_param), /// Set Hot Start Parameters libManager.send(evt: CmdEvtType.setHotStartParam, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description longitude int Crystal oscillator offset latitude int Longitude x10^6 altitude int Latitude x10^6 tcxo_offset int Height x10 Example: { \"longitude\": 2, \"latitude\": 0, \"altitude\": 0, \"tcxo_offset\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:57:16 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetMenstruation.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetMenstruation.html","title":"Set Menstruation","keywords":"","body":"Set Menstrual Cycle Menu: setMenstruation [getMenstrualAddNotifyFlagV3, support_set_menstrual_on_off (SDK to be supplied)] Flutter Example: /// Set Menstruation Event setMenstruation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_menstruation), /// Set Menstruation libManager.send(evt: CmdEvtType.setMenstruation, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int Menstrual reminder switch170: On, 85: Off menstrual_length int Menstrual length menstrual_cycle int Menstrual cycle last_menstrual_year int Year of the last menstrual start date last_menstrual_month int Month of the last menstrual start date last_menstrual_day int Day of the last menstrual start date ovulation_interval_day int Interval from the next menstrual start date to ovulation, usually 14 days ovulation_before_day int Number of days before ovulation considered fertile, usually 5 days ovulation_after_day int Number of days after ovulation considered fertile, usually 5 days notify_flag int Notification type0: Invalid1: Allow notifications2: Silent notifications3: Turn off notificationsRequires firmware support for V3_menstrual_add_notify_flag menstrual_on_off int Menstrual switch170: On, 85: OffRequires firmware support for support_set_menstrual_on_off Example: { \"on_off\": 170, \"menstrual_length\": 7, \"menstrual_cycle\": 21, \"last_menstrual_year\": 2022, \"last_menstrual_month\": 12, \"last_menstrual_day\": 19, \"ovulation_interval_day\": 15, \"ovulation_before_day\": 5, \"ovulation_after_day\": 5, \"notify_flag\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:01:26 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetMenstruationRemind.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetMenstruationRemind.html","title":"Set Menstruation Reminder","keywords":"","body":"Set Menstrual Reminder Menu: setMenstruation [setMenstrualAddPregnancy, not_support_set_ovulation (SDK to be supplied)] Flutter Example: /// Set Menstrual Reminder Event setMenstruationRemind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_menstruation_remind), /// Set Menstrual Reminder libManager.send(evt: CmdEvtType.setMenstruationRemind, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description start_day int Number of days before start day to send reminder ovulation_day int Number of days before ovulation day to send reminder hour int Reminder time, hour minute int Reminder time, minute pregnancy_day_before_remind int Number of days before the start of the fertile period to send reminder pregnancy_day_end_remind int Number of days before the end of the fertile period to send reminder menstrual_day_end_remind int Number of days before the end of the menstrual period to send reminder Example: { \"start_day\": 5, \"ovulation_day\": 5, \"hour\": 21, \"minute\": 0, \"pregnancy_day_before_remind\": 5, \"pregnancy_day_end_remind\": 5, \"menstrual_day_end_remind\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:02:10 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetCalorieDistanceGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetCalorieDistanceGoal.html","title":"Set Calorie and Distance Goal","keywords":"","body":"Set Calorie and Distance Goal (Set Daily Three Rings) Function: setCalorieGoal, exMain3DistanceGoal (to be supplemented in SDK), set_mid_high_time_goal_03_43 (to be supplemented in C library JSON ID), getSupportGetMainSportGoalV3, getSupportSetGetTimeGoalTypeV2 Flutter Example: /// Set daily three rings goal event number setCalorieDistanceGoal( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_calorie_distance_goal), /// Set daily three rings goal libManager.send(evt: CmdEvtType.setCalorieDistanceGoal, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description calorie int Activity calorie goal Unit: calories distance int Distance Unit: meters calorie_min int Minimum activity calorie value Unit: calories calorie_max int Maximum activity calorie value Unit: calories mid_high_time_goal int Mid to high-intensity exercise duration goal Unit: seconds walk_goal_time int Goal time time_goal_type int Goal type 0: Invalid 1: Daily goal 2: Weekly goal Example: { \"calorie\": 500, \"distance\": 200, \"calorie_min\": 100, \"calorie_max\": 666, \"mid_high_time_goal\": 600, \"walk_goal_time\": 600, \"time_goal_type\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetSp02Data.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetSp02Data.html","title":"Set Blood Oxygen Switch","keywords":"","body":"Set SpO2 Switch Menu: setSpo2Data [setSpo2AllDayOnOff, v3SupportSetSpo2LowValueRemind (to be filled by SDK), getSpo2NotifyFlag] Flutter Example: /// Set SpO2 switch event setSpo2Switch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_spo2), /// Set SpO2 switch libManager.send(evt: CmdEvtType.setSpo2Switch, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int SpO2 all-day switch170 for on, 85 for off start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) low_spo2_on_off int Low SpO2 switch170 for on, 85 for offRequires support from the menu v3_support_set_spo2_low_value_remind low_spo2_value int Low SpO2 thresholdRequires support from the menu v3_support_set_spo2_low_value_remind notify_flag int Notification type0: Invalid1: Allow notifications2: Silent notifications3: Disable notificationsRequires support from the menu v3_spo2_add_notify_flag Example: { \"on_off\": 170, \"start_hour\": 14, \"start_minute\": 0, \"end_hour\": 20, \"end_minute\": 0, \"low_spo2_on_off\": 170, \"low_spo2_value\": 20, \"notify_flag\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description err_code int 0 for success, non-zero for error code Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:13:15 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetPressure.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetPressure.html","title":"Set Pressure Switch","keywords":"","body":"Set Pressure Switch Menu: setPressureData [getPressureNotifyFlagMode, v2SendCalibrationThreshold (SDK to be supplemented)] Flutter Example: /// Pressure switch setting event setStressSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_pressure), /// Set pressure switch libManager.send(evt: CmdEvtType.setStressSwitch, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int Overall switch170: On85: Off start_hour int Start time - hour start_minute int Start time - minute end_hour int End time - hour end_minute int End time - minute remind_on_off int Stress reminder switch170: On85: OffDoesn't work if on_off is off repeat int bit0 is invalid, bit1 to bit7 represent Monday to Sunday, same as alarm interval int Reminder interval in minutes, default is 60 minutes high_threshold int High pressure threshold stress_threshold int Pressure calibration threshold, default is 80Requires firmware support for v2_send_calibration_threshold notify_flag int Notification type0: Invalid1: Allow notification2: Silent notification3: Disable notificationRequires firmware support for V3_pressure_add_notify_flag_and_mode Example: { \"on_off\": 170, \"start_hour\": 14, \"start_minute\": 0, \"end_hour\": 20, \"end_minute\": 0, \"remind_on_off\": 170, \"repeat\": 127, \"interval\": 60, \"high_threshold\": 170, \"stress_threshold\": 80, \"notify_flag\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:08:21 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetSportModeSort.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetSportModeSort.html","title":"Set Sport Mode Sorting","keywords":"","body":"Set Sport Mode Sorting Menu: setSportModeSort Flutter Example: /// Set Sport Mode Sorting Event Code setSportModeSort( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_sport_mode_sort), /// Set Sport Mode Sorting libManager.send(evt: CmdEvtType.setSportModeSort, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description items Array Array of sport mode sorting details with index and type Field Name Field Type Field Description index int Sorting index (starting from 1, 0 is invalid) type int Sport mode type1 for walking2 for running... and so on. Example: { \"items\": [ { \"index\": 1, \"type\": 0 }, { \"index\": 2, \"type\": 2 }, { \"index\": 3, \"type\": 4 }, { \"index\": 4, \"type\": 8 }, { \"index\": 5, \"type\": 85 }, { \"index\": 6, \"type\": 78 }, { \"index\": 7, \"type\": 45 }, { \"index\": 8, \"type\": 65 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:18:18 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetWalkReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetWalkReminder.html","title":"Set Walk Reminder","keywords":"","body":"Set Walk Reminder Function: setWalkReminder [setWalkReminderAddNotify, v2SupportSetGetNoReminderOnWalkReminder (to be supplemented)] Flutter Example: /// Set walk reminder event number setWalkRemind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_walk_reminder), /// Set walk reminder libManager.send(evt: CmdEvtType.setWalkRemind, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int Switch0: Off1: On goal_step int Goal stepsReserved start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) repeat int Repeat goal_time int Goal timeReserved notify_flag int Notification type0: Invalid1: Allow notifications2: Silent notifications3: Disable notificationsRequires firmware support for V3_walk_reminder_add_notify_flag do_not_disturb_on_off int Do not disturb (no reminder) switch0: Off1: OnRequires firmware support for v2_support_set_get_no_reminder_on_walk_reminder no_disturb_start_hour int Start time of do not disturb (hour) no_disturb_start_minute int Start time of do not disturb (minute) no_disturb_end_hour int End time of do not disturb (hour) no_disturb_end_minute int End time of do not disturb (minute) Example: { \"on_off\": 1, \"goal_step\": 2000, \"start_hour\": 14, \"start_minute\": 0, \"end_hour\": 20, \"end_minute\": 0, \"repeat\": 127, \"goal_time\": 60, \"notify_flag\": 1, \"do_not_disturb_on_off\": 0, \"no_disturb_start_hour\": 0, \"no_disturb_start_minute\": 0, \"no_disturb_end_hour\": 0, \"no_disturb_end_minute\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:19:00 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetBreatheTrain.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetBreatheTrain.html","title":"Set Breathe Training","keywords":"","body":"Set Breathing Training Function: setSupportBreathRate Flutter Example: /// Breathing training event number setBreatheTrain( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_breathe_train), /// Breathing training libManager.send(evt: CmdEvtType.setBreatheTrain, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description frequency int Breathing rate per minute Example: { \"frequency\": 30 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetActivitySwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetActivitySwitch.html","title":"Set Activity Recognition Switch","keywords":"","body":"Set Activity Recognition Switch Function: setActivitySwitch [v3AutoActivitySwitch (to be provided), auto_activity_switch_add_smart_rope_02_EA_03_49 (C library jsonid SDK to be provided)] Flutter Example: /// Activity switch setting event number setActivitySwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_activity_switch), /// Set activity switch libManager.send(evt: CmdEvtType.setActivitySwitch, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description auto_identify_sport_walk int Auto identify walking switch: 0 - Off, 1 - On auto_identify_sport_run int Auto identify running switch: 0 - Off, 1 - On auto_identify_sport_bicycle int Auto identify cycling switch: 0 - Off, 1 - On auto_pause_on_off int Auto pause during activity: 0 - Off, 1 - On auto_end_remind_on_off_on_off int End reminder: 0 - Off, 1 - On auto_identify_sport_elliptical int Auto identify elliptical switch: 0 - Off, 1 - On auto_identify_sport_rowing int Auto identify rowing machine switch: 0 - Off, 1 - On auto_identify_sport_swim int Auto identify swimming switch: 0 - Off, 1 - On Example: { \"auto_identify_sport_walk\": 0, \"auto_identify_sport_run\": 0, \"auto_identify_sport_bicycle\": 0, \"auto_pause_on_off\": 0, \"auto_end_remind_on_off_on_off\": 1, \"auto_identify_sport_elliptical\": 0, \"auto_identify_sport_rowing\": 0, \"auto_identify_sport_swim\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetDrinkWaterReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetDrinkWaterReminder.html","title":"Set Drink Water Reminder","keywords":"","body":"Set Drink Water Reminder Menu: setDrinkWaterReminderAddNotify [getDrinkWaterNotifyFlag, v2_support_set_no_reminder_on_drink_reminder_03_60 (SDK to be supplemented)] Flutter Example: /// Set drink water reminder event number setDrinkWaterRemind( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_drink_water_reminder), /// Set drink water reminder libManager.send(evt: CmdEvtType.setDrinkWaterRemind, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description on_off int Switch 0: Off 1: On start_hour int Start time Hour start_minute int Start time Minute end_hour int End time Hour end_minute int End time Minute repeat int Repeat bit0: Invalid (bit1 - bit7): For Monday to Sunday, same as alarm interval int Reminder interval in minutes notify_flag int Notification type 0: Invalid 1: Allow notification 2: Silent notification 3: Notification off do_not_disturb_on_off int Do not disturb switch 00: Off 01: On no_disturb_start_hour int Do not disturb start time Hour no_disturb_start_minute int Do not disturb start time Minute no_disturb_end_hour int Do not disturb end time Hour no_disturb_end_minute int Do not disturb end time Minute Example: { \"on_off\":1, \"start_hour\":18, \"start_minute\":7, \"end_hour\":23, \"end_minute\":12, \"repeat\":127, \"interval\":20, \"notify_flag\":1, \"do_not_disturb_on_off\":1, \"no_disturb_start_hour\":9, \"no_disturb_start_minute\":0, \"no_disturb_end_hour\":12, \"no_disturb_end_minute\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:51:41 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetSimpleFileOperations.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetSimpleFileOperations.html","title":"Simple File Operation","keywords":"","body":"Simple File Operations Flutter Example: /// Simple file operations event funcSimpleFileOpt( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_simple_file_operations), /// Simple file operations libManager.send(evt: CmdEvtType.funcSimpleFileOpt, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description operate int Operation type0: Get1: Overwrite2: Delete3: Copy index int Index number dest_index int Destination index, only used for copying, invalid for other cases Example: { \"operate\": 0, \"index\": 1, \"dest_index\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description error int Error code0 for success, others for errors operate int Operation type0: Get1: Overwrite2: Delete index int Index number Example: { \"error\": 0, \"operate\": 0, \"index\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:11:45 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetMenuList.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetMenuList.html","title":"Set Menu List","keywords":"","body":"Set Menu List Menu: setMenuListMain7 [supportCompass (to be supplied), supportBarometricAltimeter (to be supplied), support_call_list (to be supplied), supportSetMenuListTypeMeasure (to be supplied)] Flutter Example: /// Set Menu List Event setMenuList( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_menu_list), /// Set Menu List libManager.send(evt: CmdEvtType.setHeartRateMode, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description items int [] Menu list with built-in sortingWhen no sorting is needed, it will be displayed if it has a value, otherwise it won't be displayedWhen sorting is needed, it should be arranged in an array starting from 00 Invalid1 Step Count2 Heart Rate3 Sleep4 Take Photo5 Alarm6 Music7 Stopwatch8 Timer9 Activity Mode10 Weather11 Breathing Exercise12 Find Phone13 Stress14 Data Rings15 Time Screen16 Last Activity17 Health Data18 Blood Oxygen19 Menu Settings20 Alexa Voice Display in Order21 X Screen (gt01pro-X added)22 Calories (Doro Watch added)23 Distance (Doro Watch added)24 One-key Measurement (IDW05 added)25 Renpho Health (IDW12 added)26 Compass (mp01 added)27 Barometric Altimeter (mp01 added) Example: { \"items\": [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:02:41 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetTakePicture.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetTakePicture.html","title":"Set Control Camera","keywords":"","body":"Set Control for Taking Photos Menu: bleControlTakePhoto (To be added in the SDK) Flutter Example: /// Set Take Picture Event Code setTakePicture( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_take_picture), /// Set Control for Taking Photos libManager.send(evt: CmdEvtType.setTakePicture, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int 0 for off1 for on Example: { \"on_off\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:20:16 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetNotice.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetNotice.html","title":"Set Notification Center Switch","keywords":"","body":"Set Notification Center Switch Menu: ancs(c library jsonid SDK to be supplemented)【setMsgAllSwitch】 Flutter Example: /// Set Notification Center Event setNotificationCenter( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_notice), /// Set Notification Center libManager.send(evt: CmdEvtType.setNotificationCenter, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description notify_switch int Notification reminder switch85: BLE switch on170: BLE switch off136: Set sub-switches187: BT switch on (switch)204: BLE and BT on (switch)0: Invalid call_switch int Incoming call reminder switch85: On170: Off0: Invalid notify_item1 int Sub-app switch 1, each bit represents an app notify_item2 int Sub-app switch 2, each bit represents an app call_delay int Incoming call reminder delay, in seconds notify_item3 int Sub-app switch 3, each bit represents an app notify_item4 int Sub-app switch 4, each bit represents an app notify_item5 int Sub-app switch 5, each bit represents an app notify_item6 int Sub-app switch 6, each bit represents an app notify_item7 int Sub-app switch 7, each bit represents an app notify_item8 int Sub-app switch 8, each bit represents an app notify_item9 int Sub-app switch 9, each bit represents an app notify_item10 int Sub-app switch 10, each bit represents an app msg_all_switch int Message app switchOn: 85Off: 170 notify_item11 int Sub-app switch 11, each bit represents an app notify_item12 int Sub-app switch 12, each bit represents an app Example: { \"call_delay\" : 0, \"call_switch\" : 85, \"msg_all_switch\" : 0, \"notify_item1\" : 0, \"notify_item2\" : 0, \"notify_item3\" : 0, \"notify_item4\" : 0, \"notify_item5\" : 0, \"notify_item6\" : 0, \"notify_item7\" : 0, \"notify_item8\" : 0, \"notify_item9\" : 0, \"notify_item10\" : 0, \"notify_item11\" : 0, \"notify_item12\" : 0, \"notify_switch\" : 85 } JSON Fields Received by the App: Field Name Field Type Field Description notify_switch int Notification reminder switch status_code int Status0: Unknown timeout1: Success2: Failed (canceled)3: Firmware pairing timeout err_code int 0: SuccessNon-zero: Failure Example: { \"notify_switch\" : 0, \"status_code\" : 85, \"err_code\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:06:42 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetClearOperations.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetClearOperations.html","title":"Set Delete File","keywords":"","body":"Set Delete File Flutter Example: /// Delete log event number setClearOperation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_clear_operations), /// Delete log libManager.send(evt: CmdEvtType.setClearOperation, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description type int 1: Overheating log 2: Battery log Example: { \"type\": 1 } JSON fields received by the App: Field Name Field Type Field Description state int 0: Success 1: Fail Example: { \"state\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetBleVoice.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetBleVoice.html","title":"Set Bluetooth Voice","keywords":"","body":"Set Phone Volume for Device Function: setBleVoice (to be provided) Flutter Example: /// Set phone volume for device event number setBleVoice( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_ble_voice), /// Set phone volume for device libManager.send(evt: CmdEvtType.setBleVoice, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description total_volume int Total volume current_volume int Current volume Example: { \"total_volume\": 100, \"current_volume\": 85 } JSON fields received by the App: Field Name Field Type Field Description state int 0 for failure, 1 for success Example: { \"state\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetHandWashingReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetHandWashingReminder.html","title":"Set Hand Washing Reminder","keywords":"","body":"Set Hand Washing Reminder Menu: setHandWashReminder Flutter Example: /// Set Hand Washing Reminder Event setHandWashingReminder( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_set_hand_washing_reminder), /// Set Hand Washing Reminder libManager.send(evt: CmdEvtType.setHandWashingReminder, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int 0: Off1: OnDefault is off start_hour int Start hour of the reminder start_minute int Start minute of the reminder end_hour int End hour of the reminder end_minute int End minute of the reminder repeat int Repeatbit0: Invalidbit1-7: Monday to Sunday interval int Reminder interval in minutesDefault is 60 minutes Example: { \"on_off\": 0, \"start_hour\": 0, \"start_minute\": 0, \"end_hour\": 0, \"end_minute\": 0, \"repeat\": 0, \"interval\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0: Failed1: Success Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:56:48 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetTakingMedicineReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetTakingMedicineReminder.html","title":"Set Taking Medicine Reminder","keywords":"","body":"Set Medication Reminder Menu: exTableMain11TakingMedicine (To be added in the SDK) Flutter Example: /// Set Taking Medicine Reminder Event Code setTakingMedicineReminder( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_taking_medicine_reminder), /// Set Medication Reminder libManager.send(evt: CmdEvtType.setTakingMedicineReminder, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description taking_medicine_id int ID ranging from 1 to 5 on_off int 0 for off1 for on start_hour int Starting hour of the reminder start_minute int Starting minute of the reminder end_hour int Ending hour of the reminder end_minute int Ending minute of the reminder repeat int Bit0 is invalidBit1 to Bit7 represent Monday to Sunday interval int Reminder interval in minutesDefault is 60 minutes do_not_disturb_on_off int Do not disturb time period switch0 for off1 for onDefault is off do_not_disturb_start_hour int Do not disturb start hour do_not_disturb_start_minute int Do not disturb start minute do_not_disturb_end_hour int Do not disturb end hour do_not_disturb_end_minute int Do not disturb end minute Example: { \"taking_medicine_id\": 1, \"on_off\": 0, \"start_hour\": 10, \"start_minute\": 22, \"end_hour\": 23, \"end_minute\": 0, \"repeat\": 127, \"interval\": 60, \"do_not_disturb_on_off\": 0, \"do_not_disturb_start_hour\": 0, \"do_not_disturb_start_minute\": 0, \"do_not_disturb_end_hour\": 0, \"do_not_disturb_end_minute\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0 for failed1 for success Example: { \"is_success\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:22:51 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetHRModeSmart.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetHRModeSmart.html","title":"Set Smart Heart Rate Mode","keywords":"","body":"Set Smart Heart Rate Mode Menu: setSmartHeartRate Flutter Example: /// Set Smart Heart Rate Mode Event setHeartRateModeSmart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_heart_rate_mode_smart), /// Set Smart Heart Rate Mode libManager.send(evt: CmdEvtType.setHeartRateModeSmart, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int 0: Invalid1: Weak2: Medium3: Strong notify_flag int Notification Type0: Invalid1: Allow Notifications2: Silent Notifications3: Disable Notifications high_heart_mode int 170: Enable Smart High Heart Rate Alert85: Disable low_heart_mode int 170: Enable Smart Low Heart Rate Alert85: Disable high_heart_value int Smart High Heart Rate Alert Threshold low_heart_value int Smart Low Heart Rate Alert Threshold start_hour int Start Time of Heart Rate Monitoring (hour) start_minute int Start Time of Heart Rate Monitoring (minute) end_hour int End Time of Heart Rate Monitoring (hour) end_minute int End Time of Heart Rate Monitoring (minute) Example: { \"mode\": 1, \"notify_flag\": 0, \"high_heart_mode\": 85, \"low_heart_mode\": 85, \"high_heart_value\": 100, \"low_heart_value\": 80, \"start_hour\": 9, \"start_minute\": 0, \"end_hour\": 12, \"end_minute\": 0 } JSON Field Received by the App: Field Name Field Type Field Description err_code int 0: Success, non-zero: Error code Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:59:23 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetNoise.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetNoise.html","title":"Set Noise Volume Switch and Threshold","keywords":"","body":"Set Environmental Noise Volume On/Off and Threshold Menu: syncV3Noise Flutter Example: /// Set Environmental Noise Volume On/Off and Threshold Event setV3Noise( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_v3_noise), /// Set Environmental Noise Volume On/Off and Threshold libManager.send(evt: CmdEvtType.setV3Noise, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int All-day environmental noise volume switch170: On85: Off start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) high_noise_on_off int Threshold switch170: On85: Off high_noise_value int Threshold value Example: { \"mode\": 85, \"start_hour\": 15, \"start_minute\": 0, \"end_hour\": 20, \"end_minute\": 0, \"high_noise_on_off\": 85, \"high_noise_value\": 100 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0 for failure, 1 for success Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:03:39 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetScientificSleepSwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetScientificSleepSwitch.html","title":"Set Scientific Sleep Switch","keywords":"","body":"Set Scientific Sleep Switch Menu: setScientificSleepSwitch Flutter Example: /// Scientific sleep switch setting event setScientificSleepSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_scientific_sleep_switch), /// Set scientific sleep switch libManager.send(evt: CmdEvtType.setScientificSleepSwitch, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int Mode170: Scientific sleep85: Normal sleep start_hour int Start time - hour start_minute int Start time - minute end_hour int End time - hour end_minute int End time - minute Example: { \"mode\": 85, \"start_hour\": 23, \"start_minute\": 0, \"end_hour\": 9, \"end_minute\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0 for failure, 1 for success Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:09:40 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetTemperatureSwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetTemperatureSwitch.html","title":"Set Night Temperature Switch","keywords":"","body":"Set Night-time Temperature Switch Menu: setTemperatureSwitchSupport Flutter Example: /// Set Night-time Temperature Switch Event Code setTemperatureSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_temperature_switch), /// Set Night-time Temperature Switch libManager.send(evt: CmdEvtType.setTemperatureSwitch, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int Mode: 170 for on85 for off start_hour int Start time, hour start_minute int Start time, minute end_hour int End time, hour end_minute int End time, minute unit int Temperature unit setting:1 for Celsius16 for Fahrenheit Example: { \"mode\": 85, \"start_hour\": 19, \"start_minute\": 0, \"end_hour\": 23, \"end_minute\": 0, \"unit\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0 for failed1 for success Example: { \"is_success\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:12:13 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetFitnessGuidance.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetFitnessGuidance.html","title":"Set Fitness Guidance","keywords":"","body":"Set Fitness Guidance Switch Menu: setSetFitnessGuidance Flutter Example: /// Fitness Guidance Event setFitnessGuidance( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_fitness_guidance), /// Fitness Guidance libManager.send(evt: CmdEvtType.setFitnessGuidance, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description mode int Fitness guidance mode switch170: On85: Off start_hour int Start hour start_minute int Start minute end_hour int End hour end_minute int End minute notify_flag int Notification type0: Invalid1: Allow2: Silent3: Disable go_mode int Reminders to move switch170: On85: Off repeat int Repeatbit0: Invalidbit1-7: Monday to Sunday target_steps int Target steps Example: { \"mode\": 85, \"start_hour\": 9, \"start_minute\": 0, \"end_hour\": 18, \"end_minute\": 0, \"notify_flag\": 1, \"go_mode\": 85, \"repeat\": 127, \"target_steps\": 2000 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0: Failed1: Success Example: { \"is_success\": 0 } Please do not change the structure or add any additional content when translating the Chinese to English. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:56:10 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetUnreadAppReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetUnreadAppReminder.html","title":"Set Unread App Reminder Switch","keywords":"","body":"Set Unread Message Reminder Switch Function list: setSetUnreadAppReminder Flutter Example: /// Unread message reminder switch event number setUnreadAppReminder( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_unread_app_reminder), /// Unread message reminder switch libManager.send(evt: CmdEvtType.setUnreadAppReminder, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int Switch170: On85: Off Example: { \"on_off\": 85 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0: Failed1: Success Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:15:08 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetNotificationStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetNotificationStatus.html","title":"Set Notification App Status","keywords":"","body":"Set Notification App Status Menu: setSetNotificationStatus Flutter Example: /// Notification app status setting event setNotificationStatus( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_notification_status), /// Use this command to set the notification app status libManager.send(evt: CmdEvtType.setNotificationStatus, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description notify_flag int Switch data status:170: Allow notification187: Silent notification85: Disable notification Example: { \"notify_flag\": 170 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0 for failure1 for success Example: { \"is_success\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:07:19 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetRespiRateONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetRespiRateONOFF.html","title":"Set Respiration Rate Switch","keywords":"","body":"Set Respiration Rate Switch Menu: setRespirationRate Flutter Example: /// Respiration rate switch setting event setRRespiRateTurn( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_respi_rate_on_off), /// Set respiration rate switch libManager.send(evt: CmdEvtType.setRRespiRateTurn, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int 85: Off170: On Example: { \"on_off\": 170 } JSON Fields Received by the App: Field Name Field Type Field Description err_code int 0 for success, non-zero for error Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 12:09:04 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetBodyPowerONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetBodyPowerONOFF.html","title":"Set Body Battery Switch","keywords":"","body":"Set Body Power Switch Function: syncV3BodyPower Flutter Example: /// Set body power switch event number setBodyPowerTurn( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_body_power_on_off), /// Set body power switch libManager.send(evt: CmdEvtType.setBodyPowerTurn, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description on_off int 85: Off 170: On Example: { \"on_off\": 170 } JSON fields received by the App: Field Name Field Type Field Description err_code int 0 for success, non-zero for error code Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetWeatherSwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetWeatherSwitch.html","title":"Set Weather Switch","keywords":"","body":"Set Weather Switch Function: setSetV3Weather Flutter Example: /// Set weather switch event number setWeatherSwitch( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_weather_switch), /// Set weather switch libManager.send(evt: CmdEvtType.setWeatherSwitch, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description on_off int 85: Off170: On Example: { \"on_off\": 170 } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0 for success, non-zero for failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:22:43 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetWeatcherData.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetWeatcherData.html","title":"Set Weather Data","keywords":"","body":"Set Weather Data Function: setWeatherData Flutter Example: /// Set weather data event number setWeatherData( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_weatcher_data), /// Set weather data libManager.send(evt: CmdEvtType.setWeatherData, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description type int Weather type temp int Current temperature max_temp int Maximum temperature of the day min_temp int Minimum temperature of the day humidity int Current humidity uv_intensity int Current UV intensity aqi int Current air quality index (AQI) future array Weather conditions for the next three daysArray of type, min_temp, and max_temp Field Name Field Type Field Description type int Weather type min_temp int Minimum temperature max_temp int Maximum temperature Example: { \"type\": 1, \"temp\": 10, \"max_temp\": 18, \"min_temp\": 7, \"humidity\": 20, \"uv_intensity\": 30, \"aqi\": 60, \"future\": [ { \"type\": 2, \"min_temp\": 10, \"max_temp\": 18 }, { \"type\": 2, \"min_temp\": 9, \"max_temp\": 16 }, { \"type\": 1, \"min_temp\": 8, \"max_temp\": 19 } ] } JSON Fields Received by the App: Field Name Field Type Field Description status_code int 0 for success, non-zero error code Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:21:22 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetWeatcherCityName.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetWeatcherCityName.html","title":"Set Weather City Name","keywords":"","body":"Set Weather City Name Function: setWeatherCity Flutter Example: /// Set weather city name event number setWeatherCityName( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_weatcher_city_name), /// Set weather city name libManager.send(evt: CmdEvtType.setWeatherCityName, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description version int Version number (0) city_name char [] City nameFor firmwares with V3_support_v3_long_city_name, the city name can be up to 75 bytes long. Without the function table enabled, the default size is 17 bytes. Example: { \"version\": 0, \"city_name\": \"shenzhen\" } JSON Fields Received by the App: Field Name Field Type Field Description version int 0 for failure, 1 for success err_code int 0 for success, non-zero error code Example: { \"version\": 0, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:20:21 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetWeatcherSunTime.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2SetEvt/IDOSetWeatcherSunTime.html","title":"Set Sunrise and Sunset Time","keywords":"","body":"Set Sunrise and Sunset Time Function: support_set_weatch_sun_time_0a_06 (C library JSON ID, SDK to be supplemented) Flutter Example: /// Set sunrise and sunset time event number setWeatherSunTime( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_weatcher_set_sun_time), /// Set sunrise and sunset time libManager.send(evt: CmdEvtType.setWeatherSunTime, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description sunrise_hour int Hour of sunrise sunrise_min int Minute of sunrise sunset_hour int Hour of sunset sunset_min int Minute of sunset Example: { \"sunrise_hour\": 6, \"sunrise_min\": 12, \"sunset_hour\": 18, \"sunset_min\": 30 } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 0 for failure1 for success Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:22:08 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetMac.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetMac.html","title":"Get Device MAC Address","keywords":"","body":"Get Device MAC Address Function Table: getBtAddrV2 Flutter Example: /// Get MAC Address event number getMac( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_app_get_mac), /// Get MAC Address libManager.send(evt: CmdEvtType.getMac, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description mac_addr int [6] Device ID address (maximum 6 bytes) bt_addr int [6] Bluetooth address (maximum 6 bytes) Example: { \"bt_addr\" : [ 135, 0, 23, 0, 136, 173 ], \"mac_addr\" : [ 173, 136, 0, 23, 0, 135 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDeviceInfoOnly.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDeviceInfoOnly.html","title":"Get Device Information (excluding BT name, used for initial binding)","keywords":"","body":"Get Device Information (excluding BT name, used for initial binding) Menu: Supported by each device Flutter Example: /// Get device information (for pre-binding) getDeviceInfoOnly( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.intapp_get_device_info_only), /// Get device information (for pre-binding) libManager.send(evt: CmdEvtType.getDeviceInfoOnly, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description deivce_id int Device ID firmware_version int Firmware version mode int Mode0: Exercise mode1: Sleep mode batt_status int Battery status0: Normal1: Charging2: Full3: Low battery energe int Battery level pair_flag int Pairing status0: Not paired1: Paired reboot int Whether to rebootIf true, the app will sync configuration to the device after restart bind_confirm_method int Pairing confirmation method0: Default (Note: custom ID number is valid, timeout value is invalid)1: Single tap [key below]2: Long press [key below]3: Screen touch, horizontal confirmation and cancel (confirm on the left)4: Screen touch, horizontal confirmation and cancel (confirm on the right)5: Screen touch, vertical confirmation and cancel (confirm on the top)6: Screen touch, vertical confirmation and cancel (confirm on the bottom)7: Click (right side key) bind_confirm_timeout int Timeout durationMaximum is 15 seconds, 0 means no timeout platform int Platform of the device0: Nordic10: Realtek 8762x20: Cypress Psoc630: Apollo340: Chipone50: Nordic + Realtek, Rui Kun80: 534090: Jixing shape int Shape of the device0: Default (gt01 square)1: Circular2: Square3: Elliptical dev_type int Device type0: Default (gt01 watch)1: Bracelet2: Watch user_defined_dial_main_version int Custom dial main version (starting from 1)0: Corresponding custom dial feature not supported cloud_clock_dial_version int Cloud clock dial version (starting from 0)Corresponding feature available in the multi_dial menu (Deprecated, same as user_defined_dial_main_version) show_bind_choice_ui int Whether to show UI for binding confirmation in the firmware0: No app prompting required1: App prompting required bootload_version int Bootloader version information for Nordic platform (minimum is 1) Example: ```json { \"batt_status\": 0, \"bind_confirm_method\": 0, \"bind_confirm_timeout\": 0, \"bootload_version\": 0, \"cloud_clock_dial_version\": 2, \"deivce_id\": 7453, \"dev_type\": 2, \"energe\": 32, \"firmware_version\": 2, \"mode\": 1, \"pair_flag\": 1, \"platform\": 30, \"reboot\": 0, \"shape\": 2, \"show_bind_choice_ui\": 0, \"user_defined_dial_main_version\": 2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDeviceInfoWithBTName.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDeviceInfoWithBTName.html","title":"Get Device Information (combined interface with BT name)","keywords":"","body":"Get Device Information (Combined API) Menu: Each device supports getBtAddrV2 Flutter Example: /// Get device information event number getDeviceInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_device_info), /// Get device information libManager.send(evt: CmdEvtType.getDeviceInfo, json: jsonEncode(json)); JSON fields received by the App: Field Name Field Type Field Description deivce_id int Device ID firmware_version int Firmware version mode int Mode 0: Activity mode, 1: Sleep mode batt_status int Battery status 0: Normal 1: Charging 2: Full 3: Low Battery energe int Battery level pair_flag int Pairing status reboot int Reboot status If reboot, the app will sync the configuration information to the watch again bind_confirm_method int Pairing confirmation method 0: Default (Note: Custom ID number), timeout is invalid 1: Single-click [button below] 2: Long press [button below] 3: Screen Tap, horizontal confirmation on the left and cancel on the right 4: Screen Tap, horizontal confirmation on the right and cancel on the left 5: Screen Tap, vertical confirmation on top and cancel on the bottom 6: Screen Tap, vertical confirmation on bottom and cancel on top 7: Click (button on the right) bind_confirm_timeout int Timeout Maximum is 15 seconds, 0 means no timeout platform int Watch platform 0: Nordic 10: Realtek 8762x 20: Cypress PSOC6 30: Apollo3 40: Hillcrest 50: Nordic + Realtek, Ruikun 80: 5340 90: Juxin shape int 0: Default (gt01 square) 1: Circular 2: Square 3: Elliptical dev_type int 0: Default (gt01 watch) 1: Bracelet 2: Watch user_defined_dial_main_version int User-defined dial main version, starting from 1 0: Does not support corresponding user-defined dial function cloud_clock_dial_version int Cloud dial version number, starting from 0 Whether the cloud dial is supported has corresponding function table multi_dial (Deprecated, same as user_defined_dial_main_version) show_bind_choice_ui int Whether to display the checkmark UI during firmware pairing, the app displays the prompt for clicking the firmware for pairing 0: No prompt needed from the app 1: Prompt needed from the app bootload_version int Nordic platform bootloader version information, minimum is 1 bt_name char [32] Bluetooth name bt name will be returned only if the device enables v2_get_bt_addr and alarm_count>0, otherwise, it will be null Example: { \"batt_status\": 0, \"bind_confirm_method\": 0, \"bind_confirm_timeout\": 0, \"bootload_version\": 0, \"bt_name\": null, \"cloud_clock_dial_version\": 2, \"deivce_id\": 7453, \"dev_type\": 2, \"energe\": 32, \"firmware_version\": 2, \"mode\": 1, \"pair_flag\": 1, \"platform\": 30, \"reboot\": 0, \"shape\": 2, \"show_bind_choice_ui\": 0, \"user_defined_dial_main_version\": 2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetFuncTableUser.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetFuncTableUser.html","title":"Get Function Table","keywords":"","body":"Get Function Table Function Table: Get Supported Features of Each Device Flutter Example: /// Get Function Table event number getFuncTable( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_func_table_user), /// Get Function Table libManager.send(evt: CmdEvtType.getFuncTable, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description .. Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetNoticeStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetNoticeStatus.html","title":"Get Notification Center Switch","keywords":"","body":"Get Notification Center Switch Function Table: reminderAncs Flutter Example: /// Get notification center status event number getNoticeStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_notice_status), /// Get notification center status libManager.send(evt: CmdEvtType.getNoticeStatus, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description notify_switch int Notification reminder switch85: BLE switch on170: Switch off136: Setting sub-switch187: BT only (switch)204: BLE and BT on (switch)0: Invalid call_switch int Incoming call reminder switch85: On170: Off0: Invalid notify_item1 int Sub-app switch 1, each bit represents an app notify_item2 int Sub-app switch 2, each bit represents an app call_delay int Incoming call reminder delay in seconds notify_item3 int Sub-app switch 3, each bit represents an app notify_item4 int Sub-app switch 4, each bit represents an app notify_item5 int Sub-app switch 5, each bit represents an app notify_item6 int Sub-app switch 6, each bit represents an app notify_item7 int Sub-app switch 7, each bit represents an app notify_item8 int Sub-app switch 8, each bit represents an app notify_item9 int Sub-app switch 9, each bit represents an app notify_item10 int Sub-app switch 10, each bit represents an app msg_all_switch int Message app total switchOn: 85 Off: 170 notify_item11 int Sub-app switch 11, each bit represents an app notify_item12 int Sub-app switch 12, each bit represents an app Example: { \"call_delay\" : 0, \"call_switch\" : 85, \"msg_all_switch\" : 0, \"notify_item1\" : 0, \"notify_item2\" : 0, \"notify_item3\" : 0, \"notify_item4\" : 0, \"notify_item5\" : 0, \"notify_item6\" : 0, \"notify_item7\" : 0, \"notify_item8\" : 0, \"notify_item9\" : 0, \"notify_item10\" : 0, \"notify_item11\" : 0, \"notify_item12\" : 0, \"notify_switch\" : 85 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetLiveData.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetLiveData.html","title":"Get Real-time Data","keywords":"","body":"Get Real-time Data Function Table: getRealtimeData Flutter Example: /// Get Real-time Data event number getLiveData( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_live_data), /// Get Real-time Data libManager.send(evt: CmdEvtType.getLiveData, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Description flag int 0: No function1: Force open heart rate monitoring2: Force open blood pressure monitoring JSON Fields Received by the App: Field Name Field Type Description total_step int Total steps total_calories int Total calories (in kilocalories) total_distances int Total distance (in meters) total_active_time int Total active time (in seconds) heart_rate int Heart rate data (in beats per minute) If heart rate function is not available, this value will be 0 Example: { \"heart_rate\" : 0, \"total_active_time\" : 0, \"total_calories\" : 0, \"total_distances\" : 0, \"total_step\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetErrorRecord.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetErrorRecord.html","title":"Get Error Records","keywords":"","body":"Get Error Records Menu: getFlashLog Flutter Example: /// Get Error Records event number getErrorRecord( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_error_record), /// Get Error Records libManager.send(evt: CmdEvtType.getErrorRecord, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description type int 0 Query1 Clear Log JSON fields received by the App: Field Name Field Type Field Description type int 0 Query1 Clear Log reset_flag int 0 Normal1 Hard Faul2 Watchdog service3 Assertion reset4 Power-off service5 Other exceptions hw_error int Hardware error code0 Normal1 Accelerometer error2 Heart rate error3 TP error4 Flash error Example: { \"type\":0, \"reset_flag\":0, \"hw_error\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDataTranConfig.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDataTranConfig.html","title":"Get Data Transfer Configuration","keywords":"","body":"Get Icon File Transfer Configuration / Get Image File Transfer Configuration Menu: getNotifyIconAdaptive Flutter Example: /// Get data transfer configuration event number getDataTranConfig( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_data_tran_configure ), /// Get data transfer configuration libManager.send(evt: CmdEvtType.getDataTranConfig, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description type int Icon type corresponding to the activity type0: Invalid1: Small icon for activity2: Large icon for activity3: Animated icon for activity4: Variable-sized icons for activity5: Smallest icon for activity evt_type int Event type0: InvalidFor example, 1: SMS, 2: Email, 3: WeChat, etc. sport_type int Activity type0: InvalidActivity mode type1: Walking, 2: Running, etc. Example: { \"type\": 1, \"evt_type\": 1, \"sport_type\": 1 } JSON Fields Received by the App: Field Name Field Type Field Description err_code int Error code0: NormalNon-zero: Error type int Icon type corresponding to the activity type0: Invalid1: Small icon for activity2: Large icon for activity3: Animated icon for activity4: Medium-sized icons for activity evt_type int Event type0: InvalidFor example, 1: SMS, 2: Email, 3: WeChat, etc. sport_type int Activity type0: InvalidActivity mode type, 1: Walking, 2: Running, etc. icon_width int Width required by the firmware icon (determined by type and evt_type/sport_type) icon_height int Height required by the firmware icon (determined by type and evt_type/sport_type) format int Color format block_size int Compression block size big_sports_num int Number of big sports icons msg_num int Number of message icons small_sports_and_animation_num int Number of small sports and animation icons medium_num int Number of medium-sized icons Example: { \"err_code\": 0, \"type\": 1, \"evt_type\": 1, \"sport_type\": 1, \"icon_width\": 50, \"icon_height\": 50, \"format\": 133, \"block_size\": 1024, \"big_sports_num\": 5, \"msg_num\": 0, \"small_sports_and_animation_num\": 0, \"medium_num\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetHIDInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetHIDInfo.html","title":"Get HID Information","keywords":"","body":"Get HID Information Function Table: /// TODO Flutter Example: /// Get HID Information event number getHidInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_hid_info), /// Get HID Information libManager.send(evt: CmdEvtType.getHidInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description is_start int 0 - Not started, 1 - Started successfully Example: { \"is_start\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetGPSInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetGPSInfo.html","title":"Get GPS Information","keywords":"","body":"Get GPS Information Function Table: getSupportUpdateGps Flutter Example: /// Get GPS Information event number getGpsInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_gps_info), /// Get GPS Information libManager.send(evt: CmdEvtType.getGpsInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description err_code int GPS error code0 - Normal, non-zero - Exceptional fw_version int GPS firmware version agps_info int Validity period of AGPS (Assisted GPS) agps_err_code int AGPS error code utc_year int UTC year utc_month int UTC month utc_day int UTC day utc_hour int UTC hour utc_minute int UTC minute start_mode int Start mode1 - Cold start2 - Hot start gns int Positioning satellite selection1 - GPS2 - GLONASS3 - GPS + GLONASS fix_start_bit int Fix start bitDefault 0, used for debugging Example: { \"err_code\": 0, \"fw_version\": 512, \"agps_info\": 0, \"agps_err_code\": 0, \"utc_year\": 0, \"utc_month\": 0, \"utc_day\": 0, \"utc_hour\": 0, \"utc_minute\": 0, \"start_mode\": 2, \"gns\": 0, \"fix_start_bit\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetGPSStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetGPSStatus.html","title":"Get GPS Status","keywords":"","body":"Get GPS Status Function Table: getSupportUpdateGps Flutter Example: /// Get GPS Status event number getGpsStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_gps_status), /// Get GPS Status libManager.send(evt: CmdEvtType.getGpsStatus, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description gps_run_status int GPS running status0 - Not running1 - Searching for satellites2 - Tracking agps_is_valid int Validity of AGPS (Assisted GPS) in hoursNon-zero values indicate validity Example: { \"gps_run_status\": 0, \"agps_is_valid\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetVersionInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetVersionInfo.html","title":"Get Version Information","keywords":"","body":"Get Version Information Menu: getVersionInfo Flutter Example: /// Get version information event number getVersionInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_version_info), /// Get version information libManager.send(evt: CmdEvtType.getVersionInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description sdk_version int SDK version hr_algorithm_version int Heart rate algorithm version sleep_algorithm_version int Sleep algorithm version step_algorithm_version int Step counter algorithm version gesture_recognition_version int Gesture recognition algorithm version pcb_version int PCB version (multiplied by 10, e.g., 11 for version 1.1) spo2_version int Wearable version wear_version int SpO2 algorithm version stress_version int Stress level algorithm version kcal_version int Calorie algorithm version dis_version int Distance algorithm version axle3_swim_version int 3-axis sensor swimming algorithm version axle6_swim_version int 6-axis sensor swimming algorithm version act_mode_type_version int Activity mode recognition algorithm version all_day_hr_version int All-day heart rate algorithm version gps_version int GPS algorithm version peripherals_version int Peripheral version for 206 customized projects Example: { \"act_mode_type_version\" : 10, \"all_day_hr_version\" : 45, \"axle3_swim_version\" : 19, \"axle6_swim_version\" : 19, \"dis_version\" : 4, \"gesture_recognition_version\" : 33, \"gps_version\" : 0, \"hr_algorithm_version\" : 45, \"kcal_version\" : 5, \"pcb_version\" : 1, \"peripherals_version\" : 0, \"sdk_version\" : 15, \"sleep_algorithm_version\" : 1, \"spo2_version\" : 24, \"step_algorithm_version\" : 25, \"stress_version\" : 4, \"wear_version\" : 22 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDoNotDisturb.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDoNotDisturb.html","title":"Get Do Not Disturb Mode Status","keywords":"","body":"Get Do Not Disturb Mode Status Menu: getDoNotDisturbMain3 Flutter Example: /// Get Do Not Disturb mode status event number getNotDisturbStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_do_not_disturb), /// Get Do Not Disturb mode status libManager.send(evt: CmdEvtType.getNotDisturbStatus, json: jsonEncode(json)); JSON fields received by the App: Field Name Field Type Field Description switch_flag int Switch status 170: On 85: Off start_hour int Start hour start_minute int Start minute end_hour int End hour end_minute int End minute have_time_range int Whether there is a time range 0: Invalid 1: No time range 2: Has time range week_repeat int Repeat bit0: Invalid (bit1 - bit7): Monday to Sunday noontime_rest_on_off int Noon rest switch, headset reminder switch 170: On 85: Off noontime_rest_start_hour int Reminder start hour noontime_rest_start_minute int Reminder start minute noontime_rest_end_hour int Reminder end hour noontime_rest_end_minute int Reminder end minute all_day_on_off int All day Do Not Disturb switch 170: On 85: Off intelligent_on_off int Intelligent Do Not Disturb switch 170: On 85: Off Example: { \"all_day_on_off\": 0, \"end_hour\": 7, \"end_minute\": 0, \"have_time_range\": 0, \"intelligent_on_off\": 0, \"noontime_rest_end_hour\": 7, \"noontime_rest_end_minute\": 0, \"noontime_rest_on_off\": 85, \"noontime_rest_start_hour\": 22, \"noontime_rest_start_minute\": 0, \"start_hour\": 22, \"start_minute\": 0, \"switch_flag\": 85, \"week_repeat\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetMtuInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetMtuInfo.html","title":"Get MTU Information","keywords":"","body":"Get MTU Information Function Table: getMtu Flutter Example: /// Get MTU Information event number getMtuInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_mtu_info), /// Get MTU Information libManager.send(evt: CmdEvtType.getMtuInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description status int 0: Data is valid1: Data is invalid, wait a while and try again. In case of invalid data, MTU is 20. rx_mtu int MTU for app receiving data tx_mtu int MTU for app sending data phy_speed int Physical layer speed0: Invalid1000: 1M2000: 2M512: 512K dle_length int DLE length0: Not supported Example: { \"dle_length\" : 27, \"phy_speed\" : 285, \"rx_mtu\" : 132, \"status\" : 0, \"tx_mtu\" : 132 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDefaultSportType.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDefaultSportType.html","title":"Get Default Sport Type","keywords":"","body":"Get Default Sport Types Menu: setV3GetSportSortField Flutter Example: /// Get default sport types event number getDefaultSportType( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_default_sport_type), /// Get default sport types libManager.send(evt: CmdEvtType.getDefaultSportType, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description default_show_num int Number of default sport types to be displayed min_show_num int Minimum number of supported sport types max_show_num int Maximum number of supported sport types is_supports_sort int Whether default sorting is supported0: No1: Yes sport_types list List of sport types (of type int) Example: ```json { \"default_show_num\": 27, \"min_show_num\": 285, \"max_show_num\": 132, \"is_supports_sort\": 0, \"sport_types\": [ {\"type\": 1}, {\"type\": 2}, {\"type\": 3}, {\"type\": 4}, {\"type\": 5}, {\"type\": 6}, {\"type\": 7}, {\"type\": 8} ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDownloadLanguage.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDownloadLanguage.html","title":"Get Download Language Support","keywords":"","body":"Get Download Language Support Menu: getDownloadLanguage Flutter Example: /// Get Download Language Support event number getDownloadLanguage( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_down_language), /// Get Download Language Support libManager.send(evt: CmdEvtType.getDownloadLanguage, json: jsonEncode(json)); JSON fields received by the App: Field Name Field Type Field Description use_lang int Current used language default_lang int Default language fixed_lang int Number of fixed stored languages max_storage_lang int Maximum stored languages lang_array array List of stored language values Field Name Field Type Field Description value int [14] Stored language values, ended by 0 Example: { \"use_lang\" : 27, \"default_lang\" : 285, \"fixed_lang\" : 132, \"max_storage_lang\" : 0, \"lang_array\":[ { \"type\":1 }, { \"type\":2 }, { \"type\":3 }, { \"type\":4 }, { \"type\":5 }, { \"type\":6 }, { \"type\":7 }, { \"type\":8 }] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetBattInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetBattInfo.html","title":"Get Battery Information","keywords":"","body":"Get Battery Information Menu: getBatteryInfo Flutter Example: /// Get battery information event number getBatteryInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_batt_info), /// Get battery information libManager.send(evt: CmdEvtType.getBatteryInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description type int Battery type: 0: Rechargeable lithium battery, 1: Button battery voltage int Voltage status int Battery status0: Normal1: Charging2: Charging complete3: Low battery level int Level last_charging_year int Last charging time, year last_charging_month int Last charging time, month last_charging_day int Last charging time, day last_charging_hour int Last charging time, hour last_charging_minute int Last charging time, minute last_charging_second int Last charging time, second mode int 0: Invalid1: Normal mode (non-power saving mode)2: Power saving mode Example: { \"last_charging_day\" : 0, \"last_charging_hour\" : 158, \"last_charging_minute\" : 66, \"last_charging_month\" : 0, \"last_charging_second\" : 0, \"last_charging_year\" : 0, \"level\" : 100, \"mode\" : 0, \"status\" : 0, \"type\" : 0, \"voltage\" : 4317 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetFlashBinInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetFlashBinInfo.html","title":"Get Font Library Information","keywords":"","body":"Get Font Library Information Function Table: getFlashLog Flutter Example: /// Get Font Library Information event number getFlashBinInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_flash_bin_info), /// Get Font Library Information libManager.send(evt: CmdEvtType.getFlashBinInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description status int Status: 0 - Normal, 1 - Invalid font, checksum error, 2 - Version mismatch version int Font library version match_version int Matching version required by the firmware check_code int Font library checksum code Example: { \"check_code\" : 1211171869, \"match_version\" : 13, \"status\" : 0, \"version\" : 13 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetMenuList.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetMenuList.html","title":"Get Device Supported Menu List","keywords":"","body":"Get Supported Menu List Function Table: getMenuList Flutter Example: /// Get Supported Menu List event number getMenuList( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_menu_list), /// Get Supported Menu List libManager.send(evt: CmdEvtType.getMenuList, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description min_show_num int Minimum number of items to show max_show_num int Maximum number of items to show max_num int Maximum number of items in the list current_show_num int Number of items currently shown on the device items array Details of the items currently shown on the deviceCollection of index & value Field Name Field Type Description index int IndexStarting from 0 with a maximum value of 13 value int Type0: Invalid1: Steps2: Heart rate3: Sleep4: Camera5: Alarm6: Music7: Stopwatch8: Timer9: Sports mode10: Weather11: Breathing exercise12: Find phone13: Pressure14: Data triathlon15: Time interface16: Last activity17: Health data18: Blood oxygen19: Menu settings20: Alexa voice display sequentially21: X screen (gt01pro-X added)22: Calories (Doro Watch added)23: Distance (Doro Watch added)24: One-key measurement (IDW05 added)25: Renpho health(IDW12 added) 26: Compass (mp01 added) 27: Barometer altimeter (mp01 added) Example: { \"current_show_num\" : 5, \"items\" : [ { \"index\" : 0, \"value\" : 17 }, { \"index\" : 1, \"value\" : 2 }, { \"index\" : 2, \"value\" : 13 }, { \"index\" : 3, \"value\" : 16 }, { \"index\" : 4, \"value\" : 20 }, { \"index\" : 5, \"value\" : 6 }, { \"index\" : 6, \"value\" : 10 } ], \"max_num\" : 7, \"max_show_num\" : 7, \"min_show_num\" : 2 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetScreenBrightness.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetScreenBrightness.html","title":"Get Screen Brightness","keywords":"","body":"Get Screen Brightness Menu: getScreenBrightnessMain9 Flutter Example: /// Get screen brightness event number getScreenBrightness( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_screen_brightness), /// Get screen brightness libManager.send(evt: CmdEvtType.getScreenBrightness, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description level int Brightness level(0-100) opera int 0 Auto1 Manual If it is automatic synchronization configuration, please send 00; if it is user adjustment, please send 01 mode int 0 Specify level1 Use ambient light sensor2 level does not matter auto_adjust_night int Night auto brightness adjustment 0 Invalid, defined by firmware1 Off2 Night auto brightness adjustment3 Night brightness reduction uses the set time start_hour int Start time hour start_minute int Start time minute end_hour int End time hour end_minute int End time minute night_level int Night brightness show_interval int Display interval Example: { \"auto_adjust_night\" : 1, \"end_hour\" : 6, \"end_minute\" : 0, \"level\" : 60, \"mode\" : 0, \"night_level\" : 0, \"opera\" : 1, \"show_interval\" : 5, \"start_hour\" : 19, \"start_minute\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetUpHandGesture.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetUpHandGesture.html","title":"Get Up Hand Gesture","keywords":"","body":"Get Wrist Up Gesture Data Menu: getUpHandGestureEx Flutter Example: /// Get wrist up gesture data event number getUpHandGesture( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_up_hand_gesture), /// Get wrist up gesture data libManager.send(evt: CmdEvtType.getUpHandGesture, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description on_off int Switch170: On85: Off show_second int Screen on durationin seconds has_time_range int Whether time range is available1: Yes0: No start_hour int Start time, hour start_minute int Start time, minute end_hour int End time, hour end_minute int End time, minute Example: { \"end_hour\" : 0, \"end_minute\" : 0, \"has_time_range\" : 0, \"on_off\" : 170, \"show_second\" : 5, \"start_hour\" : 0, \"start_minute\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetUpdateStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetUpdateStatus.html","title":"Get Device Upgrade Status","keywords":"","body":"Get Device Update Status Menu: getDeviceUpdateState Flutter Example: /// Get device update status event number getUpdateStatus( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_update_state), /// Get device update status libManager.send(evt: CmdEvtType.getUpdateStatus, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description dev_vesion int Firmware version number state int 0 for normal state1 for upgrade state Example: { \"dev_vesion\":0, \"state\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDevicesLogStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetDevicesLogStatus.html","title":"Get Device Log Status","keywords":"","body":"Get Device Log State Menu: Each device supports getDeviceLogState Flutter Example: /// Get device log state event number getDeviceLogState( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_devices_log_state), /// Get device log state libManager.send(evt: CmdEvtType.getDeviceLogState, json: jsonEncode(json)); JSON fields received by the App: Field Name Field Type Field Description type int 0: No corresponding log 1: Firmware restart log 2: Firmware exception err_code int Error code of firmware restart log, 0 is normal Example: { \"err_code\": 4, \"type\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetMainSportGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetMainSportGoal.html","title":"Get Calorie/Distance/Duration of Medium-high Intensity Exercise (Daily Three Rings)","keywords":"","body":"Get Set Calorie/Distance/Mid-High Sport Time Goal Function Table: setMidHighTimeGoal Flutter Example: /// Get Set Calorie/Distance/Mid-High Sport Time Goal event number getMainSportGoal( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_main_sport_goal), /// Get Set Calorie/Distance/Mid-High Sport Time Goal libManager.send(evt: CmdEvtType.getMainSportGoal, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Description time_goal_type int 0: Invalid1: Daily goal2: Weekly goalRequires firmware to enable function table V2_support_set_get_time_goal_type JSON Fields Received by the App: Field Name Field Type Description calorie int Activity calorie goal (in kilocalories) distance int Distance goal (in meters) calorie_min int Minimum activity calorie value calorie_max int Maximum activity calorie value mid_high_time_goal int Mid-high sport time goal (in seconds) walk_goal_time int Goal timeRequires firmware to enable function table V3_support_get_main_sport_goal time_goal_type int 0: Invalid1: Daily goal2: Weekly goalRequires firmware to enable function table V2_support_set_get_time_goal_type Example: { \"calorie\" : 4, \"distance\" : 200, \"calorie_min\" : 101, \"calorie_max\" : 500, \"mid_high_time_goal\" : 1, \"walk_goal_time\" : 1, \"time_goal_type\" : 1, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetWalkReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetWalkReminder.html","title":"Get Walking Reminder","keywords":"","body":"Get Walk Reminder Menu: getWalkReminderV3 Flutter Example: /// Get walk reminder event number getWalkRemind( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_walk_reminder), /// Get walk reminder libManager.send(evt: CmdEvtType.getWalkRemind, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description on_off int 0 Off，1 On goal_step int Goal step (deprecated) start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) repeat int Repeat (bit1-bit7: Monday to Sunday, bit 0: overall switch) goal_time int Goal time (deprecated) notify_flag int Notification type0: Invalid1: Allow notification2: Silent notification3: Close notificationRequires firmware to enable V3_walk_reminder_add_notify_flag do_not_disturb_on_off int Do not disturb switch0 Off1 OnRequires firmware to enable v2_support_set_get_no_reminder_on_walk_reminder no_disturb_start_hour int Do not disturb start time (hour)Requires firmware to enable v2_support_set_get_no_reminder_on_walk_reminder no_disturb_start_minute int Do not disturb start time (minute)Requires firmware to enable v2_support_set_get_no_reminder_on_walk_reminder no_disturb_end_hour int Do not disturb end time (hour)Requires firmware to enable v2_support_set_get_no_reminder_on_walk_reminder no_disturb_end_minute int Do not disturb end time (minute)Requires firmware to enable v2_support_set_get_no_reminder_on_walk_reminder Example: { \"on_off\" : 0, \"goal_step\" : 0, \"start_hour\" : 18, \"start_minute\" : 0, \"end_hour\" : 23, \"end_minute\" : 0, \"repeat\" : 127, \"goal_time\" : 0, \"notify_flag\" : 2, \"do_not_disturb_on_off\" : 0, \"no_disturb_start_hour\" : 0, \"no_disturb_start_minute\" : 0, \"no_disturb_end_hour\" : 0, \"no_disturb_end_minute\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetAllHealthSwitchState.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetAllHealthSwitchState.html","title":"Get All Health Monitoring Switches","keywords":"","body":"Get All Health Monitoring Switches Menu: getHealthSwitchStateSupportV3 Flutter Example: /// Get event number for all health monitoring switches getAllHealthSwitchState( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_all_health_switch_state), /// Get all health monitoring switches libManager.send(evt: CmdEvtType.getAllHealthSwitchState, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description heart_mode int Continuous heart rate measurement switch: 170 for on, 85 for off pressure_mode int Automatic blood pressure measurement switch: 170 for on, 85 for off spo2_mode int Automatic blood oxygen measurement switch: 170 for on, 85 for off science_mode int Scientific sleep switch: 170 for scientific sleep mode, 85 for normal sleep mode temperature_mode int Nighttime temperature switch: 170 for on, 85 for off noise_mode int Noise switch: 170 for on, 85 for off menstrual_mode int Menstrual cycle switch: 170 for on, 85 for off walk_mode int Walking reminder switch: 170 for on, 85 for off handwashing_mode int Handwashing reminder switch: 170 for on, 85 for off drinkwater_mode int Drink water reminder switch: 170 for on, 85 for off heartmode_notify_flag int Heart rate notification status: 0 for invalid 1 for allow notification 2 for silent notification 3 for disable notification pressure_notify_flag int Blood pressure notification status: 0 for invalid 1 for allow notification 2 for silent notification 3 for disable notification spo2_notify_flag int Blood oxygen notification status: 0 for invalid 1 for allow notification 2 for silent notification 3 for disable notification menstrual_notify_flag int Menstrual cycle notification status: 0 for invalid 1 for allow notification 2 for silent notification 3 for disable notification guidance_notify_flag int Fitness guidance notification status: 0 for invalid 1 for allow notification 2 for silent notification 3 for disable notification reminder_notify_flag int Reminder notification status: 0 for invalid 1 for allow notification 2 for silent notification 3 for disable notification respir_rate_state int Respiration rate switch: 85 for off, 170 for on body_power_state int Body battery switch: 85 for off, 170 for on Example: { \"heart_mode\": 85, \"pressure_mode\": 85, \"spo2_mode\": 85, \"science_mode\": 85, \"temperature_mode\": 85, \"noise_mode\": 85, \"menstrual_mode\": 85, \"walk_mode\": 85, \"handwashing_mode\": 85, \"drinkwater_mode\": 85, \"heartmode_notify_flag\": 0, \"pressure_notify_flag\": 0, \"spo2_notify_flag\": 0, \"menstrual_notify_flag\": 0, \"guidance_notify_flag\": 0, \"reminder_notify_flag\": 0, \"respir_rate_state\": 0, \"body_power_state\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetActivitySwitch.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetActivitySwitch.html","title":"Get Activity Recognition Switch","keywords":"","body":"Get Activity Switch for Motion Mode Recognition Menu: getActivitySwitch Flutter Example: /// Get event number for activity switch getActivitySwitch( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_activity_switch), /// Get activity switch libManager.send(evt: CmdEvtType.getActivitySwitch, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description err_code int 0 for successnon-zero for error auto_identify_sport_walk int Auto identify walking switch: 0 for off, 1 for on auto_identify_sport_run int Auto identify running switch: 0 for off, 1 for on auto_identify_sport_bicycle int Auto identify cycling switch: 0 for off, 1 for on auto_pause_on_off int Auto pause switch: 0 for off, 1 for on auto_end_remind_on_off_on_off int End reminder switch: 0 for off, 1 for on auto_identify_sport_elliptical int Auto identify elliptical switch: 0 for off, 1 for on auto_identify_sport_rowing int Auto identify rowing switch: 0 for off, 1 for on auto_identify_sport_swim int Auto identify swimming switch: 0 for off, 1 for on Example: { \"err_code\": 0, \"auto_identify_sport_walk\": 0, \"auto_identify_sport_run\": 0, \"auto_identify_sport_bicycle\": 0, \"auto_pause_on_off\": 0, \"auto_end_remind_on_off_on_off\": 0, \"auto_identify_sport_elliptical\": 0, \"auto_identify_sport_rowing\": 0, \"auto_identify_sport_swim\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetFirmwareBtVersion.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetFirmwareBtVersion.html","title":"Get Firmware Version and BT Version","keywords":"","body":"Get Firmware Version and BT Version Function Table: getBleAndBtVersion Flutter Example: /// Get Firmware Version and BT Version event number getFirmwareBtVersion( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_get_firmware_bt_version), /// Get Firmware Version and BT Version libManager.send(evt: CmdEvtType.getFirmwareBtVersion, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description firmware_version1 int Firmware version level 1 firmware_version2 int Firmware version level 2 firmware_version3 int Firmware version level 3 BT_flag int BT version flag0: Invalid1: Indicates that the firmware has a corresponding BT firmware BT_version1 int BT version level 1 BT_version2 int BT version level 2 BT_version3 int BT version level 3 BT_match_version1 int BT matching version level 1 BT_match_version2 int BT matching version level 2 BT_match_version3 int BT matching version level 3 Example: { \"BT_flag\" : 1, \"BT_match_version1\" : 2, \"BT_match_version2\" : 0, \"BT_match_version3\" : 7, \"BT_version1\" : 2, \"BT_version2\" : 0, \"BT_version3\" : 9, \"firmware_version1\" : 2, \"firmware_version2\" : 0, \"firmware_version3\" : 6 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetBpAlgVersion.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetBpAlgVersion.html","title":"Get Blood Pressure Algorithm Version","keywords":"","body":"Get Blood Pressure Algorithm Version Information Menu: setSupportV3Bp Flutter Example: /// Get blood pressure algorithm version information event number getBpAlgVersion( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_bp_alg_version), /// Get blood pressure algorithm version information libManager.send(evt: CmdEvtType.getBpAlgVersion, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description Concatenated Version: version1.version2.version3 bp_version_1 int Firmware blood pressure algorithm version1 bp_version_2 int Firmware blood pressure algorithm version2 bp_version_3 int Firmware blood pressure algorithm version3 Example: { \"bp_version_1\": 0, \"bp_version_2\": 0, \"bp_version_3\": 6 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetSupportMaxSetItemNum.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetSupportMaxSetItemNum.html","title":"Get Maximum Number of Details Supported by Firmware","keywords":"","body":"Get Maximum Number of Settings Supported by Firmware Menu: getSetMaxItemsNum Flutter Example: /// Get maximum number of settings supported by firmware event number getSupportMaxSetItemsNum( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_support_max_set_items_num ), /// Get maximum number of settings supported by firmware libManager.send(evt: CmdEvtType.getSupportMaxSetItemsNum, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description contact_max_set_num int Maximum number of frequently contacted persons that firmware supports for app to set (default is 10) reminder_max_set_num int Maximum number of schedule reminders that firmware supports for app to set msg_max_buff_size int Maximum sending buffer size of message reminders (default is 250 bytes) Example: { \"contact_max_set_num\":0, \"reminder_max_set_num\":0, \"msg_max_buff_size\":300, } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetUndeletableMenuList.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetUndeletableMenuList.html","title":"Get Undeletable Menu List in Firmware","keywords":"","body":"Get Non-Deletable Menu List in Firmware Menu: getDeletableMenuListV2 Flutter Example: /// Get non-deletable menu list in firmware event number getUnerasableMeunList( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_undeleteable_meun_list ), /// Get non-deletable menu list in firmware libManager.send(evt: CmdEvtType.getUnerasableMeunList, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description num int Number of items in the list, maximum is 10 item_list int [10] List of non-deletable applications0: Invalid1: Step2: Heart Rate3: Sleep4: Camera5: Alarm6: Music... Example: { \"num\":4, \"item_list\":[ 1, 2, 3, 4 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetUnreadAppONOFF.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetUnreadAppONOFF.html","title":"Get Firmware Red Dot Prompt Switch Status","keywords":"","body":"Get Firmware Red Dot Reminder Switch Status Menu: TODO Flutter Example: /// Get unread app reminder switch event number getUnreadAppReminder( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_unread_app_onoff ), /// Get unread app reminder switch libManager.send(evt: CmdEvtType.getUnreadAppReminder, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description on_off int Switch status 170: On 85: Off Example: { \"on_off\":85 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetBtStatus.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetBtStatus.html","title":"Query BT Pairing Switch, Connection, A2DP Connection, HFP Connection Status","keywords":"","body":"Query BT Pairing Switch, Connection, A2DP Connection, HFP Connection Status (Only Supported on Devices with BT Bluetooth) Menu: getBleAndBtVersion Flutter Example: /// Query BT pairing switch, connection, A2DP connection, HFP connection status (Only Supported on devices with BT Bluetooth) event number getBtNotice( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_set_bt_notice), /// Query BT pairing switch, connection, A2DP connection, HFP connection status (Only Supported on devices with BT Bluetooth) libManager.send(evt: CmdEvtType.getBtNotice, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description bt_connect_states int 85: BT connection status on170: BT connection status off0: Invalid bt_pair_states int 85: BT pairing status on170: BT pairing status off0: Invalid a2dp_connect_states int 85: A2DP connection status on170: A2DP connection status off0: Invalid hfp_connect_states int 85: HFP connection status on170: HFP connection status off0: Invalid Example: { \"bt_connect_states\": 85, \"bt_pair_states\": 85, \"a2dp_connect_states\": 85, \"hfp_connect_states\": 85 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetContactReviceTime.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetContactReviceTime.html","title":"Get Modification Time of Locally Stored Contact File","keywords":"","body":"Get Firmware Local Contact File Modification Time Menu: TODO Flutter Example: /// Get firmware local contact file modification time event number getContactReviseTime( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_contact_revice_time ), /// Get firmware local contact file modification time libManager.send(evt: CmdEvtType.getContactReviseTime, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description result int 0: No need to send contact file1: Need to send contact data Example: { \"result\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetHRMode.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetHRMode.html","title":"Get Heart Rate Monitoring Mode","keywords":"","body":"Get Heart Rate Monitoring Mode Function Table: getHeartRateModeV2 Flutter Example: /// Get Heart Rate Monitoring Mode event number getHeartRateMode( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_heart_rate_mode), /// Get Heart Rate Monitoring Mode libManager.send(evt: CmdEvtType.getHeartRateMode, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Description mode int 170: Manual Mode85: Turned Off136: Automatic153: Continous Monitoring has_time_range int Whether there is a time range0: No, 1: Yes start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) measurement_interval int Measurement interval (in minutes) Example: { \"mode\": 85, \"has_time_range\": 0, \"start_hour\": 9, \"start_minute\": 0, \"end_hour\": 12, \"end_minute\": 0, \"measurement_interval\": 15 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetStepGoal.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV2GetEvt/IDOGetStepGoal.html","title":"Get All-day Step Goal","keywords":"","body":"Get Daily Step Goal Menu: getStepDataTypeV2 Flutter Example: /// Get daily step goal event number getStepGoal( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.app_get_step_goal), /// Get daily step goal libManager.send(evt: CmdEvtType.getStepGoal, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description step int Daily step goal step_week int Weekly step goalValid when v2_support_set_step_data_type_03_03 is enabled Example: { \"step\":2000, \"step_week\":6000 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:33 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOOtaEvt/IDOOtaStart.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOOtaEvt/IDOOtaStart.html","title":"Enter Upgrade Mode","keywords":"","body":"Enter Upgrade Mode Flutter Example: /// Enter Upgrade Mode event number otaStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_ota_start), /// Enter Upgrade Mode libManager.send(evt: CmdEvtType.otaStart, json: jsonEncode(json)); JSON Field Received by App: Field Name Field Type Field Description err_flag int 0: OTA entered successfully1: Failed: Low battery2: Failed: Device not supported3: Failed: Incorrect parameter Example: { \"err_flag\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOOtaEvt/IDOOtaDirectStart.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOOtaEvt/IDOOtaDirectStart.html","title":"Directly Enter Upgrade Mode (Ignore Battery Level)","keywords":"","body":"Enter Upgrade Mode Directly (Ignore Battery) Flutter Example: /// Enter Upgrade Mode Directly (Ignore Battery) event number otaDirectStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_ota_direct_start), /// Enter Upgrade Mode Directly (Ignore Battery) libManager.send(evt: CmdEvtType.otaDirectStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOOtaEvt/IDOOtaAuth.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOOtaEvt/IDOOtaAuth.html","title":"Set OTA Authorization","keywords":"","body":"Set OTA Authorization Flutter Example: /// OTA authorization event number otaAuth( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_ota_auth), /// OTA Authorization libManager.send(evt: CmdEvtType.otaAuth, json: jsonEncode(json)); JSON Field Sent by App: Field Name Field Type Field Description device_id int Device ID version int Version 0 indicates no version check, used for constraints that cannot be downgraded, default 0 Example: { \"device_id\":0, \"version\":0 } JSON Field Received by App: Field Name Field Type Field Description err_code int Error code0: Check passed1: ID check failed2: Version check failed3: Low battery4: Other errors Example: { \"err_code\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlReboot.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlReboot.html","title":"Control Device Reboot","keywords":"","body":"Control to Reboot the Device Flutter Example: /// Event number for rebooting the device reboot(evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_reboot), /// Reboot the device libManager.send(evt: CmdEvtType.reboot, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlDisconnect.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlDisconnect.html","title":"Control Device Disconnection","keywords":"","body":"Control Device Disconnection Flutter Example: /// Event number for controlling disconnection controlDisconnect( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_control_disconnect), /// Control disconnection libManager.send(evt: CmdEvtType.controlDisconnect, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlCleanBindInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlCleanBindInfo.html","title":"Clear Binding Information","keywords":"","body":"Clear Binding Information Flutter Example: /// Event number for clearing binding information cleanBindInfo( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_clean_bond_info), /// Clear binding information libManager.send(evt: CmdEvtType.cleanBindInfo, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlShutdown.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlShutdown.html","title":"Control Device Shutdown","keywords":"","body":"Control to Power Off the Device Flutter Example: /// Event number for powering off the device shutdown( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_shutdown), /// Power off the device libManager.send(evt: CmdEvtType.shutdown, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlRestoreFazctory.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlRestoreFazctory.html","title":"Control Device Factory Reset","keywords":"","body":"Control to Factory Reset the Device Flutter Example: /// Event number for factory resetting the device factoryReset( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_restore_fazctory), /// Factory reset the device libManager.send(evt: CmdEvtType.factoryReset, json: jsonEncode(json)); JSON Field Received by the App: Field Name Field Type Field Description is_success int 1: Success 0: Failed Example: { \"is_success\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlClearCache.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlClearCache.html","title":"Control Clear Band Cache","keywords":"","body":"Control Clearing Bracelet Cache Flutter Example: /// Event number for clearing bracelet cache clearCache( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_clear_cache), /// Clear bracelet cache libManager.send(evt: CmdEvtType.clearCache, json: jsonEncode(json)); JSON fields returned by the app: Field Name Field Type Field Description is_success int 1: Success, 0: Failure Example: { \"is_success\":0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlNoticeCallTime.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlNoticeCallTime.html","title":"Transfer Call Time to Firmware","keywords":"","body":"Send Call Duration to Firmware Flutter Example: /// Event number for sending call duration to firmware after call connection is established setNoticeCallTime( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_set_notice_call_time), /// Send call duration to firmware after call connection is established libManager.send(evt: CmdEvtType.setNoticeCallTime, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description sec int Call duration in seconds Example: { \"sec\": 30 } JSON fields received by the app: Field Name Field Type Field Description status_code int 0: Success1: Failure, incorrect parameters Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlMusicStart.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlMusicStart.html","title":"Control Music Start","keywords":"","body":"Control Music Start Flutter Example: /// Event number for controlling music start musicStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_music_start), /// Control music start libManager.send(evt: CmdEvtType.musicStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlMusicStop.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlMusicStop.html","title":"Control Music Stop","keywords":"","body":"Control Music Stop Flutter Example: /// Event number for controlling music stop musicStop( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_music_stop), /// Control music stop libManager.send(evt: CmdEvtType.musicStop, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlPhotoStart.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlPhotoStart.html","title":"Control Photo Start","keywords":"","body":"Control to Start Taking Photo Flutter Example: /// Event number for starting to take a photo (app -> ble) photoStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_photo_start), /// Start taking a photo (app -> ble) libManager.send(evt: CmdEvtType.photoStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlPhotoStop.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlPhotoStop.html","title":"Control Photo Stop","keywords":"","body":"Control to Stop Taking Photo Flutter Example: /// Event number for stopping taking a photo (app -> ble) photoStop( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_photo_stop), /// Stop taking a photo (app -> ble) libManager.send(evt: CmdEvtType.photoStop, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlFindDeviceStart.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlFindDeviceStart.html","title":"Control Find Device Start","keywords":"","body":"Control Find Device Start Flutter Example: /// Event number for Find Device Start (app -> ble) findDeviceStart( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_find_device_start), /// Find Device Start (app -> ble) libManager.send(evt: CmdEvtType.findDeviceStart, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlFindDeviceStop.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlFindDeviceStop.html","title":"Control Find Device Stop","keywords":"","body":"Control Find Device Stop Flutter Example: /// Event number for Find Device Stop (app -> ble) findDeviceStop( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_find_device_stop), /// Find Device Stop (app -> ble) libManager.send(evt: CmdEvtType.findDeviceStop, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlOpenANCS.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlOpenANCS.html","title":"Control Open ANCS","keywords":"","body":"Control to Open ANCS (Apple Notification Center Service) Start Flutter Example: /// Event number for opening ANCS (Apple Notification Center Service) start openAncs( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_open_ancs), /// Open ANCS (Apple Notification Center Service) start libManager.send(evt: CmdEvtType.openAncs, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlCloseANCS.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlCloseANCS.html","title":"Control Close ANCS","keywords":"","body":"Control to Stop Opening ANCS Flutter Example: /// Event number for closing ANCS closeAncs( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_close_ancs), /// Close ANCS libManager.send(evt: CmdEvtType.closeAncs, json: jsonEncode(json)); Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlNoticeIconInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlNoticeIconInfo.html","title":"APP Transfers Sport Icon Information and State to Firmware","keywords":"","body":"Transmit Motion Icon Information and Notify Firmware of Status from the App Flutter Example: /// Event number for transmitting motion icon information and notifying firmware of status from the app setNoticeIconInformation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_notcie_icon_informationg ), /// Transmit motion icon information and notify firmware of status from the app libManager.send(evt: CmdEvtType.setNoticeIconInformation, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description states int 0: Start transmission16: End transmission icon_num int Number of icons for transmission Example: { \"states\": 0, \"icon_num\": 0 } JSON fields received by the app: Field Name Field Type Field Description status int 0: Success1: Failure Example: { \"status\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlNoticeOpenBroadcast.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlNoticeOpenBroadcast.html","title":"APP Notifies Firmware to Enable BT Broadcast","keywords":"","body":"Notify Firmware to Enable BT Broadcasting from the App Flutter Example: /// Event number for notifying firmware to enable BT broadcasting from the app setNoticeOpenBroadcastn( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_notcie_open_broadcast ), /// Notify firmware to enable BT broadcasting from the app libManager.send(evt: CmdEvtType.setNoticeOpenBroadcastn, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description err_code int 0: Success1: Failure Example: { \"err_code\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlNoticeDisableFunction.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOControlEvt/IDOControlNoticeDisableFunction.html","title":"APP Notifies Firmware of Permission State for Certain Functions","keywords":"","body":"Notify Firmware of Permission Status for Certain Features Flutter Example: /// Notify firmware that certain features are disabled due to permission denial in the app setNoticeDisableFunc( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.app_app_to_ble_notcie_disable_func ), /// Notify firmware that certain features are disabled due to permission denial in the app libManager.send(evt: CmdEvtType.setNoticeDisableFunc, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description type int 0: Camera permission enable int 170: Enabled85: Disabled Example: { \"type\": 0, \"enable\": 85 } JSON fields received by the app: Field Name Field Type Field Description status_code int 0: Success1: Failure Example: { \"status_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlMusicStart.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlMusicStart.html","title":"Device Control APP Music Start","keywords":"","body":"Device control APP music starts Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlMusicPause.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlMusicPause.html","title":"Device Control APP Music Pause","keywords":"","body":"Device control APP music pause Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlMusicStop.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlMusicStop.html","title":"Device Control APP Music Stop","keywords":"","body":"Device control APP music stops Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlMusicLast.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlMusicLast.html","title":"Device Control APP Music Last","keywords":"","body":"Device control APP music previous song Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlMusicNext.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlMusicNext.html","title":"Device Control APP Music Next","keywords":"","body":"Device control APP music next Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlPhotoSingleShot.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlPhotoSingleShot.html","title":"Device Control APP Photo Single Shot","keywords":"","body":"Device control APP photo single shot Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlPhotoBurst.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlPhotoBurst.html","title":"Device Control APP Photo Burst","keywords":"","body":"Device control APP takes continuous photos Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlVolumeUp.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlVolumeUp.html","title":"Device Control APP Volume Up","keywords":"","body":"Device control APP volume plus Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlVolumeDown.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlVolumeDown.html","title":"Device Control APP Volume Down","keywords":"","body":"Device control APP volume reduction Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlOpenCamera.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlOpenCamera.html","title":"Device Control APP Open Camera","keywords":"","body":"The Device control APP opens the camera Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlCloseCamera.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlCloseCamera.html","title":"Device Control APP Close Camera","keywords":"","body":"Control Device to Disable Camera in the App Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlPhoneAnswer.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlPhoneAnswer.html","title":"Device Control APP Phone Answer","keywords":"","body":"The device control APP answers the call Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlPhoneReject.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlPhoneReject.html","title":"Device Control APP Phone Reject","keywords":"","body":"Device control APP rejects calls Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlVolumePercentage.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlVolumePercentage.html","title":"Device Control APP Music Volume Percentage","keywords":"","body":"Device Control App Music Volume Percentage JSON Field Received by App: Field Name Field Type Field Description volume_percentage int Volume percentage (0-100) Example: { \"volume_percentage\":22 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlFindPhoneStart.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlFindPhoneStart.html","title":"Device Control APP Find Phone Start","keywords":"","body":"Device control APP Find phone start Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlFindPhoneStop.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlFindPhoneStop.html","title":"Device Control APP Find Phone Stop","keywords":"","body":"Device control APP finds phone end Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlAntiLostStart.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlAntiLostStart.html","title":"Device Notification APP Anti Lost Start","keywords":"","body":"Device Notifies App to Enable Anti-Loss Feature Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlOnekeySOSStart.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlOnekeySOSStart.html","title":"Device Notification APP Onekey SOS Start","keywords":"","body":"Device Notification to Start One-Click Call in App JSON fields received by the App: Field Name Type Description status int Status: 0 for start, 1 for end timeout int Timeout duration in seconds Example: { \"status\": 0, \"timeout\": 30 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlDataUpdate.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlDataUpdate.html","title":"Device Notification APP Data Update","keywords":"","body":"Device Notification APP Data Update JSON Fields Received by the App: Field Name Field Type Field Description data_type int Jump to Details notify_type int Jump to Details msg_ID int Reserved msg_notice int Reserved error_index int Jump to DetailsFirmware error code returnNon-zero indicates an error, refer to the firmware error codeIf the app receives a non-zero error, send the command to collect flash data of device 0x21 11 Example: { \"data_type\":1, \"notify_type\":0, \"msg_ID\":0, \"msg_notice\":0, \"error_index\":0 } data_type Decimal Value Description 0 Invalid 1 The bracelet has been unbound 2 Heart rate mode has changed 3 Blood oxygen data has changed 4 Stress data has changed 5 Exited Alexa recognition process 6 Firmware initiates factory reset, notifying the app to display an alert box 7 App needs to enter the camera interface (TIT01 customization) 8 SOS event notification (205 Turkey customization) 9 Firmware has modified the alarm clock set by Alexa, and needs to send the corresponding notification bit to the app. After receiving the notification, the app sends a command to obtain the V3 alarm clock 10 Firmware has deleted a schedule reminder, and the app needs to update the corresponding list data 11 Firmware has modified the sub-style of the corresponding dial, notifying the app to obtain (command_id is 0x33, key is 0x5000) 12 Firmware notifies iOS to update notification icon and name 13 Firmware notifies the app that the icon has been updated, notifying the app to obtain the updated icon status 14 Firmware requests to reset the weather, and the app, upon receiving the request, sends weather data 15 Every time the step count increases by 2000 steps, the device requests the app to synchronize data. The app calls the synchronization interface 16 When sleep is detected to be finished, the device requests the app to synchronize sleep data. The app calls the synchronization interface to synchronize 17 Firmware has modified the three-ring data, notifying the app to update the three-ring data 18 Firmware sends a reminder when the device is fully charged, and the app, upon receiving it, displays a notification that the device is fully charged 19 After finishing a workout, manually measuring heart rate, manually measuring blood oxygen, manually measuring stress, the device automatically requests synchronization. It first checks the connection status. If not connected, it does not perform synchronization this time. After meeting the conditions for the next automatic synchronization, it checks again and initiates a synchronization request 20 Firmware has modified the notification status type of heart rate, stress, blood oxygen, physiological cycle, health guidance, and reminder items. Notifies the app to update the notification status type of heart rate, stress, blood oxygen, physiological cycle, health guidance, and reminder items 21 Firmware has completed the calculation of stress value, notifying the app to obtain the stress value 22 Firmware notifies the app that the stress calibration has failed (firmware exits the measurement interface/detection fails/detection timeout/not worn) 23 Reserved 24 Firmware notifies the app that the Bluetooth connection is established 25 Firmware notifies the app that the Bluetooth connection is disconnected 26 Firmware notifies the start of a Bluetooth call 27 Firmware notifies the end of a Bluetooth call 28 New version firmware sends a notification command every 4 minutes and 30 seconds to fix the issue of iOS showing offline 29 Notify the app that the workout has started (used to intercept dial transmission, same as 26) 30 Notify the app that the workout has ended (used to intercept dial transmission, same as 27) 31 Firmware sends a notification to the app when it restarts (the app needs to obtain firmware version information upon receiving the notification) 32 When the device is idle (not using Alexa), it needs to report a notification to the app (interval is 1 hour) 33 Firmware notifies the app to continue transmitting dial files after completing space organization 34 Firmware notifies the app to end the find bracelet command (corresponding to 6.3 find bracelet) 35 Firmware notifies the app that it has entered power-saving mode 36 Firmware notifies the app that it has exited power-saving mode 37 Firmware notifies the app to send the GPS hot start parameter settings (obsolete) 38 Firmware notifies that the transmission of raw data is complete, and notifies the app to obtain feature vector information 39 Firmware notifies the app that the blood pressure calibration has failed (firmware exits the measurement interface/detection fails/detection timeout/not worn) 40 Firmware notifies that the transmission of raw data is complete, but there is no feature vector information, and notifies the app that data collection is complete 41 V3 health data synchronization single item data completion notification (used internally by Android) 42 Firmware notifies the app that it has completed the organization of GPS data space, and requests the app to send GPS files 43 Firmware update of EPO.dat file failed, notifies the app to re-send the file 44 Firmware update of EPO.dat file successful 45 Firmware upgrade of GPS failed, notifies the app to retransmit 46 Firmware upgrade of GPS successful 47 When starting a workout, if the firmware detects abnormal GPS, it notifies the app 48 Firmware updates information of Runde Device, notifies the app to obtain it 49 Firmware notifies the user to cancel the BLE connection with the watch, and the app displays a popup window to handle it 50 Firmware notifies the app that the BT pairing is complete 51 Firmware sets the workout order, notifies the app to obtain workout order information 52 Firmware has changed the all-day step goal parameter, notifies the app to obtain the all-day step goal (0208) 53 Firmware notifies the app that it has entered the blood pressure calibration interface 54 Firmware updates the automatic recognition switch status, notifies the app to obtain the status of the workout automatic recognition switch (02EA) notify_type (bitwise access) Value Description Bit 1 Alarm modified bit0 2 Firmware overheating warning bit1 4 Brightness parameter modified (02 b0) bit2 8 Lift wrist parameter modified (02 b1) bit3 16 Do Not Disturb mode obtained (02 30) bit4 32 Phone volume issued (03 0xE3) (deleted), app volume modified, directly issued bit5 Note: Heart rate mode reuses the heart rate mode modification of V3, when data_type = 2, the app initiates a heart rate command. error_index Value Error Type Remark 0 No error 1 ACC Firmware errors 1~100 2 PPG 3 TP 4 FLASH 5 Overheating (PPG) 6 Pressure 7 GPS 8 Magnetism 100 Watchdog reset Reset log codes 100~200 101 Power-on reset 102 Software reset 103 OTA reset 104 User reset 105 Low power shutdown reset Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlFastMsgUpdate.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlFastMsgUpdate.html","title":"Initiative Notification APP SMS","keywords":"","body":"Active Notification of SMS to APP JSON fields sent by the App: Field Name Type Description is_success int 0 for failed message sending, 1 for successful send msg_ID int ID for the reply: each message has a corresponding ID msg_type int Type of the message msg_notice int 0 for no corresponding SMS reply, corresponding to the reply list Example: { \"is_success\": 0, \"msg_ID\": 1, \"msg_type\": 1, \"msg_notice\": 0 } JSON fields received by the App: Field Name Type Description msg_type int Type of the reply message: Incoming call SMS (1), QQ, WeChat msg_ID int ID for the reply: each message has a corresponding ID msg_notice int 0 for no corresponding SMS reply, corresponding to the reply list Example: { \"msg_ID\": 1, \"msg_type\": 1, \"msg_notice\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlPhotograph.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlPhotograph.html","title":"Device Control APP Camera","keywords":"","body":"Control Camera in Device Control App JSON fields received by the App: Field Name Type Description type int 0: Open camera 1: Click to start capturing 2: Capture completed 3: Request system pairing Example: { \"type\": 0 } JSON fields sent by the App: Field Name Type Description type int 0: Open camera 1: Click to start capturing 2: Capture completed 3: Request system pairing Example: { \"type\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlSpeakerValue.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDODeviceControlEvt/IDODeviceControlSpeakerValue.html","title":"Device Notification Firmware Speaker Volume Modification (Alexa)","keywords":"","body":"Device Notification Firmware Speaker Volume Modification (Alexa) JSON Field Received by App: Field Name Field Type Field Description value int Firmware volume value 0-100 Example: { \"value\":20 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 11:41:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetDialList.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetDialList.html","title":"V3 Get Dial List","keywords":"","body":"Get Watch Face List in V3 Function: getNewWatchList Flutter example: /// Get the event ID for the watch face list getWatchFaceList( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_get_watch_face_list), /// Obtain the watch face list libManager.send(evt: CmdEvtType.getWatchFaceList, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description version int Protocol version number available_count int Number of remaining available files file_max_size int Maximum size of a single file (in KB) item array List of watch face details, with \"file_name\" as the field Field Name Field Type Field Description file_name char [] Watch face name Example: { \"version\": 0, \"available_count\": 0, \"file_max_size\": 140, \"item\": [ { \"file_name\": \"w256.iwf\" }, { \"file_name\": \"w174.iwf\" } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:45:39 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetScreenInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetScreenInfo.html","title":"V3 Get Screen Information","keywords":"","body":"V3 Get Screen Information Flutter Example: /// Get event number for obtaining screen information getWatchDialInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_get_screen_ifno), /// Get screen information libManager.send(evt: CmdEvtType.getWatchDialInfo, json: jsonEncode(json)); JSON Fields Received by the App: Field Name Field Type Field Description width int Screen width height int Screen height format int Color format sizex100 int Size in 100x increments family_name char [] Family name (maximum 10 bytes) block_size int Compression block size Example: { \"block_size\" : 4096, \"family_name\" : \"139\", \"format\" : 133, \"height\" : 280, \"sizex100\" : 0, \"width\" : 240 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:55:43 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetDial.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetDial.html","title":"V3 Set Dial","keywords":"","body":"V3 Set Watch Face Flutter Example: /// Set watch face data setWatchFaceData( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_set_watch_face_data), /// Set watch face libManager.send(evt: CmdEvtType.setWatchFaceData, json: jsonEncode(json)); JSON Fields Sent by App: Field Name Field Type Field Description operate int Operation:0 - Query the currently used watch face1 - Set watch face2 - Delete watch face3 - Dynamic request space to set the corresponding space size file_name char [] Watch face name, maximum 30 bytes watch_file_size int Uncompressed file lengthAfter the firmware opens the function table v3_watch_dail_set_add_size_33_08, the app needs to send this fieldBefore the watch face is transmitted, the firmware needs to allocate corresponding space to save it, and the uncompressed file length needs to be transmitted Example: { \"operate\": 0, \"file_name\": \"\", \"watch_file_size\": 0 } JSON Fields Received by App: Field Name Field Type Field Description err_code int Error code, 0 for success, non-zero for error operate int Operation:0 - Query the currently used watch face1 - Set watch face2 - Delete watch face3 - Dynamic request space to set the corresponding space size file_name char [] Watch face name, maximum 30 bytes file_count int Number of filesRequires the firmware to enable the function table V3_watch_dail_set_add_sizeIf operate!=3, this data is the same as before, which is 1 and is saved as beforeIf operate=3: dynamic request space to set the corresponding space size, this corresponds to a deleted file name columnIf V3_watch_dail_set_add_size is not enabled, this field defaults to 1 Example: { \"err_code\": 0, \"operate\": 0, \"file_name\": \"w256.iwf\", \"file_count\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:19:14 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetHRMode.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetHRMode.html","title":"V3 Set Heart Rate Mode","keywords":"","body":"Set Heart Rate Mode V3 Function: setSmartHeartRate Flutter Example: // Set heart rate mode event number setHeartMode( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_hr_mode), /// Set heart rate mode libManager.send(evt: CmdEvtType.setHeartMode, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description update_time int Update time as a Unix timestamp in seconds. If equal to 0, it means to get the current UTC timestamp. mode int Mode136: Auto (5 minutes)153: Continuous monitoring (5S)85: Off (not effective)204: Set the corresponding measurement_interval170: Manual mode (turn off auto)187: Default typeNote: If the function table \"support_set_v3_heart_interval\" is configured, the settings of 85, 136, and 153 continuous monitoring are invalid. When configuring quickly, configure \"support_set_v3_heart_interval\" and 204 is effective. When setting continuous heart rate mode, if the \"support_set_v3_heart_interval\" function is configured, the corresponding mode is 204. has_time_range int Whether there is a time range. 0: No, 1: Yes start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) measurement_interval int Measurement interval in seconds notify_flag int Notification type:0: Invalid1: Allow notifications2: Silent notifications3: Close notificationsNote: This is ineffective if the firmware does not enable \"v3_heart_set_rate_mode_custom\" high_heart_mode int 170: Enable smart high heart rate reminder, 85: OffNote: This is ineffective if the firmware does not enable \"v3_heart_set_rate_mode_custom\" low_heart_mode int 170: Enable smart low heart rate reminder, 85: OffNote: This is ineffective if the firmware does not enable \"v3_heart_set_rate_mode_custom\" high_heart_value int Smart high heart rate reminder thresholdNote: This is ineffective if the firmware does not enable \"v3_heart_set_rate_mode_custom\" low_heart_value int Smart low heart rate reminder thresholdNote: This is ineffective if the firmware does not enable \"v3_heart_set_rate_mode_custom\" Example: { \"update_time\": 0, \"mode\": 0, \"has_time_range\": 0, \"start_hour\": 0, \"start_minute\": 0, \"end_hour\": 0, \"end_minute\": 0, \"measurement_interval\": 0, \"notify_flag\": 0, \"high_heart_mode\": 0, \"low_heart_mode\": 0, \"high_heart_value\": 0, \"low_heart_value\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description update_time int Update time as a Unix timestamp in seconds. If equal to 0, it means to get the current UTC timestamp. mode int Mode136: Auto (5 minutes)153: Continuous monitoring (5S)85: Off (not effective)204: Set the corresponding measurement_interval170: Manual mode (turn off auto)187: Default typeNote: If the function table \"support_set_v3_heart_interval\" is configured, the settings of 85, 136, and 153 continuous monitoring are invalid. When configuring quickly, configure \"support_set_v3_heart_interval\" and 204 is effective. When setting continuous heart rate mode, if the \"support_set_v3_heart_interval\" function is configured, the corresponding mode is 204. has_time_range int Whether there is a time range. 0: No, 1: Yes start_hour int Start time (hour) start_minute int Start time (minute) end_hour int End time (hour) end_minute int End time (minute) measurementInterval int Measurement interval in seconds get_sec_mode int Currently supported heart rate types by the watch, all 0 invalid values. Bit0: 5s modeNote: This is returned as 0 if \"support_set_v3_heart_interval\" is not enabled in the firmware get_min_mode int Currently supported heart rate types by the watch, all 0 invalid values. Bit0: 1 minute, bit1: 3 minutes, bit2: 5 minutes, bit3: 10 minutes, bit4: 30 minutes, bit5: 285 mode, bit6: 15 minute modeNote: This is returned as 0 if \"support_set_v3_heart_interval\" is not enabled in the firmware notify_flag int Notification type:0: Invalid1: Allow notifications2: Silent notifications3: Close notificationsNote: This is returned as 0 if \"v3_heart_set_rate_mode_custom\" is not enabled in the firmware high_heart_mode int 170: Enable smart high heart rate reminder, 85: OffNote: This is returned as 0 if \"v3_heart_set_rate_mode_custom\" is not enabled in the firmware low_heart_mode int 170: Enable smart low heart rate reminder, 85: OffNote: This is returned as 0 if \"v3_heart_set_rate_mode_custom\" is not enabled in the firmware high_heart_value int Smart high heart rate reminder thresholdNote: This is returned as 0 if \"v3_heart_set_rate_mode_custom\" is not enabled in the firmware low_heart_value Int Smart low heart rate reminder thresholdNote: This is returned as 0 if \"v3_heart_set_rate_mode_custom\" is not enabled in the firmware Example: { \"update_time\": 0, \"mode\": 204, \"has_time_range\": 1, \"start_hour\": 9, \"start_minute\": 0, \"end_hour\": 12, \"end_minute\": 19, \"measurement_interval\": 5, \"notify_flag\": 2, \"high_heart_mode\": 85, \"low_heart_mode\": 85, \"high_heart_value\": 0, \"low_heart_value\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:36:25 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3MusicControl.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3MusicControl.html","title":"V3 Music Control","keywords":"","body":"V3 Control Music Function: setBleControlMusic Flutter Example: /// Music control event number musicControl( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_music_control), /// Control music libManager.send(evt: CmdEvtType.musicControl, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description status int Status:0: Invalid1: Play2: Pause3: Stop cur_time_second int Current play time total_time_second int Total play time music_name char [] Music name (maximum 64 bytes) singer_name char [] Singer name (maximum 64 bytes)This value is not applicable if V3_music_control_02_add_singer_name is not enabled on the firmware Example: { \"status\": 1, \"cur_time_second\": 5, \"total_time_second\": 360, \"music_name\": \"夕阳无限好.mp3\", \"singer_name\": \"eason\" } JSON Fields Received by the App: Field Name Field Type Field Description status int 1: Success0: Failure Example: { \"status\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:57:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3NoticeMsg.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3NoticeMsg.html","title":"V3 Notify Message Reminder","keywords":"","body":"V3 Notification Message Reminder Function: getNotifyMsgV3 Flutter Example: /// Notification message reminder event number noticeMessageV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_notice_message), /// Notification message reminder libManager.send(evt: CmdEvtType.noticeMessageV3, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description verison int Protocol library version numberDefault version=1Version=2 is the sent format with msg_id evt_type int Message application type msg_id int Message IDIf evt_type is message reminder, mesg_ID is valid support_answering bool Support answering: 1Do not support answering: 0 support_mute bool Support mute: 1Do not support mute: 0 support_hang_up bool Support hang up: 1Do not support hang up: 0 contact char [] Contact name (maximum 64 bytes) phone_number char [] Phone number (maximum 32 bytes) data_text char [] Message content (maximum 250 bytes) Example: { \"verison\": 2, \"evt_type\": 12289, \"msg_id\": 1, \"support_answering\": false, \"support_mute\": false, \"support_hang_up\": false, \"msg_data\": \"Hello\", \"contact\": \"Lihua\", \"phone_number\": \"13340216580\", \"data_text\": \"123456\" } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 1: Success, 0: Failure Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:59:43 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetSportSort.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetSportSort.html","title":"V3 Set Sport Type Sorting","keywords":"","body":"V3 Set Sports Type Sorting Function Name: getSportsTypeV3 Flutter Example: /// Set sports type sorting event number setSportSortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_sport_sort), /// Set sports type sorting libManager.send(evt: CmdEvtType.setSportSortV3, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Data Type Field Description num int Number of sports type details, up to 30 item array Array of sport type sorting details with index and type Field Name Data Type Field Description index int Sorting number, starting from 1 type int Sport type, check the defined sport types for details Example: { \"num\":3, \"item\":[ { \"index\":1, \"type\":2, }, { \"index\":2, \"type\":22, }, { \"index\":3, \"type\":33, } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:45:17 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetAlarm.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetAlarm.html","title":"V3 APP Set BLE Alarm","keywords":"","body":"V3 Set BLE alarm Menu: syncV3SyncAlarm Flutter example: /// Set BLE alarm event number in V3APP setAlarmV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_alarm), /// Set BLE alarm in V3APP libManager.send(evt: CmdEvtType.setAlarmV3, json: jsonEncode(json)); App's JSON fields: Field Name Field Type Field Description num int Number of alarm details version int Protocol version, default is 0 item list Collection of alarm details.Fields: alarm_id&status&type&hour&minute&repeat&tsnooze_duration&delay_min&name&shock_on_off&repeat_times Field Name Field Type Field Description alarm_id int Alarm ID status int 170: Do not display (Delete), 85: Display type int Alarm type00: Wake up, 01: Sleep, 02: Exercise, 03: Take medicine, 04: Appointment, 05: Gathering, 06: Meeting, 07: Other hour int Alarm time (hour) minute int Alarm time (minute) repeat int Repeatbit1-bit7: Monday to Sunday, bit0: master switch (on/off) tsnooze_duration int Snooze duration in minutes or seconds delay_min int Delay minutes name char [24] Alarm name, maximum 24 bytes shock_on_off int Vibration switch0: Off, 1: On repeat_times int Repeat alarm timesSet to 0 to turn off, set to a number to repeat that many times Example: { \"item\" : [ { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 } ], \"num\" : 10, \"version\" : 0 } App's received JSON fields: Field Name Field Type Field Description status int 0: Success, 1: Failed Example: { \"status\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:09:53 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetAlarm.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetAlarm.html","title":"V3 APP Get Device Alarm","keywords":"","body":"Getting Alarms for V3APP Devices Menu: syncV3SyncAlarm Flutter example: /// Get alarm events of BLE devices in v3app getAlarmV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_alarm), /// Send command to get alarms for v3app devices libManager.send(evt: CmdEvtType.getAlarmV3, json: jsonEncode(json)); JSON fields sent by the App: Field Name Field Type Field Description flag int Flag for getting alarms0: Get all alarms1: Get alarms modified by the device notification JSON fields received by the App: Field Name Field Type Field Description num int Number of alarm details version int Protocol version, default is 0 item List Alarm detailsCollection of alarm details: alarm_id&status&type&hour&minute&repeat&tsnooze_duration&delay_min&name&shock_on_off&repeat_times Field Name Field Type Field Description alarm_id int Alarm ID status int 170: Hidden (deleted), 85: Displayed type int Alarm type00: Wake up, 01: Sleep, 02: Exercise, 03: Medication, 04: Date, 05: Gathering, 06: Meeting, 07: Other hour int Alarm hour minute int Alarm minute repeat int RepeatBit1-Bit7: Monday to Sunday, Bit0: General switch (on/off) tsnooze_duration int Duration of snoozing in minutes or seconds delay_min int Delay in minutes name char [24] Alarm name, maximum 24 bytes shock_on_off int Vibration switch0: Off, 1: On repeat_times int Number of repeated alarms Number of times the alarm is repeated, delay switch, set to 0 to turn off, set to a number to repeat that many times Example: { \"item\" : [ { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 }, { \"alarm_id\" : 0, \"delay_min\" : 0, \"hour\" : 0, \"minute\" : 0, \"name\" : \"\", \"repeat\" : 0, \"repeat_times\" : 0, \"shock_on_off\" : 0, \"status\" : 0, \"tsnooze_duration\" : 0, \"type\" : 0 } ], \"num\" : 10, \"version\" : 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:39:36 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3ActivityDataExchange.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3ActivityDataExchange.html","title":"V3 Multi-Sport Data Exchange","keywords":"","body":"V3 Sports Data Exchange Function: exchangeAppV3Ing Flutter Example: /// app initiates the V3 data exchange process event number exchangeAppV3Ing( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_activity_data_exchange), /// app initiates the V3 data exchange process libManager.send(evt: CmdEvtType.exchangeAppV3Ing, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description version int Protocol version number. Default: 016: biggerfive custom project (requires firmware to enable V3_support_v3_exchange_data_reply_add_real_time_speed_pace)32: Added running plan data (requires firmware to enable v3_support_sports_plan) type int Sports type signal_flag int 0: Weak signal1: Strong signal distance int Distance recorded by the app. When the app signal strength is strong, BLE calculates the distance using the app's data. When the app signal is weak, BLE does not use the app's data, and the app displays the data from the bracelet. real_time_speed int Real-time speed calculated and displayed by the app, in km/h, multiplied by 100 duration int Duration calories int Calories burned Example: { \"version\": 0, \"type\": 0, \"signal_flag\": 0, \"distance\": 0, \"real_time_speed\": 0, \"duration\": 0, \"calories\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description version int Protocol version number0: Basic version16: biggerfive custom project (requires firmware to enable V3_support_v3_exchange_data_reply_add_real_time_speed_pace)32: Added running plan data (requires firmware to enable v3_support_sports_plan) type int Sports type. Valid when act_type is 0 day int Data date (day) hour int Data time (hour) minute int Data time (minute) second int Data time (second) heart_rate int Heart rate data distance int Distance. The unit is determined by the unit settings real_time_speed int Real-time speed in km/h, multiplied by 100 km_speed int Real-time kilometer pace, in seconds per kilometer real_time_calories int Dynamic calorie count steps int Number of steps swim_posture int Main swimming posture status int Status0: Invalid1: Start2: Manually paused3: End4: Auto paused duration int Duration in seconds real_time_speed_pace int Real-time pace in seconds5-second moving average. The 5th second uses the data from 1st to 5th second, and the 6th second uses the data from 2nd to 6th second. No pace or speed is displayed for the 1st to 4th seconds.Requires the firmware to enable V3_support_v3_exchange_data_reply_add_real_time_speed_pace. Returns 0 if the feature is not enabled te int Aerobic training effect level. No unit. Range: 0-50. Transmitted by scaling up by 10Requires the firmware to enable V3_support_v3_exchange_data_reply_add_real_time_speed_pace. Returns 0 if the feature is not enabled tean int Anaerobic training effect level. No unit. Range: 0-50. Transmitted by scaling up by 10Requires the firmware to enable V3_support_v3_exchange_data_reply_add_real_time_speed_pace. Returns 0 if the feature is not enabled action_type int Action type1: Fast walking2: Jogging3: Medium-speed running4: Sprinting5: End of exercise (also waiting for user to start free exercise)6: Free exercise after the end of the workout (this field is effective when operate is 5)Cumulative exercise time = training time within the session + time after the session endsRequires the firmware to enable v3_support_sports_plan. Returns 0 if the feature is not enabled count_hour int When action_type is 1-5, this field is the countdown time (note: time decreases)When action_type is 6, this field is the time after the session ends (note: time increases)Requires the firmware to enable v3_support_sports_plan. Returns 0 if the feature is not enabled count_minute int When action_type is 1-5, this field is the countdown time (note: time decreases)When action_type is 6, this field is the time after the session ends (note: time increases)Requires the firmware to enable v3_support_sports_plan. Returns 0 if the feature is not enabled count_second int When action_type is 1-5, this field is the countdown time (note: time decreases)When action_type is 6, this field is the time after the session ends (note: time increases)Requires the firmware to enable v3_support_sports_plan. Returns 0 if the feature is not enabled Example: { \"version\": 0, \"type\": 0, \"day\": 0, \"hour\": 0, \"minute\": 0, \"second\": 0, \"heart_rate\": 0, \"distance\": 0, \"real_time_speed\": 0, \"km_speed\": 0, \"real_time_calories\": 0, \"steps\": 0, \"swim_posture\": 0, \"status\": 0, \"duration\": 0, \"real_time_speed_pace\": 0, \"te\": 0, \"tean\": 0, \"action_type\": 0, \"count_hour\": 0, \"count_minute\": 0, \"count_second\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:24:59 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3ActivityDataFinal.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3ActivityDataFinal.html","title":"V3 Get Last Activity Data","keywords":"","body":"Lastest Getting V3 Sports Data Flutter Example: /// app get v3 activity data event exchangeAppGetActivityData( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_activity_data), /// app get v3 activity data libManager.send(evt: CmdEvtType.exchangeAppGetActivityData, json: jsonEncode(json)); JSON Fields Received by App: Field Name Field Type Field Description version int Protocol library version, default 16If v3_support_sports_plan is enabled, version=32.If V3_support_v3_exchange_data_reply_add_real_time_speed_pace is enabled, version=48. type int Sports type year int Year month int Month day int Day hour int Hour minute int Minute second int Second hr_data_interval_minute int Heart rate interval, in minutes step int Number of steps durations int Duration calories int Calories distance int Distance burn_fat_mins int Duration of fat-burning heart rate, in minutes aerobic_mins int Duration of aerobic exercise limit_mins int Duration of limit exercise warm_up int Warm-up exercise (field repeated) fat_burning int Fat-burning exercise (field repeated) aerobic_exercise Int Aerobic exercise (field repeated) anaerobic_exercise int Anaerobic exercise (field repeated) extreme_exercise int Extreme exercise (field repeated) warm_up_time int Accumulated time of warm-up exercise, in seconds fat_burning_time int Accumulated time of fat-burning exercise, in seconds aerobic_exercise_time int Accumulated time of aerobic exercise, in seconds anaerobic_exercise_time int Accumulated time of anaerobic exercise, in seconds extreme_exercise_time int Accumulated time of extreme exercise, in seconds avg_speed int Average speed, in km/h max_speed int Maximum speed, in km/h avg_step_stride int Average step stride max_step_stride int Maximum step stride km_speed int Average pace per kilometer fast_km_speed int Fastest pace per kilometer avg_step_frequency int Average step frequency max_step_frequency int Maximum step frequency avg_hr_value int Average heart rate max_hr_value int Maximum heart rate km_speed_count int Count of pace per kilometer details, maximum 100 steps_frequency_count int Count of step frequency details mi_speed_count int Count of pace per mile details, maximum 100 recover_time int Recovery time, in hoursAfter the app receives this data, it needs to decrement by one every hour vo2max int Maximum oxygen consumption, in ml/kg/min training_effect int Training effect, range: 1.0 - 5.0 (transmitted enlarged by 10) grade int Oxygen consumption grade1: Low 2: Amateur 3: General 4: Average 5: Good 6: Excellent 7: Professional act_type int Plan type:1: 3km running plan2: 5km running plan3: 10km running plan4: Half marathon training (Phase 2)5: Marathon training (Phase 2)64: 6 minutes easy run65: 10 minutes easy run66: 15 minutes easy run67: Beginner walk-run combination68: Intermediate walk-run combination69: Advanced walk-run combination128: Post-run stretch training_offset int Training course date offset, starting from zeroEffective when version=32, otherwise reported as 0 action_data_count int Number of action trainingEffective when version=32, otherwise reported as 0 in_class_calories int Calories burned in class, in kcalEffective when version=32, otherwise reported as 0 completion_rate int Action completion rate 0–100Effective when version=32, otherwise reported as 0 hr_completion_rate int Heart rate control rate 0–100Effective when version=32, otherwise reported as 0 smart_competitor int 0: Invalid 1: Non-intelligent companion running 2: Intelligent companion runningEffective when support_smart_competitor is enabled, otherwise reported as 0 ai_image_id int AI image IDEffective when support_smart_competitor is enabled, otherwise reported as 0 user_image_id int User image IDEffective when support_smart_competitor is enabled, otherwise reported as 0 bg_image_id int Background image IDEffective when support_smart_competitor is enabled, otherwise reported as 0 smart_competitor_pace int Intelligent companion running opponent's paceEffective when support_smart_competitor is enabled, otherwise reported as 0 real_speed_count int Count of real-time speedEffective when version=48, otherwise reported as 0 pace_speed_count int Array of real-time paceEffective when version=48, otherwise reported as 0 km_speed_s int [] Seconds per kilometer, pace speed steps_frequency int [] Step frequency in steps per minute items_mi_speed int [] Array of pace speed in seconds per mile item_real_speed int [] Real-time speed in km/h, with a maximum of 6 hours of data at 5-second intervals. If version=48, the field is valid; otherwise, it is reported as 0 pace_speed_items int [] Array of real-time pace speed in seconds, with a 5-second interval. If version=48, the field is valid; otherwise, it is reported as 0 items Collection Details of completed actions including type, heart_contr_value, time, goal_time. If version=32, the field is valid; otherwise, it is reported as 0 Field Name Field Type Field Description type int Type of action: 1=brisk walking, 2=jogging, 3=medium-speed running, 4=sprinting. If version=32, the field is valid; otherwise, it is reported as 0 heart_con_value int Heart rate control value for each action. If version=32, the field is valid; otherwise, it is reported as 0 time int Time to complete the action in seconds. If version=32, the field is valid; otherwise, it is reported as 0 goal_timegoal_time int Goal time for the action. If version=32, the field is valid; otherwise, it is reported as 0 Example: { \"version\":0, \"type\":0, \"year\":0, \"month\":0, \"day\":0, \"hour\":0, \"minute\":0, \"second\":0, \"hr_data_interval_minute\":0, \"step\":0, \"durations\":0, \"calories\":0, \"distance\":0, \"burn_fat_mins\":0, \"aerobic_mins\":0, \"limit_mins\":0, \"warm_up\":0, \"fat_burning\":0, \"aerobic_exercise\":0, \"anaerobic_exercise\":0, \"extreme_exercise\":0, \"warm_up_time\":0, \"fat_burning_time\":0, \"aerobic_exercise_time\":0, \"anaerobic_exercise_time\":0, \"extreme_exercise_time\":0, \"avg_speed\":0, \"max_speed\":0, \"avg_step_stride\":0, \"max_step_stride\":0, \"km_speed\":0, \"fast_km_speed\":0, \"avg_step_frequency\":0, \"max_step_frequency\":0, \"avg_hr_value\":0, \"max_hr_value\":0, \"km_speed_count\":0, \"steps_frequency_count\":0, \"mi_speed_count\":0, \"recover_time\":0, \"vo2max\":0, \"training_effect\":0, \"grade\":0, \"act_type\":0, \"training_offset\":0, \"action_data_count\":0, \"in_class_calories\":0, \"completion_rate\":0, \"hr_completion_rate\":0, \"real_speed_count\":0, \"pace_speed_count\":0, \"km_speed_s\":[], \"steps_frequency\":[], \"items_mi_speed\":[], \"item_real_speed\":[], \"pace_speed_items\":[], \"items\":[ { \"type\":0, \"heart_con_value\":0, \"time\":0, \"goal_timegoal_time\":0 }, { \"type\":0, \"heart_con_value\":0, \"time\":0, \"goal_timegoal_time\":0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:29:53 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetActivityExchangeHRData.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetActivityExchangeHRData.html","title":"V3 Get 1-Minute Heart Rate Data in Activity Data Exchange","keywords":"","body":"V3 Get 1 Minute Heart Rate Data in Data Exchange Flutter Example: /// Event number for app to get V3 heart rate data exchangeAppGetV3HrData( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_activity_exchange_heart_rate_data), /// App gets V3 heart rate data libManager.send(evt: CmdEvtType.exchangeAppGetV3HrData, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description version int Protocol version number (reserved) hour int Hour minute int Minute second int Second heart_rate_history_len int Length of heart rate data array (max 60) interval_second int Heart rate interval in seconds heart_rate_history List Heart rate data array for one minute, with one data point every second Example: { \"version\": 0, \"hour\": 0, \"minute\": 0, \"second\": 0, \"heart_rate_history_len\": 0, \"interval_second\": 0, \"heart_rate_history\": [ 85, 85, 86, 90, 100, 80, 75 ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:37:25 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetLanguageLibList.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetLanguageLibList.html","title":"V3 Get Device Font Library List","keywords":"","body":"V3 Get Language Library List Menu: getLangLibraryV3 Flutter Example: /// Event number for getting the device's language library list in V3 getLanguageLibraryDataV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_language_library_data), /// Get the device's language library list in V3 libManager.send(evt: CmdEvtType.getLanguageLibraryDataV3, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description version int Protocol library versionReserved use_lang int Currently used language default_lang int Default language fixed_lang int Number of fixed storage languages max_storage_lang int Maximum storage languages items_len int Number of languages currently supported by the firmwareThere may not be corresponding font library files user_len int Number of languages currently stored items set Details of the number of languages currently supported by the firmwarelanguage_type & language_version set items_user set Details of the number of languages currently storedlanguage_type & language_version set Field Name Field Type Field Description language_type int Language type0: Invalid1: Chinese2: English3: French4: German5: Italian6: Spanish7: Japanese8: Polish9: Czech10: Romanian11: Lithuanian12: Dutch13: Slovenian14: Hungarian15: Russian16: Ukrainian17: Slovak18: Danish19: Croatian20: Indonesian21: Korean22: Hindi23: Portuguese24: Turkish25: Thai26: Vietnamese27: Burmese28: Filipino29: Traditional Chinese30: Greek31: Arabic32: Swedish33: Finnish34: Persian35: Norwegian language_version int Language version number Example: { \"version\": 0, \"use_lang\": 1, \"default_lang\": 1, \"fixed_lang\": 3, \"max_storage_lang\": 10, \"items_len\": 2, \"user_len\": 3, \"items\": [ { \"language_type\": 1, \"language_version\": 0 }, { \"language_type\": 2, \"language_version\": 0 } ], \"items_user\": [ { \"language_type\": 1, \"language_version\": 0 }, { \"language_type\": 2, \"language_version\": 0 }, { \"language_type\": 3, \"language_version\": 0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:49:40 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetVoiceReplyTxt.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetVoiceReplyTxt.html","title":"V3 Set Voice Reply Text","keywords":"","body":"V3 Voice Reply Text Function Name: getSportsTypeV3 Flutter Example: /// V3 voice reply text event number setVoiceReplyTxtV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_voice_reply_txt), /// V3 voice reply text libManager.send(evt: CmdEvtType.setVoiceReplyTxtV3, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Data Type Field Description version int Protocol version number, 2 flag_is_continue int Flag for continuing recording0: Stop recording, 1: Continue recording title char [] Title data, maximum 32 bytes text_content char [] Content data, maximum 512 bytes Example: { \"version\":0, \"flag_is_continue\":1, \"title\":\"title\", \"text_content\":\"content\" } JSON Fields Received by the App: Field Name Data Type Field Description is_success int 1: Success, 0: Failure Example: { \"is_success\":1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:46:08 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetActivityExchangeGPSData.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetActivityExchangeGPSData.html","title":"V3 Get GPS Data for a Period of Time in Activity Data Exchange","keywords":"","body":"V3 Get GPS Data for a Certain Period in Data Exchange Flutter Example: /// V3 Get GPS Data for a Certain Period in Data Exchange event number getActivityExchangeGpsData( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_activity_exchange_gps_data), /// V3 Get GPS Data for a Certain Period in Data Exchange libManager.send(evt: CmdEvtType.getActivityExchangeGpsData, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description version int Protocol version number hour int Hour minute int Minute second int Second interval_second int Interval time in seconds GPS_data_len int Length of GPS data GPS_data List List of GPS data details Field Name Field Type Field Description latitude double Latitude longitude double Longitude Example: { \"version\": 0, \"hour\": 0, \"minute\": 0, \"second\": 0, \"interval_second\": 0, \"GPS_data_len\": 1, \"GPS_data\": [ { \"latitude\": 0, \"longitude\": 0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:36:35 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetHotStartParam.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetHotStartParam.html","title":"V3 Set GPS Hot Start Parameters","keywords":"","body":"V3 Set GPS Hot Start Parameters Flutter Example: /// V3 set GPS hot start parameters event number setHotStartParamV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_hot_start_param ); /// V3 set GPS hot start parameters libManager.send( evt: CmdEvtType.setHotStartParamV3, json: jsonEncode(json) ); JSON Fields Sent by the App: Field Name Field Type Field Description accmaj int Reference height (in meters) accmin int Semi-major RMS accuracy (in meters) accvert int Direction angle (in degrees) altitude int Height x10 bear int Semi-minor RMS accuracy (in meters) latitude int Latitude x10^6, positive for north longitude int Longitude x10^6, positive for east tcxo_offset int TCXO offset Example: { \"accmaj\": 0, \"accmin\": 0, \"accvert\": 0, \"altitude\": 0, \"bear\": 0, \"latitude\": 0, \"longitude\": 0, \"tcxo_offset\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:33:38 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetBleBeep.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetBleBeep.html","title":"V3 Get Firmware Local Beep Sound File Information","keywords":"","body":"Getting firmware local beep file information for V3 Menu: getSupportGetBleBeepV3 Flutter example: /// V3 command to get firmware local beep file information getBleBeepV3( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_ble_beep ), /// Send V3 command to get firmware local beep file information libManager.send(evt: CmdEvtType.getBleBeepV3, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description version int Protocol version number err_code int Error code, 0 for success, non-zero for failure item_count int Number of beep files item array List of beep file names Field Name Field Type Field Description name char [] Beep file name, maximum 30 bytes Example: { \"version\": 0, \"err_code\": 0, \"item_count\": 2, \"item\": [ { \"name\": \" \" }, { \"name\": \" \" } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:41:08 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3ControlBpCal.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3ControlBpCal.html","title":"V3 Control Blood Pressure Calibration","keywords":"","body":"V3 Blood Pressure Calibration Control Flutter Example: /// v3 blood pressure calibration control setBpCalControlV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_bp_cal_control), /// v3 blood pressure calibration control libManager.send(evt: CmdEvtType.setBpCalControlV3, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description operate int 0: Invalid1: Start blood pressure calibration2: Stop blood pressure calibration3: Get feature vector information file_path char [] The file path to save the raw data obtained during firmware blood pressure calibrationPath includes file name (../../blood.txt)Valid when operate=1 Example: { \"operate\": 1, \"file_path\": \"/sdcard/lx/blood.txt\" } JSON Fields Received by the App: Field Name Field Type Field Description error_code int Error code: 0 for success, non-zero for failure operate int Operation0: Invalid1: Start blood pressure calibration2: Stop blood pressure calibration3: Get feature vector sbp_ppg_feature_num int Number of high blood pressure PPG feature vectorsValid when operate=3 dbp_ppg_feature_num int Number of low blood pressure PPG feature vectorsValid when operate=3 sbp_ppg_feature_items int [] Array of high blood pressure PPG feature vectorsValid when operate=3 dbp_ppg_feature_items int [] Array of low blood pressure PPG feature vectorsValid when operate=3 Example: { \"error_code\": 0, \"operate\": 1, \"sbp_ppg_feature_num\": 0, \"dbp_ppg_feature_num\": 0, \"sbp_ppg_feature_items\": null, \"dbp_ppg_feature_items\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:31:43 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetDailLIstNew.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetDailLIstNew.html","title":"V3 Get Dial List (New Interface)","keywords":"","body":"Getting watch face list for V3 (New API) Menu: getNewWatchList Flutter example: /// V3 command to get watch face list getWatchListV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_watch_list_new), /// Send V3 command to get watch face list libManager.send(evt: CmdEvtType.getWatchListV3, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description local_watch_num int Total number of local watch faces cloud_watch_num int Total number of cloud watch faces wallpaper_watch_num int Total number of wallpaper watch faces user_cloud_watch_num int Number of cloud watch faces used user_wallpaper_watch_num int Number of wallpaper watch faces used now_show_watch_name char [] ID of the currently displayed watch face, maximum 30 bytes watch_frame_main_version int Framework version number, starting from 1 file_max_size int Maximum size of a single file, in kilobytes list_item_numb int Number of watch face list details watch_capacity_size int Total capacity of watch facesSet to 0 if the firmware enables V3_support_watch_capacity_size_display user_watch_capacity_size int Used capacity of watch facesSet to 0 if the firmware enables V3_support_watch_capacity_size_display usable_max_download_space_size int Maximum continuous space available for downloading watch facesSet to 0 if the firmware enables V3_support_watch_capacity_size_display item array Watch face list details, including type, watch_version, sort_number, name, and size Field Name Field Type Field Description type int Watch face type1: Normal watch face2: Wallpaper watch face3: Cloud watch face watch_version int Current version number of the watch face (applies to cloud watch faces) sort_number int Watch face order number name char [] Watch face name size int Size of the watch face, in bytesApplies only if the firmware enables v3_support_get_watch_size, otherwise the field is invalid Example: { \"local_watch_num\": 0, \"cloud_watch_num\": 0, \"wallpaper_watch_num\": 0, \"user_cloud_watch_num\": 0, \"user_wallpaper_watch_num\": 0, \"now_show_watch_name\": \"w123.iwf\", \"watch_frame_main_version\": 0, \"file_max_size\": 0, \"list_item_numb\": 2, \"watch_capacity_size\": 0, \"user_watch_capacity_size\": 0, \"usable_max_download_space_size\": 0, \"item\": [ { \"type\": 0, \"watch_version\": 0, \"sort_number\": 0, \"name\": \"w123.iwf\", \"size\": 0 }, { \"type\": 0, \"watch_version\": 0, \"sort_number\": 0, \"name\": \"w846.iwf\", \"size\": 0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:42:32 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetWallpaperDialStyle.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetWallpaperDialStyle.html","title":"V3 Set Wallpaper Dial Style","keywords":"","body":"V3 Set Wallpaper Dial Color and Position Function Name: setWatchPhotoPositionMove Flutter Example: /// Set wallpaper dial list event number setWallpaperDialReplyV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_wallpaper_dial_reply), /// Set wallpaper dial list libManager.send(evt: CmdEvtType.setWallpaperDialReplyV3, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Data Type Field Description operate int Operation: 0 for query, 1 for setting, 2 for deleting the wallpaper dial location int Set location information, reference to the 9-grid layout hide_type int Hide type: 0 for showing all, 1 for hiding sub-controls (icons and numbers) time_color int Color of time control (1 byte reserved + R (1 byte) + G (1 byte) + B (1 byte)) widget_type int Control type: 1 for week/date, 2 for steps, 3 for distance, 4 for calories, 5 for heart rate, 6 for battery widget_icon_color int Color of widget icons (1 byte reserved + R (1 byte) + G (1 byte) + B (1 byte)) widget_num_color int Color of widget numbers (1 byte reserved + R (1 byte) + G (1 byte) + B (1 byte)) Example: { \"operate\": 0, \"location\": 0, \"hide_type\": 0, \"time_color\": 0, \"widget_type\": 0, \"widget_icon_color\": 0, \"widget_num_color\": 0 } JSON Fields Received by the App: Field Name Data Type Field Description err_code int 0 for success, non-zero for failure operate int Operation: 0 for query, 1 for setting, 2 for deleting the wallpaper dial location int Set location information hide_type int Hide type time_color int Color of time control widget_type int Control type widget_icon_color int Color of widget icons (1 byte reserved + R (1 byte) + G (1 byte) + B (1 byte)) widget_num_color int Color of widget numbers (1 byte reserved + R (1 byte) + G (1 byte) + B (1 byte)) Example: { \"err_code\": 0, \"operate\": 0, \"location\": 1, \"hide_type\": 1, \"time_color\": 16777215, \"widget_type\": 1, \"widget_icon_color\": 0, \"widget_num_color\": 65535 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:49:07 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetGet100SportSort.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetGet100SportSort.html","title":"V3 Set/Get 100 Sport Type Sorting","keywords":"","body":"V3 Set and Query 100 Sports Sorting Function: getSportsTypeV3 Flutter Example: /// v3 New event number for 100 sports sorting set100SportSortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_100_sport_sort), /// v3 New 100 sports sorting libManager.send(evt: CmdEvtType.set100SportSortV3, json: jsonEncode(json)); JSON Fields Sent by App: Field Name Field Type Field Description version int Protocol library version number operate int Operation 0: Invalid 1: Query 2: Set now_user_location int Current position of displayed added sports all_num int Number of sports in the sorting list items_set int [] Sports sorting list, maximum 150 bytes Example: { \"version\": 0, \"operate\": 2, \"now_user_location\": 2, \"all_num\": 6, \"items_set\": [ 2, 3, 50, 198, 20, 32 ] } JSON Fields Received by App: Field Name Field Type Field Description version int Protocol library version number err_code int 0: Success, Non-zero: Failure operate int Operation 0: Invalid 1: Query 2: Set min_show_num int Minimum number of items to be displayed, at least 1 max_show_num int Maximum number of items to be displayed, maximum 20 now_user_location int Current position of displayed added sports, app displays based on this position, with the devices added before corresponding to those positions, and those added later to the positions after this position. Only valid for queries all_num int Number of sports sorting list details, valid for queries items array List of sports sorting, containing type and flag Each item in the sports sorting list contains the following fields: Field Name Field Type Field Description type int Type of sport flag int 0: None downloaded for allBit0: Small icon downloadedBit1: Big icon downloadedBit2: Medium icon downloadedBit3: Smallest icon downloaded Example: { \"version\": 0, \"err_code\": 0, \"operate\": 2, \"min_show_num\": 1, \"max_show_num\": 20, \"now_user_location\": 2, \"all_num\": 6, \"items\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:23:49 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3ScheduleReminder.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3ScheduleReminder.html","title":"V3 Schedule Reminder","keywords":"","body":"V3 Schedule Reminder Menu: setScheduleReminder Flutter example: /// v3 set schedule reminder event ID setSchedulerReminderV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_scheduler_reminder), /// v3 set schedule reminder libManager.send(evt: CmdEvtType.setSchedulerReminderV3, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description version int Protocol library version number operate int Operation type0: Invalid1: Add2: Delete3: Query4: Modify num int Number of reminder event details in the items field. Only affects the setting, otherwise 0. Sent one at a time items array Reminder event details Maximum of 1 data item Field Name Field Type Field Description id int Reminder event ID. Incremental value sent by the app, starting from 0 year int Year mon int Month day int Day hour int Hour min int Minute sec int Second repeat_type int Repeat time Set bit1-bit7 for week-based repeat if enabled with v3_support_set_repeat_week_type_on_schedule_reminder (Monday to Sunday, with bit 0 as the general switch) Set repeat type (0: Invalid, 1: Once, 2: Daily, 3: Weekly, 4: Monthly, 5: Yearly) if enabled with v3_support_set_repeat_type_on_schedule_reminder remind_on_off int Daily reminder switch0: Off, 1: On state int State code 0: Invalid, 1: Deleted, 2: Enabled title char [] Title content. Maximum 74 bytes note char [] Reminder content. Maximum 149 bytes Example: { \"version\": 0, \"operate\": 1, \"num\": 1, \"items\": [ { \"id\": 0, \"year\": 2022, \"mon\": 12, \"day\": 26, \"hour\": 15, \"min\": 51, \"sec\": 20, \"repeat_type\": 255, \"remind_on_off\": 1, \"state\": 2, \"title\": \"Reminder 1\", \"note\": \"Remember to complete the task\" } ] } JSON fields received by the app: Field Name Field Type Field Description version int Protocol library version number err_code int Error code. 0 if successful, non-zero if error num int Number of existing reminder data in the firmware operate int Operation type0: Invalid1: Add2: Delete3: Query4: Modify items array Reminder event details Field Name Field Type Field Description id int Reminder event ID. Incremental value sent by the app, starting from 0 year int Year mon int Month day int Day hour int Hour min int Minute sec int Second repeat_type int Repeat time Set bit1-bit7 for week-based repeat if enabled with v3_support_set_repeat_week_type_on_schedule_reminder (Monday to Sunday, with bit 0 as the general switch) Set repeat type (0: Invalid, 1: Once, 2: Daily, 3: Weekly, 4: Monthly, 5: Yearly) if enabled with v3_support_set_repeat_type_on_schedule_reminder remind_on_off int Daily reminder switch0: Off, 1: On state int State code 0: Invalid, 1: Deleted, 2: Enabled title char [] Title content. Maximum 74 bytes note char [] Reminder content. Maximum 149 bytes Example: { \"version\": 0, \"err_code\": 0, \"num\": 0, \"operate\": 1, \"items\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:06:36 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetGetMainUiSort.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetGetMainUiSort.html","title":"V3 Set/Get Main UI Control Sorting","keywords":"","body":"V3 Setting and Query Sorting of Main UI Controls Function: setSetMainUiSort Flutter Example: /// v3 Set event number for sorting of main UI controls setMainUISortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_main_ui_sort), /// v3 Set sorting of main UI controls libManager.send(evt: CmdEvtType.setMainUISortV3, json: jsonEncode(json)); JSON Fields Sent by App: Field Name Field Type Field Description version int Protocol library version number operate int Operation 0: Invalid 1: Query 2: Set all_num int Number of details of control sorting list items int [] List of control sorting details location_x int Coordinate x-axis, starting from 1 location_y int Coordinate y-axis, starting from 1 One y-axis represents a horizontal grid size_type int 0: Invalid 1: Large icon 2: Small icon widgets_type int Types of controls 0: Invalid 1: Week/Date 2: Steps 3: Distance 4: Calories 5: Heart Rate 6: Battery Example: { \"version\": 0, \"operate\": 2, \"all_num\": 3, \"items\": [ 1, 2, 3 ], \"location_x\": 1, \"location_y\": 1, \"size_type\": 2, \"widgets_type\": 1 } JSON Fields Received by App: Field Name Field Type Field Description version int Protocol library version number err_code int 0: Success, Non-zero: Failure operate int Operation 0: Invalid 1: Query 2: Set all_num int Number of currently displayed list in firmware items array Arrangement of currently displayed list in firmware Collection of location_x, location_y, size_type, support_size_type, and widgets_type support_items array All supported component types in firmware Collection of support_size_type and widgets_type Field Name Field Type Field Description location_x int Coordinate x-axis, starting from 1 location_y int Coordinate y-axis, starting from 1 One y-axis represents a horizontal grid size_type int 0: Invalid 1: Large icon 2: Small icon support_size_type int Editable icon types supported by the firmware 0: Invalid 1: Large icon 2: Small icon 3: Large icon + Small icon widgets_type int Types of controls 0: Invalid 1: Week/Date 2: Steps 3: Distance 4: Calories 5: Heart Rate 6: Battery Field Name Field Type Field Description support_size_type int Editable icon types supported by the firmware 0: Invalid 1: Large icon 2: Small icon 3: Large icon + Small icon widgets_type int Types of controls 0: Invalid 1: Week/Date 2: Steps 3: Distance 4: Calories 5: Heart Rate 6: Battery Example: { \"version\": 0, \"err_code\": 0, \"operate\": 0, \"all_num\": 0, \"items\": [], \"location_x\": 0, \"location_y\": 0, \"size_type\": 0, \"widgets_type\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:30:01 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetGetBaseSportParamSort.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetGetBaseSportParamSort.html","title":"V3 Set/Get Base Sport Parameter Sorting","keywords":"","body":"V3 Set and Query Sports Sub-item Data Sorting Function: setSet20SportParamSort Flutter Example: /// v3 Set event number for sports sub-item data sorting setBaseSportParamSortV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_base_sport_param_sort), /// v3 Set sports sub-item data sorting libManager.send(evt: CmdEvtType.setBaseSportParamSortV3, json: jsonEncode(json)); JSON Fields Sent by App: Field Name Field Type Field Description version int Protocol library version number operate int Operation 0: Invalid 1: Query 2: Set sport_type int Type of sport now_user_location int Current position of displayed added sports all_num int Number of items in the sports sorting list items int [] Settings list, maximum 50 bytes Example: { \"version\": 0, \"operate\": 2, \"sport_type\": 2, \"now_user_location\": 2, \"all_num\": 5, \"items\": [ 1, 2, 3, 4, 5 ] } JSON Fields Received by App: Field Name Field Type Field Description version int Protocol library version number err_code int 0: Success, Non-zero: Failure operate int Operation 0: Invalid 1: Query 2: Set sport_type int Type of sport now_user_location int Current position of displayed added sports, app displays based on this position, with the devices added before corresponding to those positions, and those added later to the positions after this position. Only valid for queries all_num int Number of sports sorting list details, valid for queries items int [] List of sports sub-item sorting, containing sub-item sorting enumeration Example: { \"version\": 0, \"err_code\": 0, \"operate\": 0, \"sport_type\": 0, \"now_user_location\": 0, \"all_num\": 0, \"items\": [] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:28:08 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetLongCityName.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetLongCityName.html","title":"V3 Set Sport City Name","keywords":"","body":"Setting the Name of a Sports City (V3) Flutter Example: /// V3 Setting the Name of a Sports City event number setLongCityNameV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_long_city_name), /// V3 Setting the Name of a Sports City libManager.send(evt: CmdEvtType.setLongCityNameV3, json: jsonEncode(json)); JSON field sent by the app: Field Name Field Type Field Description version int Library version number name char [] City nameMaximum 75 bytes Example: { \"version\": 0, \"name\": \"shenzhen\" } JSON field received by the app: Field Name Field Type Field Description version int Library version number err_code int Error code: 0 for success, non-zero for error Example: { \"version\": 0, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:37:37 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetNoticeMegState.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetNoticeMegState.html","title":"V3 Set Notification Status for Individual Applications","keywords":"","body":"Setting Notification Status for a Single App (V3) Function: setSetNotificationStatus Flutter Example: /// V3 Setting Notification Status event number setNoticeMessageState( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.tran_json_set_notice_message_state), /// V3 Setting Notification Status libManager.send(evt: CmdEvtType.setNoticeMessageState, json: jsonEncode(json)); JSON field sent by the app: Field Name Field Type Field Description version int Library version number items_num int Number of message details operat int Operation1: Add, 2: Modify, 3: Get and Query all_on_off int Add and modify onlyOverall notification switch170: Enable all notifications, 85: Disable all notifications all_send_num int Total number of packets sentFor sending more than 100 packets in multiple partsall_send_num = now_send_index for completion of sending now_send_index int Current sequence of sending items Array Message detailsCollection of evt_type, notify_state, and pic_flag Field Name Field Type Field Description evt_type int Event type notify_state int Notification status1: Allow notifications, 2: Silent notifications, 3: Close notifications pic_flag int Applies when replying, set this parameter to 00: Invalid, 1: Download corresponding image, 2: No corresponding image Example: { \"version\": 0, \"items_num\": 0, \"operat\": 3, \"all_on_off\": 170, \"all_send_num\": 1, \"now_send_index\": 1, \"items\": null } JSON field received by the app: Field Name Field Type Field Description version int Library version number err_code int Error code: 0 for success, non-zero for failure operat int Operation1: Add, 2: Modify, 3: Get and Query all_on_off int Valid for queryingReply with overall notification switch status170: Enable all notifications, 85: Disable all notifications items_num int Valid for queryingNumber of message details in the firmware items Array Message details content, valid for querying Field Name Field Type Field Description evt_type int Event type notify_state int Notification status1: Allow notifications, 2: Silent notifications, 3: Close notifications pic_flag int 0: Invalid, 1: Download corresponding image, 2: No corresponding image Example: { \"version\": 0, \"err_code\": 0, \"operat\": 3, \"all_on_off\": 170, \"items_num\": 2, \"items\": [ { \"evt_type\": 1, \"notify_state\": 1, \"pic_flag\": 1 }, { \"evt_type\": 1, \"notify_state\": 1, \"pic_flag\": 1 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:39:28 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetPackName.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetPackName.html","title":"V3 Get Package Name","keywords":"","body":"V3 Get Package Name Function: getNotifyIconAdaptive Flutter Example: /// Get event number for obtaining app package name getPackName( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.tran_json_get_app_pack_name ), /// Get app package name libManager.send(evt: CmdEvtType.getPackName, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description operat_flag int 0: Get all1: Get incremental data last_id int Only effective when operat_flag == Get incremental data.Need to pass the ID returned last time to continue getting incremental data Example: { \"operat_flag\": 0, \"last_id\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description version int Protocol library version number icon_width int Width icon_height int Height format int Color format block_size int Compression block size pack_name_num int Number of package names package_num int Total number of package name details items array App package name detailsCollection of item_id, evt_type, need_sync_icon, msg_cout, pack_name_len, pack_name_array Field Name Field Type Field Description item_id int ID assigned to each package name, starting from 0, used later to get incremental data evt_type int Event type need_sync_icon int Need to update icon data:0: No update1: Update icon only2: Update app name only3: Update both icon and app name msg_cout int Number of times this message was received pack_name_len int Package name length, maximum 50 bytes pack_name_array char [] Package name Example: { \"version\": 0, \"icon_width\": 200, \"icon_height\": 120, \"format\": 133, \"block_size\": 1024, \"pack_name_num\": 0, \"package_num\": 0, \"items\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:53:52 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SyncContact.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SyncContact.html","title":"V3 Sync Bluetooth Call Common Contacts","keywords":"","body":"V3 Synchronization Protocol Bluetooth Call Common Contacts Menu: setSyncContact, reminderCallContact Flutter Example: /// Synchronize common contacts event number setSyncContact( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.tran_json_sync_contact ), /// Synchronize common contacts libManager.send(evt: CmdEvtType.setSyncContact, json: jsonEncode(json)); JSON fields issued by the App: Field Name Field Type Field Description version int Protocol library version number operat int Operation 0: invalid1: set contacts2: query contacts 3: set emergency contacts (requires support for v3_support_set_get_emergency_connact in the menu)4: query emergency contacts (requires support for v3_support_set_get_emergency_connact in the menu) items_num int Number of contact details, maximum of 10 items array Contact details collection of phone and name Field Name Field Type Field Description phone char [] Contact phone number content, maximum of 14 bytes + '\\0' line break name char [] Contact name content, maximum of 31 bytes + '\\0' line break Example: { \"version\": 0, \"operat\": 1, \"items_num\": 1, \"items\": [ { \"phone\": \"13310214520\", \"name\": \"张三\" } ] } JSON fields received by the App: Field Name Field Type Field Description version int Protocol library version number err_code int Error code, 0 for success, non-zero for error code operat int Operation 0: invalid1: set2: query3: set emergency contacts (requires support for v3_support_set_get_emergency_connact in the menu)4: query emergency contacts (requires support for v3_support_set_get_emergency_connact in the menu) items_num int Number of contact details, maximum of 10Valid only when the operation code (operat) is 2 or 4 items array Contact details collection of phone and nameValid only when the operation code (operat) is 2 or 4 Field Name Field Type Field Description phone char [] Contact phone number content, maximum of 14 bytes + '\\0' line breakValid only when the operation code (operat) is 2 or 4 name char [] Contact name content, maximum of 31 bytes + '\\0' line breakValid only when the operation code (operat) is 2 or 4 Example: { \"version\": 0, \"err_code\": 0, \"operat\": 1, \"items_num\": 0, \"items\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:56:13 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetWeather.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetWeather.html","title":"V3 Set Weather Data","keywords":"","body":"Setting Weather Data for V3 Menu: setSetV3Weather Flutter Example: /// Send the v3 weather protocol event number under v3 setWeatherV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_v3_weather ); /// Send the v3 weather protocol under v3 libManager.send(evt: CmdEvtType.setWeatherV3, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Type Description version int Protocol library version number month int Month of the most recent sync from the server day int Day of the most recent sync from the server hour int Hour of the most recent sync from the server min int Minute of the most recent sync from the server sec int Second of the most recent sync from the server week int The day of the weekbit0: Mondaybit1: Tuesdayand so on up to Sunday weather_type int Weather type0: Other1: Sunny2: Cloudy3: Overcast4: Rain5: Heavy rain6: Thunderstorm7: Snow8: Sleet9: Typhoon10: Sandstorm11: Night clear12: Night cloudy13: Hot14: Cold15: Gentle breeze16: Strong wind17: Haze18: Shower19: Cloudy to sunny48: Thunder49: Hail50: Blowing sand51: Tornado (realme custom weather type idw02) today_tmp int Current temperature in CelsiusFor negative temperatures, add 100 to the temperature and transmit today_max_temp int Maximum temperature in CelsiusFor negative temperatures, add 100 to the temperature and transmit today_min_temp int Minimum temperature in CelsiusFor negative temperatures, add 100 to the temperature and transmit city_name char [] City nameMaximum of 75 bytes air_quality int Air qualityMultiply by 10 for transmission precipitation_probability int Precipitation probability0-100 percentage humidity int Humidity today_uv_intensity int UV intensityMultiply by 10 for transmission wind_speed int Wind speed sunrise_hour int Sunrise hourValid only for version 1 sunrise_min int Sunrise minutesValid only for version 1 sunset_hour int Sunset hourValid only for version 1 sunset_min int Sunset minutesValid only for version 1 sunrise_item_num int Number of sunrise and sunset time detailsCurrently, the maximum number of days is set to 7Invalid for version 1 air_grade_item char [] Air quality level contentInvalid for version 1 hours_weather_items array Collection of weather data for the next 48 hoursCollection of weather_type, temperature, and probability future_items array Weather data for the next seven daysCollection of weather_type, max_temp, and min_temp sunrise_item array Sunrise and sunset time detailsCollection of sunrise_hour, sunrise_min, sunset_hour, and sunset_minInvalid for version 1 Field Name Type Description weather_type int Weather type temperature int TemperatureFor negative temperatures, add 100 to the temperature and transmit probability int Probability of temperature occurrence0-100 percentage Field Name Type Description weather_type int Weather type max_temp int Maximum temperatureFor negative temperatures, add 100 to the temperature and transmit min_temp int Minimum temperatureFor negative temperatures, add 100 to the temperature and transmit Field Name Type Description sunrise_hour int Sunrise hourInvalid for version 1 sunrise_min int Sunrise minutesInvalid for version 1 sunset_hour int Sunset hourInvalid for version 1 sunset_min int Sunset minutesInvalid for version 1 Example: { \"version\": 0, \"month\": 12, \"day\": 26, \"hour\": 16, \"min\": 31, \"sec\": 30, \"week\": 1, \"weather_type\": 1, \"today_tmp\": 21, \"today_max_temp\": 23, \"today_min_temp\": 12, \"city_name\": \"shenzhen\", \"air_quality\": 53, \"precipitation_probability\": 1, \"humidity\": 0, \"today_uv_intensity\": 0, \"wind_speed\": 0, \"sunrise_hour\": 6, \"sunrise_min\": 20, \"sunset_hour\": 18, \"sunset_min\": 17, \"sunrise_item_num\": 0, \"air_grade_item\": [], \"hours_weather_items\": [ { \"weather_type\": 1, \"temperature\": 0, \"probability\": 0 }, { \"weather_type\": 1, \"temperature\": 0, \"probability\": 0 } ], \"future_items\": null, \"sunrise_item\": null } JSON Fields Received by the App: Field Name Type Description version int Protocol library version number err_code int Error code, 0 for success, non-zero for error codes Example: { \"version\": 0, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:51:52 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetWorldTime.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetWorldTime.html","title":"V3 Send World Time","keywords":"","body":"V3 World Time Set Function Menu: setSetV3WorldTime Flutter Example: /// v3 set v3 world time setWorldTimeV3( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_world_time), /// v3 set v3 world time libManager.send(evt: CmdEvtType.setWorldTimeV3, json: jsonEncode(json)); JSON Field Sent by the App: Field Name Field Type Field Description version int Protocol library version number items_num int Number of clocks, send all clocks at a timeMax 10 items List Details of world clocksContains id, min_offset, city_name, sunrise_hour, sunrise_min, sunset_hour, sunset_min, longitude_flag, longitude, latitude_flag, latitude Field Name Field Type Field Description id int Detail ID min_offset int Minute offset from current time to UTC 0 city_name String City name, up to 60 bytes sunrise_hour int Hour of sunrise sunrise_min int Minute of sunrise sunset_hour int Hour of sunset sunset_min int Minute of sunset longitude_flag int 1: East longitude 2: West longitude longitude int Longitude, multiplied by 100, with 2 decimal places latitude_flag int 1: North latitude 2: South latitude latitude Int Latitude, multiplied by 100, with 2 decimal places Example: { \"items_num\": 4, \"items\": [{ \"id\": 31, \"min_offset\": 480, \"city_name\": \"Beijing\", \"sunrise_hour\": 7, \"sunrise_min\": 25, \"sunset_hour\": 16, \"sunset_min\": 49, \"longitude_flag\": 1, \"longitude\": 11641, \"latitude_flag\": 1, \"latitude\": 3990 }, { \"id\": 295, \"min_offset\": 540, \"city_name\": \"Tokyo\", \"sunrise_hour\": 6, \"sunrise_min\": 41, \"sunset_hour\": 16, \"sunset_min\": 28, \"longitude_flag\": 1, \"longitude\": 13965, \"latitude_flag\": 1, \"latitude\": 3568 }, { \"id\": 148, \"min_offset\": 0, \"city_name\": \"London\", \"sunrise_hour\": 7, \"sunrise_min\": 56, \"sunset_hour\": 15, \"sunset_min\": 51, \"longitude_flag\": 2, \"longitude\": 13, \"latitude_flag\": 1, \"latitude\": 5151 }, { \"id\": 197, \"min_offset\": -300, \"city_name\": \"New York\", \"sunrise_hour\": 7, \"sunrise_min\": 10, \"sunset_hour\": 16, \"sunset_min\": 28, \"longitude_flag\": 2, \"longitude\": 7401, \"latitude_flag\": 1, \"latitude\": 4071 }] } JSON Field Received by the App: Field Name Field Type Field Description version int Protocol library version number err_code int Error code, 0 for success, non-zero for error Example: { \"version\": 0, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:54:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetWalkRemindTimes.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetWalkRemindTimes.html","title":"V3 Set Walking Reminder Time Points","keywords":"","body":"V3 Set Multiple Walk Reminder Times Function Name: setWalkReminderTimeGoal Flutter Example: /// Set multiple walk reminder times event number setWalkRemindTimes( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_walk_remind_times), /// Set multiple walk reminder times libManager.send(evt: CmdEvtType.setWalkRemindTimes, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Data Type Field Description version int Protocol library version number on_off int Switch: 170 for on, 85 for off num int Number of items, i.e., number of set reminder times items array Details of walk reminders with hour and minute Field Name Data Type Field Description hour int Walk reminder time: Hour min int Walk reminder time: Minute Example: { \"version\": 0, \"on_off\": 0, \"num\": 2, \"items\": [ { \"hour\": 0, \"min\": 0 }, { \"hour\": 0, \"min\": 0 } ] } JSON Fields Received by the App: Field Name Data Type Field Description version int Protocol version number err_code int Error code: 0 for success, non-zero for failure Example: { \"version\": 0, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:47:23 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetMusicInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetMusicInfo.html","title":"V3 Get Firmware Music Name and Folder","keywords":"","body":"V3 Get Firmware Song Names and Folders Menu: getSupportGetBleMusicInfoVerV3 Flutter Example: /// Event number for getting the firmware song names and folders getBleMusicInfo( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_ble_music_info), /// Get the firmware song names and folders libManager.send(evt: CmdEvtType.getBleMusicInfo, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description version int Protocol library versionReserved all_memory int Firmware SDK card informationTotal space useful_memory int Firmware SDK card informationAvailable space used_memory int Firmware SDK card informationCurrent used space in bytes folder_num int Number of folder details (playlists) music_num int Number of music details folder_items set Folder details (playlists)folder_id & music_num & folder_name & music_index set music_items set Music detailsmusic_id & music_memory & music_name & singer_name set Field Name Field Type Field Description folder_id int Playlist (folder) id 1~10 music_num int Number of songs in the playlist, up to 100 folder_name char [] Playlist (folder) name, up to 20 bytes music_index int [] Ids of the songs in the playlist, listed in the order they were added Field Name Field Type Field Description music_id int Song ID, starting from 1 music_memory int Space occupied by the song music_name char [] Song name, up to 45 bytes singer_name char [] Singer name, up to 30 bytes Example: { \"version\": 0, \"all_memory\": 0, \"useful_memory\": 0, \"used_memory\": 0, \"folder_num\": 0, \"music_num\": 0, \"folder_items\": null, \"music_items\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:51:30 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3OperateMusic.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3OperateMusic.html","title":"V3 Operate Music or Folder","keywords":"","body":"V3 Operation for Songs or Folders Flutter Example: /// Operation for songs or folders event setMusicOperate( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_operate_ble_music), /// Operation for songs or folders libManager.send(evt: CmdEvtType.setMusicOperate, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description version int Protocol library version number music_operate int Music operation0: Invalid operation1: Delete music2: Add music folder_operate int Folder (playlist) operation0: Invalid operation1: Delete folder2: Add folder3: Modify playlist4: Import playlist5: Delete music music_items array Music detailsArray containing music_id, music_memory, music_name, and singer_name folder_items array Folder (playlist) detailsArray containing folder_id, music_num, folder_name, and music_index Field Name Field Type Field Description folder_id int Playlist (folder) id, ranging from 1 to 10 music_num int Number of songs in the playlist, maximum of 100 folder_name char [] Playlist (folder) name, maximum of 20 bytes music_index int [] Corresponding song ids in the playlist, arranged in order of addition Field Name Field Type Field Description music_id int Music id, starting from 1 music_memory int Space occupied by the music music_name char [] Music name, maximum of 45 bytes singer_name char [] Singer name, maximum of 30 bytes Example: { \"version\": 0, \"music_operate\": 0, \"folder_operate\": 2, \"music_items\": null, \"folder_items\": { \"folder_id\": 1, \"music_num\": 0, \"folder_name\": \"music fold 1\", \"music_index\": [] } } JSON Fields Received by the App: Field Name Field Type Field Description operate_type int Operation type:0: Invalid operation1: Delete music2: Add music3: Delete folder4: Add folder5: Modify playlist6: Import playlist7: Delete music in playlist version int Firmware SDK card informationTotal space err_code int 0: Successful; non-zero: Failed music_id int Music id returned when adding music successfully Example: { \"operate_type\": 4, \"version\": 0, \"err_code\": 0, \"music_id\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:03:31 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3NoticeMsgDynamic.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3NoticeMsgDynamic.html","title":"V3 Notification Message Reminder (Dynamic)","keywords":"","body":"V3 Dynamic Notification Message Reminder Flutter Example: /// V3 dynamic notification message event number setNoticeAppName( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_notice_message_add_app_name ) /// V3 dynamic notification message libManager.send(evt: CmdEvtType.setNoticeAppName, json: jsonEncode(json)); JSON Fields Sent by the App: Field Name Field Type Field Description verison int Protocol library version number os_platform int System0: Invalid, 1: Android, 2: iOS evt_type int Current mode0: Invalid, 1: Message reminder notify_type int Enumeration type of messageMax value: 20000 msg_ID int Message IDValid only if evt_type is message reminder and msg_ID is not 0 app_items_len int Number of country and language details contact char [] Contact name (maximum 64 bytes) phone_number char [] Phone number (maximum 32 bytes) msg_data char [] Message content (maximum 250 bytes) items Array Country and language detailsCollection of language and name Field Name Field Type Field Description language int Language type name char [] App name corresponding to the country (maximum 50 bytes) Example: { \"verison\": 0, \"os_platform\": 1, \"evt_type\": 1, \"notify_type\": 3, \"msg_ID\": 1, \"app_items_len\": 1, \"contact\": \"John Doe\", \"phone_number\": \"1234567890\", \"msg_data\": \"Hello\", \"items\": [ { \"language\": 2, \"name\": \"wechat\" } ] } JSON Fields Received by the App: Field Name Field Type Field Description is_success int 1: Success, 0: Failure Example: { \"is_success\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:00:45 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetHistoricalMenstruation.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetHistoricalMenstruation.html","title":"V3 Send Historical Menstruation Data","keywords":"","body":"V3 Menstrual Historical Data Delivery Function: setHistoryMenstrual Flutter Example: /// Menstrual historical data delivery event number getHistoricalMenstruation( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_get_historical_menstruation ); /// Menstrual historical data delivery libManager.send( evt: CmdEvtType.getHistoricalMenstruation, json: jsonEncode(json) ); JSON Fields Sent by the App: Field Name Field Type Field Description version int Protocol library version number avg_menstrual_day int Average length of menstrual cycle avg_cycle_day int Average length of menstrual cycle items_len int Increase, modify validNotification switch170: Turn on total notification switch, 85: Turn off total notification switch items list Details of menstrual historical dataCollection of year, month, day, menstrual_day, cycle_day Field Name Field Type Field Description year int Year when menstruation starts mon int Month when menstruation starts day int Day when menstruation starts menstrual_day int Length of menstrual cycle (days) cycle_day int Length of cycle (days) Example: { \"version\": 0, \"avg_menstrual_day\": 0, \"avg_cycle_day\": 0, \"items_len\": 2, \"items\": [ { \"year\": 0, \"mon\": 0, \"day\": 0, \"menstrual_day\": 0, \"cycle_day\": 0 }, { \"year\": 0, \"mon\": 0, \"day\": 0, \"menstrual_day\": 0, \"cycle_day\": 0 } ] } JSON Fields Received by the App: Field Name Field Type Field Description err_code int Error code: 0 for success, non-zero for failure Example: { \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:32:27 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetDialSort.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetDialSort.html","title":"V3 Set Dial Order","keywords":"","body":"V3 Set Watch Dial Sort API: setWatchDialSort Flutter Example: /// Set watch dial sort event setWatchDialSort( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_set_watch_dial_sort), /// Set watch dial sort libManager.send(evt: CmdEvtType.setWatchDialSort, json: jsonEncode(json)); JSON Fields Sent by App: Field Name Field Type Field Description sort_item_numb int Number of items in the watch dial sort list p_sort_item array Array of watch dial sort items type, sort_number, and name Each watch dial sort item contains the following fields: Field Name Field Type Field Description type int Watch dial type 1: Normal Dial, 2: Wallpaper Dial, 3: Cloud Dial sort_number int Serial number, starting from 0, not exceeding the total number of supported watch dials name char [] Watch dial ID, maximum 30 bytes Example: { \"sort_item_numb\": 2, \"p_sort_item\": [ { \"type\": 1, \"sort_number\": 0, \"name\": \"w123.iwf\" }, { \"type\": 1, \"sort_number\": 1, \"name\": \"w555.iwf\" } ] } JSON Fields Received by App: Field Name Field Type Field Description version int Protocol version number err_code int Error code, 0 for success, non-zero for failure Example: { \"version\": 0, \"err_code\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:21:41 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetRunPlan.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetRunPlan.html","title":"V3 APP Send Running Plan (Sport Plan)","keywords":"","body":"V3APP issued running plan (exercise plan) Function menu: setSupportSportPlan Flutter example: /// App issued running plan (exercise plan) event number setSendRunPlan( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_send_run_plan), /// App issued running plan (exercise plan) libManager.send(evt: CmdEvtType.setSendRunPlan, json: jsonEncode(json)); Json fields issued by the App: Field Name Field Type Field Description verison int Protocol library version number operate int Operation1: Start plan 2: Plan data sent 3: End plan 4: Query running plan type int Plan type1: 3km running plan 2: 5km running plan 3: 10km running plan4: Half marathon training (Phase 2)5: Marathon training (Phase 2) year int Plan start time year month int Plan start time month day int Plan start time day hour int Plan start time hour min int Plan start time minute sec int Plan start time second day_num int Number of plan daysApplicable when operate is 2 items Array Plan details: type & num & item Field Name Field Type Field Description type int Training type 186: Rest plan 187: Outdoor running plan 188: Indoor running plan189: Indoor fitness plan num int Number of actionsNote: The number of actions is zero when resting, and non-zero for other actions item Array Details of action: type & time & height_heart & low_heart Field Name Field Type Field Description type int Action type1: Fast walk 2: Jog 3: Moderate run 4: Fast run time int Target time Unit: seconds height_heart int Low heart rate range low_heart int High heart rate range Example: { \"verison\": 0, \"operate\": 1, \"type\": 1, \"year\": 2022, \"month\": 12, \"day\": 26, \"hour\": 17, \"min\": 36, \"sec\": 0, \"day_num\": 1, \"items\":[ { \"type\": 186, \"num\": 2, \"item\": [ { \"type\": 1, \"time\": 200, \"height_heart\": 110, \"low_heart\": 80 }, { \"type\": 1, \"time\": 500, \"height_heart\": 110, \"low_heart\": 80 } ] } ], \"item\": [] } Json fields received by the App: Field Name Field Type Field Description err_code int 00: Success, 01: Failed, 02: Another running plan is already enabled version int Protocol library version number operate int Operation:1: Start plan 2: Plan data sent 3: End plan 4: Query running plan type int Plan type:1: 3km running plan 2: 5km running plan 3: 10km running plan 4: Half marathon training (Phase 2)5: Marathon training (Phase 2) year int Plan implementation start time year month int Plan implementation start time month day int Plan implementation start time day hour int Plan implementation start time hour min int Plan implementation start time minute sec int Plan implementation start time second Example: { \"err_code\": 0, \"version\": 0, \"operate\": 1, \"type\": 1, \"year\": 2022, \"month\": 12, \"day\": 26, \"hour\": 17, \"min\": 36, \"sec\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:43:21 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetCutoverSport.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetCutoverSport.html","title":"V3 APP Toggle Device Sport During Exercise","keywords":"","body":"V3APP Notifies Device to Switch Exercise Process Flutter Example: /// Exercise plan operation event number in the app exchangeAppPlan( evtBase: _VBusEvtBase.base_app_set, evtType: _VBusEvtType.func_v3_app_to_ble_sport_cutover), /// Exercise plan operation in the app libManager.send(evt: CmdEvtType.exchangeAppPlan, json: jsonEncode(json)); JSON fields sent by the app: Field Name Field Type Field Description operate int Operation1: Start Exercise 2: Pause Exercise 3: Resume Exercise 4: End Exercise 5: Switch Action type int Plan type1: Running Plan 3km2: Running Plan 5km3: Running Plan 10km4: Half Marathon Training (Phase 2)5: Marathon Training (Phase 2)6: Post-Run Stretching7: 6-minute Easy Run 8: 10-minute Easy Run 9: 15-minute Easy Run 10: Walk-Run Combination (Beginner) 11: Walk-Run Combination (Advanced) 12: Walk-Run Combination (Intensive) training_offset int Training course date offset starting from zero hour int Start, Pause, Resume, End time determined by operateTime: Hour minute int Time: Minute second int Time: Second Example: { \"operate\": 1, \"type\": 1, \"action_type\": 1, \"year\": 2022, \"month\": 12, \"day\": 26, \"time\": 200, \"low_heart\": 80, \"high_heart\": 110, \"cur_day\": 1, \"hour\": 0, \"minute\": 0, \"second\": 0 } JSON fields received by the app: Field Name Field Type Field Description err_code int 0: Success, other values indicate failure operate int Operation1: Start Exercise2: Pause Exercise 3: Resume Exercise4: End Exercise 5: Switch Action type int Plan type1: Running Plan 3km2: Running Plan 5km3: Running Plan 10km4: Half Marathon Training (Phase 2)5: Marathon Training (Phase 2) action_type int Action type1: Fast Walking2: Slow Jogging3: Medium Speed Running4: Fast Running5: End Course Exercise (also waits for user's Free Exercise) (This field is effective when operate is 5) Example: { \"err_code\": 0, \"operate\": 1, \"type\": 1, \"action_type\": 1 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:11:43 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetHabitInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3GetHabitInfo.html","title":"V3 Get User Habit Information","keywords":"","body":"Get User Habit Information in V3 Function: getHabitInfoV3 Flutter example: /// Get user habit information in V3 getHabitInfoV3( evtBase: _VBusEvtBase.base_app_get, evtType: _VBusEvtType.func_v3_get_habit_information, ), /// Send command to get user habit information in V3 libManager.send(evt: CmdEvtType.getHabitInfoV3, json: jsonEncode(json)); JSON fields received by the app: Field Name Field Type Field Description browse_count int Number of browsing items implement_count int Number of implementation items bro_items array Details of browsing items imp_items array Details of implementation items Field Name Field Type Field Description type int Type of feature 1: Running Course 2: Running Plan 3: Device Sleep 4: Weight evt int Event 1: Browse Running Course 2: Browse Running Plan 3: Browse Sleep 4: Sleep Breathing 5: Click Weight Management year int Browsing Date (Year) month int Browsing Date (Month) day int Browsing Date (Day) hour int Last click time of the day (Hour) min int Last click time of the day (Minute) sec int Last click time of the day (Second) count int Number of clicks Field Name Field Type Field Description type int Type of feature 1: Running Course 2: Running Plan 3: Post-running Stretch evt int Event 1: Use Running Course 2: Implement Running Plan 3: Implement Post-running Stretch start_year int Start Time (Year) start_month int Start Time (Month) start_day int Start Time (Day) start_hour int Start Time (Hour) start_min int Start Time (Minute) start_sec int Start Time (Second) end_year int End Time (Year) end_month int End Time (Month) end_day int End Time (Day) end_hour int End Time (Hour) end_min int End Time (Minute) end_sec int End Time (Second) completion_rate int Completion Rate (0 to 100) Example: { \"browse_count\": 1, \"implement_count\": 1, \"bro_items\": [ { \"type\": 0, \"evt\": 0, \"year\": 0, \"month\": 0, \"day\": 0, \"hour\": 0, \"min\": 0, \"sec\": 0, \"count\": 0 } ], \"imp_items\": [ { \"type\": 0, \"evt\": 0, \"start_year\": 0, \"start_month\": 0, \"start_day\": 0, \"start_hour\": 0, \"start_min\": 0, \"start_sec\": 0, \"end_year\": 0, \"end_month\": 0, \"end_day\": 0, \"end_hour\": 0, \"end_min\": 0, \"end_sec\": 0, \"completion_rate\": 0 } ] } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:47:47 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3MiniProgramControl.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3MiniProgramControl.html","title":"V3 Operate Mini Program Information (Reserved)","keywords":"","body":"V3 Manage Mini Program Information JSON Fields Sent by the App: Field Name Field Type Field Description version int Protocol library version operate int 0: Invalid1: Launch mini program2: Delete mini program3: Get installed mini program list mini_program_name char [] Mini program name Not applicable for operate=0 or operate=3. No need to send the nameMaximum 30 bytes Example: { \"version\": 0, \"operate\": 1, \"mini_program_name\": \"粤康码\" } JSON Fields Received by the App: Field Name Field Type Field Description version int Protocol library version operate int 0: Invalid1: Launch mini program2: Delete mini program3: Get installed mini program list error_code int 0: SuccessNon-zero: Failure mini_program_num int Number of mini programs (valid for operate=3)Maximum 50 programs residual_space int Remaining space total_space int Total space info_item array List of mini programs In info_item: Field Name Field Type Field Description mini_program_name char [] Mini program name (maximum 30 bytes) mini_program_size int Mini program size mini_program_version int Mini program version number Example: { \"version\": 0, \"operate\": 1, \"error_code\": 0, \"mini_program_num\": 0, \"residual_space\": 0, \"total_space\": 0, \"info_item\": null } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:56:35 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetSmartCompetitorConfigInfo.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3SetSmartCompetitorConfigInfo.html","title":"V3 Configure Smart Companion Running Information (Reserved)","keywords":"","body":"V3 Intelligent Running Companion Information Configuration JSON Fields Sent by the App: Field Name Data Type Field Description version int Protocol library version number, default 0 operate int Operation 0: Invalid 1: Set 2: Query background_font_color int Background font color Set operation valid ai_image_id int AI image ID Set operation valid user_image_id int User image ID Set operation valid bg_image_id Int Background image ID Set operation valid Example: { } JSON Fields Received by the App: Field Name Data Type Field Description version int Protocol library version number, default 0 err_code int 0: Success, non-zero: Failure operate int Operation 0: Invalid 1: Set 2: Query background_font_color int Background font color Query operation valid ai_image_id int AI image ID Query operation valid user_image_id int User image ID Query operation valid bg_image_id Int Background image ID Query operation valid Example: { } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 15:44:30 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3CutoverSportFromDevice.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3CutoverSportFromDevice.html","title":"V3 Device Notifies App to Switch Sport During Exercise","keywords":"","body":"V3 Device Notifies App of Exercise Process Switching JSON Fields Sent by the App: Field Name Field Type Field Description operate int Operation1: Start exercise2: Pause exercise3: Resume exercise4: End exercise5: Switch action type int Plan type1: 3km running plan2: 5km running plan3: 10km running plan4: Half marathon training (Phase 2)5: Marathon training (Phase 2) action_type int Action type1: Fast walk2: Jog3: Moderate run4: Fast run5: End course exercise (waiting for user's free exercise) (This field is effective when operate is 5) err_code int 0: Success, non-zero: Failure Example: { \"operate\": 1, \"type\": 1, \"action_type\": 1, \"err_code\": 0 } JSON Fields Received by the App: Field Name Field Type Field Description operate int 1: Start exercise2: Pause exercise3: Resume exercise4: End exercise5: Switch action type int Plan type1: 3km running plan2: 5km running plan3: 10km running plan4: Half marathon training (Phase 2)5: Marathon training (Phase 2) action_type int Action type1: Fast walk2: Jog3: Moderate run4: Fast run5: End course exercise (waiting for user's free exercise); 6: Free exercise after course ends (This field is effective when operate is 5) year int Year of the training course date (training day's date) month int Month of the training course date (training day's date) day int Day of the training course date (training day's date) time int Action target time in seconds low_heart int Lower value of heart rate range high_heart int Upper value of heart rate range cur_day int Start/pause/resume/end time, determined by the operate valueTime: day hour int Time: hour minute int Time: minute second int Time: second Example: { \"operate\": 1, \"type\": 1, \"action_type\": 1, \"year\": 2022, \"month\": 12, \"day\": 26, \"time\": 200, \"low_heart\": 80, \"high_heart\": 110, \"cur_day\": 1, \"hour\": 0, \"minute\": 0, \"second\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:33:06 "},"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3NoticeDialChange.html":{"url":"doc/BaseProtocolEvtExecDoc/en/doc/IDOV3Evt/IDOV3NoticeDialChange.html","title":"V3 APP Get Dial Color Style Modification","keywords":"","body":"V3 App Get Dial Color Style Modification JSON Fields Received by the App: Field Name Field Type Field Description version int Protocol library version number dial_ID int Dial ID name char [] Dial name (maximum 30 bytes) dial_type int Reply type:Currently only 0: Invalid; 1: Color style_enum int Enumeration of the color change, starting from 0 Example: { \"version\": 0, \"dail_ID\": 1, \"name\": \"w120.iwf\", \"dial_type\": 1, \"style_enum\": 0 } Copyright © 2023-2024 IDO. All rights reserved. all right reserved，powered by GitbookModify Date: 2023-08-21 14:58:00 "}}